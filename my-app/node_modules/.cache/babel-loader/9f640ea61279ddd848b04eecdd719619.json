{"ast":null,"code":"'use strict';\n\nvar chars = require('./chars');\nvar utils = require('./utils');\n\n/**\n * Expose `Glob`\n */\n\nvar Glob = module.exports = function Glob(pattern, options) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options);\n  }\n  this.options = options || {};\n  this.pattern = pattern;\n  this.history = [];\n  this.tokens = {};\n  this.init(pattern);\n};\n\n/**\n * Initialize defaults\n */\n\nGlob.prototype.init = function (pattern) {\n  this.orig = pattern;\n  this.negated = this.isNegated();\n  this.options.track = this.options.track || false;\n  this.options.makeRe = true;\n};\n\n/**\n * Push a change into `glob.history`. Useful\n * for debugging.\n */\n\nGlob.prototype.track = function (msg) {\n  if (this.options.track) {\n    this.history.push({\n      msg: msg,\n      pattern: this.pattern\n    });\n  }\n};\n\n/**\n * Return true if `glob.pattern` was negated\n * with `!`, also remove the `!` from the pattern.\n *\n * @return {Boolean}\n */\n\nGlob.prototype.isNegated = function () {\n  if (this.pattern.charCodeAt(0) === 33 /* '!' */) {\n    this.pattern = this.pattern.slice(1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Expand braces in the given glob pattern.\n *\n * We only need to use the [braces] lib when\n * patterns are nested.\n */\n\nGlob.prototype.braces = function () {\n  if (this.options.nobraces !== true && this.options.nobrace !== true) {\n    // naive/fast check for imbalanced characters\n    var a = this.pattern.match(/[\\{\\(\\[]/g);\n    var b = this.pattern.match(/[\\}\\)\\]]/g);\n\n    // if imbalanced, don't optimize the pattern\n    if (a && b && a.length !== b.length) {\n      this.options.makeRe = false;\n    }\n\n    // expand brace patterns and join the resulting array\n    var expanded = utils.braces(this.pattern, this.options);\n    this.pattern = expanded.join('|');\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.brackets = function () {\n  if (this.options.nobrackets !== true) {\n    this.pattern = utils.brackets(this.pattern);\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.extglob = function () {\n  if (this.options.noextglob === true) return;\n  if (utils.isExtglob(this.pattern)) {\n    this.pattern = utils.extglob(this.pattern, {\n      escape: true\n    });\n  }\n};\n\n/**\n * Parse the given pattern\n */\n\nGlob.prototype.parse = function (pattern) {\n  this.tokens = utils.parseGlob(pattern || this.pattern, true);\n  return this.tokens;\n};\n\n/**\n * Replace `a` with `b`. Also tracks the change before and\n * after each replacement. This is disabled by default, but\n * can be enabled by setting `options.track` to true.\n *\n * Also, when the pattern is a string, `.split()` is used,\n * because it's much faster than replace.\n *\n * @param  {RegExp|String} `a`\n * @param  {String} `b`\n * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.\n * @return {String}\n */\n\nGlob.prototype._replace = function (a, b, escape) {\n  this.track('before (find): \"' + a + '\" (replace with): \"' + b + '\"');\n  if (escape) b = esc(b);\n  if (a && b && typeof a === 'string') {\n    this.pattern = this.pattern.split(a).join(b);\n  } else {\n    this.pattern = this.pattern.replace(a, b);\n  }\n  this.track('after');\n};\n\n/**\n * Escape special characters in the given string.\n *\n * @param  {String} `str` Glob pattern\n * @return {String}\n */\n\nGlob.prototype.escape = function (str) {\n  this.track('before escape: ');\n  var re = /[\"\\\\](['\"]?[^\"'\\\\]['\"]?)/g;\n  this.pattern = str.replace(re, function ($0, $1) {\n    var o = chars.ESC;\n    var ch = o && o[$1];\n    if (ch) {\n      return ch;\n    }\n    if (/[a-z]/i.test($0)) {\n      return $0.split('\\\\').join('');\n    }\n    return $0;\n  });\n  this.track('after escape: ');\n};\n\n/**\n * Unescape special characters in the given string.\n *\n * @param  {String} `str`\n * @return {String}\n */\n\nGlob.prototype.unescape = function (str) {\n  var re = /__([A-Z]+)_([A-Z]+)__/g;\n  this.pattern = str.replace(re, function ($0, $1) {\n    return chars[$1][$0];\n  });\n  this.pattern = unesc(this.pattern);\n};\n\n/**\n * Escape/unescape utils\n */\n\nfunction esc(str) {\n  str = str.split('?').join('%~');\n  str = str.split('*').join('%%');\n  return str;\n}\nfunction unesc(str) {\n  str = str.split('%~').join('?');\n  str = str.split('%%').join('*');\n  return str;\n}","map":{"version":3,"names":["chars","require","utils","Glob","module","exports","pattern","options","history","tokens","init","prototype","orig","negated","isNegated","track","makeRe","msg","push","charCodeAt","slice","braces","nobraces","nobrace","a","match","b","length","expanded","join","brackets","nobrackets","extglob","noextglob","isExtglob","escape","parse","parseGlob","_replace","esc","split","replace","str","re","$0","$1","o","ESC","ch","test","unescape","unesc"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/micromatch/lib/glob.js"],"sourcesContent":["'use strict';\n\nvar chars = require('./chars');\nvar utils = require('./utils');\n\n/**\n * Expose `Glob`\n */\n\nvar Glob = module.exports = function Glob(pattern, options) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options);\n  }\n  this.options = options || {};\n  this.pattern = pattern;\n  this.history = [];\n  this.tokens = {};\n  this.init(pattern);\n};\n\n/**\n * Initialize defaults\n */\n\nGlob.prototype.init = function(pattern) {\n  this.orig = pattern;\n  this.negated = this.isNegated();\n  this.options.track = this.options.track || false;\n  this.options.makeRe = true;\n};\n\n/**\n * Push a change into `glob.history`. Useful\n * for debugging.\n */\n\nGlob.prototype.track = function(msg) {\n  if (this.options.track) {\n    this.history.push({msg: msg, pattern: this.pattern});\n  }\n};\n\n/**\n * Return true if `glob.pattern` was negated\n * with `!`, also remove the `!` from the pattern.\n *\n * @return {Boolean}\n */\n\nGlob.prototype.isNegated = function() {\n  if (this.pattern.charCodeAt(0) === 33 /* '!' */) {\n    this.pattern = this.pattern.slice(1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Expand braces in the given glob pattern.\n *\n * We only need to use the [braces] lib when\n * patterns are nested.\n */\n\nGlob.prototype.braces = function() {\n  if (this.options.nobraces !== true && this.options.nobrace !== true) {\n    // naive/fast check for imbalanced characters\n    var a = this.pattern.match(/[\\{\\(\\[]/g);\n    var b = this.pattern.match(/[\\}\\)\\]]/g);\n\n    // if imbalanced, don't optimize the pattern\n    if (a && b && (a.length !== b.length)) {\n      this.options.makeRe = false;\n    }\n\n    // expand brace patterns and join the resulting array\n    var expanded = utils.braces(this.pattern, this.options);\n    this.pattern = expanded.join('|');\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.brackets = function() {\n  if (this.options.nobrackets !== true) {\n    this.pattern = utils.brackets(this.pattern);\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.extglob = function() {\n  if (this.options.noextglob === true) return;\n\n  if (utils.isExtglob(this.pattern)) {\n    this.pattern = utils.extglob(this.pattern, {escape: true});\n  }\n};\n\n/**\n * Parse the given pattern\n */\n\nGlob.prototype.parse = function(pattern) {\n  this.tokens = utils.parseGlob(pattern || this.pattern, true);\n  return this.tokens;\n};\n\n/**\n * Replace `a` with `b`. Also tracks the change before and\n * after each replacement. This is disabled by default, but\n * can be enabled by setting `options.track` to true.\n *\n * Also, when the pattern is a string, `.split()` is used,\n * because it's much faster than replace.\n *\n * @param  {RegExp|String} `a`\n * @param  {String} `b`\n * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.\n * @return {String}\n */\n\nGlob.prototype._replace = function(a, b, escape) {\n  this.track('before (find): \"' + a + '\" (replace with): \"' + b + '\"');\n  if (escape) b = esc(b);\n  if (a && b && typeof a === 'string') {\n    this.pattern = this.pattern.split(a).join(b);\n  } else {\n    this.pattern = this.pattern.replace(a, b);\n  }\n  this.track('after');\n};\n\n/**\n * Escape special characters in the given string.\n *\n * @param  {String} `str` Glob pattern\n * @return {String}\n */\n\nGlob.prototype.escape = function(str) {\n  this.track('before escape: ');\n  var re = /[\"\\\\](['\"]?[^\"'\\\\]['\"]?)/g;\n\n  this.pattern = str.replace(re, function($0, $1) {\n    var o = chars.ESC;\n    var ch = o && o[$1];\n    if (ch) {\n      return ch;\n    }\n    if (/[a-z]/i.test($0)) {\n      return $0.split('\\\\').join('');\n    }\n    return $0;\n  });\n\n  this.track('after escape: ');\n};\n\n/**\n * Unescape special characters in the given string.\n *\n * @param  {String} `str`\n * @return {String}\n */\n\nGlob.prototype.unescape = function(str) {\n  var re = /__([A-Z]+)_([A-Z]+)__/g;\n  this.pattern = str.replace(re, function($0, $1) {\n    return chars[$1][$0];\n  });\n  this.pattern = unesc(this.pattern);\n};\n\n/**\n * Escape/unescape utils\n */\n\nfunction esc(str) {\n  str = str.split('?').join('%~');\n  str = str.split('*').join('%%');\n  return str;\n}\n\nfunction unesc(str) {\n  str = str.split('%~').join('?');\n  str = str.split('%%').join('*');\n  return str;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}