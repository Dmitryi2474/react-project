{"ast":null,"code":"'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into three parts: [*, device, slash,\n// tail] windows-only\nvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\n// Regex to split the tail part of the above into [*, dir, basename, ext]\nvar splitTailRe = /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\nvar win32 = {};\n\n// Function to split a filename into [root, dir, basename, ext]\nfunction win32SplitPath(filename) {\n  // Separate device+slash from tail\n  var result = splitDeviceRe.exec(filename),\n    device = (result[1] || '') + (result[2] || ''),\n    tail = result[3] || '';\n  // Split the tail into dir, basename and extension\n  var result2 = splitTailRe.exec(tail),\n    dir = result2[1],\n    basename = result2[2],\n    ext = result2[3];\n  return [device, dir, basename, ext];\n}\nwin32.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar posix = {};\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\nposix.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  allParts[1] = allParts[1] || '';\n  allParts[2] = allParts[2] || '';\n  allParts[3] = allParts[3] || '';\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\nif (isWindows) module.exports = win32.parse;else /* posix */\n  module.exports = posix.parse;\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;","map":{"version":3,"names":["isWindows","process","platform","splitDeviceRe","splitTailRe","win32","win32SplitPath","filename","result","exec","device","tail","result2","dir","basename","ext","parse","pathString","TypeError","allParts","length","root","slice","base","name","splitPathRe","posix","posixSplitPath","module","exports"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/path-parse/index.js"],"sourcesContent":["'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into three parts: [*, device, slash,\n// tail] windows-only\nvar splitDeviceRe =\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\n// Regex to split the tail part of the above into [*, dir, basename, ext]\nvar splitTailRe =\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\n\nvar win32 = {};\n\n// Function to split a filename into [root, dir, basename, ext]\nfunction win32SplitPath(filename) {\n  // Separate device+slash from tail\n  var result = splitDeviceRe.exec(filename),\n      device = (result[1] || '') + (result[2] || ''),\n      tail = result[3] || '';\n  // Split the tail into dir, basename and extension\n  var result2 = splitTailRe.exec(tail),\n      dir = result2[1],\n      basename = result2[2],\n      ext = result2[3];\n  return [device, dir, basename, ext];\n}\n\nwin32.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\n\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar posix = {};\n\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\n\nposix.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  allParts[1] = allParts[1] || '';\n  allParts[2] = allParts[2] || '';\n  allParts[3] = allParts[3] || '';\n\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\n\nif (isWindows)\n  module.exports = win32.parse;\nelse /* posix */\n  module.exports = posix.parse;\n\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}