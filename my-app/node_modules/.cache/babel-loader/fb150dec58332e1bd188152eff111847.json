{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _ = require(\"../lodash.custom\");\nvar cli_options_1 = require(\"../cli/cli-options\");\n/**\n * @param {BrowserSync} browserSync\n * @param {String} [name] - instance name\n * @param {Object} pjson\n * @returns {Function}\n */\nmodule.exports = function (browserSync, name, pjson) {\n  return function () {\n    /**\n     * Handle new + old signatures for init.\n     */\n    var args = require(\"../args\")(_.toArray(arguments));\n    /**\n     * If the current instance is already running, just return an error\n     */\n    if (browserSync.active) {\n      return args.cb(new Error(\"Instance: \" + name + \" is already running!\"));\n    }\n    // Env specific items\n    args.config.version = pjson.version;\n    args.config.cwd = args.config.cwd || process.cwd();\n    var _a = cli_options_1.merge(args.config),\n      opts = _a[0],\n      errors = _a[1];\n    if (errors.length) {\n      return args.cb(new Error(cli_options_1.printErrors(errors)));\n    }\n    return browserSync.init(opts, args.cb);\n  };\n};","map":{"version":3,"mappings":";;;;;AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACnC;AAEA;;;;;;AAMAC,MAAM,CAACC,OAAO,GAAG,UAASC,WAAW,EAAEC,IAAI,EAAEC,KAAK;EAC9C,OAAO;IACH;;;IAGA,IAAIC,IAAI,GAAGN,OAAO,CAAC,SAAS,CAAC,CAACD,CAAC,CAACQ,OAAO,CAACC,SAAS,CAAC,CAAC;IAEnD;;;IAGA,IAAIL,WAAW,CAACM,MAAM,EAAE;MACpB,OAAOH,IAAI,CAACI,EAAE,CAAC,IAAIC,KAAK,CAAC,eAAaP,IAAI,yBAAsB,CAAC,CAAC;;IAGtE;IACAE,IAAI,CAACM,MAAM,CAACC,OAAO,GAAGR,KAAK,CAACQ,OAAO;IACnCP,IAAI,CAACM,MAAM,CAACE,GAAG,GAAGR,IAAI,CAACM,MAAM,CAACE,GAAG,IAAIC,OAAO,CAACD,GAAG,EAAE;IAE5C,yCAAmC;MAAlCE,YAAI;MAAEC,cAAM;IAEnB,IAAIA,MAAM,CAACC,MAAM,EAAE;MACf,OAAOZ,IAAI,CAACI,EAAE,CAAC,IAAIC,KAAK,CAACQ,yBAAW,CAACF,MAAM,CAAC,CAAC,CAAC;;IAGlD,OAAOd,WAAW,CAACiB,IAAI,CAACJ,IAAI,EAAEV,IAAI,CAACI,EAAE,CAAC;EAC1C,CAAC;AACL,CAAC","names":["_","require","module","exports","browserSync","name","pjson","args","toArray","arguments","active","cb","Error","config","version","cwd","process","opts","errors","length","cli_options_1","init"],"sources":["../../lib/public/init.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}