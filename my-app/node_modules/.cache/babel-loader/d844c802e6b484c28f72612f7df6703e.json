{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  };\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function (args, done) {\n    const completions = [];\n    const current = args.length ? args[args.length - 1] : '';\n    const argv = yargs.parse(args, true);\n    const aliases = yargs.parsed.aliases;\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv);\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () {\n              done(list);\n            });\n          }).catch(function (err) {\n            process.nextTick(function () {\n              throw err;\n            });\n          });\n        }\n\n        // synchronous completion function.\n        return done(result);\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions);\n        });\n      }\n    }\n    var handlers = command.getCommandHandlers();\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        return handlers[args[i]].builder(yargs.reset()).argv;\n      }\n    }\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0]);\n        }\n      });\n    }\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || []);\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1;\n        });\n        if (notInArgs) {\n          completions.push('--' + key);\n        }\n      });\n    }\n    done(completions);\n  };\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(path.resolve(__dirname, '../completion.sh.hbs'), 'utf-8');\n    var name = path.basename($0);\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0;\n    script = script.replace(/{{app_name}}/g, name);\n    return script.replace(/{{app_path}}/g, $0);\n  };\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null;\n  self.registerFunction = function (fn) {\n    completionFunction = fn;\n  };\n  return self;\n};","map":{"version":3,"names":["fs","require","path","module","exports","yargs","usage","command","self","completionKey","getCompletion","args","done","completions","current","length","argv","parse","aliases","parsed","completionFunction","result","then","list","process","nextTick","catch","err","handlers","getCommandHandlers","i","ii","builder","reset","match","getCommands","forEach","indexOf","push","Object","keys","getOptions","key","keyAndAliases","concat","notInArgs","every","val","generateCompletionScript","$0","script","readFileSync","resolve","__dirname","name","basename","replace","registerFunction","fn"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/yargs/lib/completion.js"],"sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () { done(list) })\n          }).catch(function (err) {\n            process.nextTick(function () { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = command.getCommandHandlers()\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        return handlers[args[i]].builder(yargs.reset()).argv\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || [])\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1\n        })\n        if (notInArgs) {\n          completions.push('--' + key)\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}