{"ast":null,"code":"/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\nvar expand = require('expand-range');\nvar repeat = require('repeat-element');\nvar tokens = require('preserve');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function (str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n  var opts = options || {};\n  arr = arr || [];\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n  var fn = opts.fn;\n  var es6;\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n  switch (m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n  }\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') {\n    return [str];\n  }\n  var segs, segsLength;\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n  var len = segs.length;\n  var i = 0,\n    val;\n  while (len--) {\n    var path = segs[i++];\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n    val = splice(str, outter, path);\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) {\n        continue;\n      }\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n  if (opts.strict) {\n    return filter(arr, filterEmpty);\n  }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n    if (idx === -1) {\n      arr.push(ele);\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function (ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function (ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}","map":{"version":3,"names":["expand","require","repeat","tokens","module","exports","str","options","Error","braces","arr","Array","isArray","opts","nodupes","fn","es6","patternRe","RegExp","patternRegex","matches","match","m","escapeCommas","escapeDots","escapePaths","splitWhitespace","exponential","emptyBraces","escapeBraces","test","concat","before","es6Regex","braceRe","braceRegex","exec","outter","inner","segs","segsLength","indexOf","split","length","join","makeRe","replace","wrap","bash","len","i","val","path","splice","push","after","strict","filter","filterEmpty","esc","exp","res","parts","ele","idx","num","Math","pow","apply","ch","map","token","replacement","substr","cb","TypeError","slice"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/micromatch/node_modules/braces/index.js"],"sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\nvar repeat = require('repeat-element');\nvar tokens = require('preserve');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch(m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') { return [str]; }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0, val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) { return filter(arr, filterEmpty); }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function(ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function(ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement\n    + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}