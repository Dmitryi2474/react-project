{"ast":null,"code":"const path = require('path');\nconst inspect = require('util').inspect;\nconst camelCase = require('camelcase');\n\n// handles parsing positional arguments,\n// and populating argv with said positional\n// arguments.\nmodule.exports = function (yargs, usage, validation) {\n  const self = {};\n  var handlers = {};\n  var aliasMap = {};\n  self.addHandler = function (cmd, description, builder, handler) {\n    var aliases = [];\n    if (Array.isArray(cmd)) {\n      aliases = cmd.slice(1);\n      cmd = cmd[0];\n    } else if (typeof cmd === 'object') {\n      var command = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : moduleName(cmd);\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases);\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler);\n      return;\n    }\n\n    // allow a module to be provided instead of separate builder and handler\n    if (typeof builder === 'object' && builder.builder && typeof builder.handler === 'function') {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler);\n      return;\n    }\n    var parsedCommand = parseCommand(cmd);\n    aliases = aliases.map(function (alias) {\n      alias = parseCommand(alias).cmd; // remove positional args\n      aliasMap[alias] = parsedCommand.cmd;\n      return alias;\n    });\n    if (description !== false) {\n      usage.command(cmd, description, aliases);\n    }\n    handlers[parsedCommand.cmd] = {\n      original: cmd,\n      handler: handler,\n      builder: builder || {},\n      demanded: parsedCommand.demanded,\n      optional: parsedCommand.optional\n    };\n  };\n  self.addDirectory = function (dir, context, req, callerFile, opts) {\n    opts = opts || {};\n    // disable recursion to support nested directories of subcommands\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false;\n    // exclude 'json', 'coffee' from require-directory defaults\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];\n    // allow consumer to define their own visitor function\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : function (o) {\n      return o;\n    };\n    // call addHandler via visitor function\n    opts.visit = function (obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename);\n      // allow consumer to skip modules with their own visitor\n      if (visited) {\n        // check for cyclic reference\n        // each command file path should only be seen once per execution\n        if (~context.files.indexOf(joined)) return visited;\n        // keep track of visited files in context.files\n        context.files.push(joined);\n        self.addHandler(visited);\n      }\n      return visited;\n    };\n    require('require-directory')({\n      require: req,\n      filename: callerFile\n    }, dir, opts);\n  };\n\n  // lookup module object from require()d command and derive name\n  // if module was not require()d and no name given, throw error\n  function moduleName(obj) {\n    const mod = require('which-module')(obj);\n    if (!mod) throw new Error('No command name given for module: ' + inspect(obj));\n    return commandFromFilename(mod.filename);\n  }\n\n  // derive command name from filename\n  function commandFromFilename(filename) {\n    return path.basename(filename, path.extname(filename));\n  }\n  function extractDesc(obj) {\n    for (var keys = ['describe', 'description', 'desc'], i = 0, l = keys.length, test; i < l; i++) {\n      test = obj[keys[i]];\n      if (typeof test === 'string' || typeof test === 'boolean') return test;\n    }\n    return false;\n  }\n  function parseCommand(cmd) {\n    var extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n    var splitCommand = extraSpacesStrippedCommand.split(/\\s/);\n    var bregex = /\\.*[\\][<>]/g;\n    var parsedCommand = {\n      cmd: splitCommand.shift().replace(bregex, ''),\n      demanded: [],\n      optional: []\n    };\n    splitCommand.forEach(function (cmd, i) {\n      var variadic = false;\n      if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true;\n      if (/^\\[/.test(cmd)) {\n        parsedCommand.optional.push({\n          cmd: cmd.replace(bregex, ''),\n          variadic: variadic\n        });\n      } else {\n        parsedCommand.demanded.push({\n          cmd: cmd.replace(bregex, ''),\n          variadic: variadic\n        });\n      }\n    });\n    return parsedCommand;\n  }\n  self.getCommands = function () {\n    return Object.keys(handlers).concat(Object.keys(aliasMap));\n  };\n  self.getCommandHandlers = function () {\n    return handlers;\n  };\n  self.runCommand = function (command, yargs, parsed) {\n    var argv = parsed.argv;\n    var commandHandler = handlers[command] || handlers[aliasMap[command]];\n    var innerArgv = argv;\n    var currentContext = yargs.getContext();\n    var numFiles = currentContext.files.length;\n    var parentCommands = currentContext.commands.slice();\n    currentContext.commands.push(command);\n    if (typeof commandHandler.builder === 'function') {\n      // a function can be provided, which builds\n      // up a yargs chain and possibly returns it.\n      innerArgv = commandHandler.builder(yargs.reset(parsed.aliases));\n      // if the builder function did not yet parse argv with reset yargs\n      // and did not explicitly set a usage() string, then apply the\n      // original command string as usage() for consistent behavior with\n      // options object below\n      if (yargs.parsed === false) {\n        if (typeof yargs.getUsageInstance().getUsage() === 'undefined') {\n          yargs.usage('$0 ' + (parentCommands.length ? parentCommands.join(' ') + ' ' : '') + commandHandler.original);\n        }\n        innerArgv = innerArgv ? innerArgv.argv : yargs.argv;\n      } else {\n        innerArgv = yargs.parsed.argv;\n      }\n    } else if (typeof commandHandler.builder === 'object') {\n      // as a short hand, an object can instead be provided, specifying\n      // the options that a command takes.\n      innerArgv = yargs.reset(parsed.aliases);\n      innerArgv.usage('$0 ' + (parentCommands.length ? parentCommands.join(' ') + ' ' : '') + commandHandler.original);\n      Object.keys(commandHandler.builder).forEach(function (key) {\n        innerArgv.option(key, commandHandler.builder[key]);\n      });\n      innerArgv = innerArgv.argv;\n    }\n    if (!yargs._hasOutput()) populatePositional(commandHandler, innerArgv, currentContext, yargs);\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      commandHandler.handler(innerArgv);\n    }\n    currentContext.commands.pop();\n    numFiles = currentContext.files.length - numFiles;\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles);\n    return innerArgv;\n  };\n  function populatePositional(commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length); // nuke the current commands\n    var demanded = commandHandler.demanded.slice(0);\n    var optional = commandHandler.optional.slice(0);\n    validation.positionalCount(demanded.length, argv._.length);\n    while (demanded.length) {\n      var demand = demanded.shift();\n      if (demand.variadic) argv[demand.cmd] = [];\n      if (!argv._.length) break;\n      if (demand.variadic) argv[demand.cmd] = argv._.splice(0);else argv[demand.cmd] = argv._.shift();\n      postProcessPositional(yargs, argv, demand.cmd);\n      addCamelCaseExpansions(argv, demand.cmd);\n    }\n    while (optional.length) {\n      var maybe = optional.shift();\n      if (maybe.variadic) argv[maybe.cmd] = [];\n      if (!argv._.length) break;\n      if (maybe.variadic) argv[maybe.cmd] = argv._.splice(0);else argv[maybe.cmd] = argv._.shift();\n      postProcessPositional(yargs, argv, maybe.cmd);\n      addCamelCaseExpansions(argv, maybe.cmd);\n    }\n    argv._ = context.commands.concat(argv._);\n  }\n\n  // TODO move positional arg logic to yargs-parser and remove this duplication\n  function postProcessPositional(yargs, argv, key) {\n    var coerce = yargs.getOptions().coerce[key];\n    if (typeof coerce === 'function') {\n      try {\n        argv[key] = coerce(argv[key]);\n      } catch (err) {\n        yargs.getUsageInstance().fail(err.message, err);\n      }\n    }\n  }\n  function addCamelCaseExpansions(argv, option) {\n    if (/-/.test(option)) {\n      const cc = camelCase(option);\n      if (typeof argv[option] === 'object') argv[cc] = argv[option].slice(0);else argv[cc] = argv[option];\n    }\n  }\n  self.reset = function () {\n    handlers = {};\n    aliasMap = {};\n    return self;\n  };\n\n  // used by yargs.parse() to freeze\n  // the state of commands such that\n  // we can apply .parse() multiple times\n  // with the same yargs instance.\n  var frozen;\n  self.freeze = function () {\n    frozen = {};\n    frozen.handlers = handlers;\n    frozen.aliasMap = aliasMap;\n  };\n  self.unfreeze = function () {\n    handlers = frozen.handlers;\n    aliasMap = frozen.aliasMap;\n    frozen = undefined;\n  };\n  return self;\n};","map":{"version":3,"names":["path","require","inspect","camelCase","module","exports","yargs","usage","validation","self","handlers","aliasMap","addHandler","cmd","description","builder","handler","aliases","Array","isArray","slice","command","moduleName","concat","extractDesc","parsedCommand","parseCommand","map","alias","original","demanded","optional","addDirectory","dir","context","req","callerFile","opts","recurse","extensions","parentVisit","visit","o","obj","joined","filename","visited","files","indexOf","push","mod","Error","commandFromFilename","basename","extname","keys","i","l","length","test","extraSpacesStrippedCommand","replace","splitCommand","split","bregex","shift","forEach","variadic","getCommands","Object","getCommandHandlers","runCommand","parsed","argv","commandHandler","innerArgv","currentContext","getContext","numFiles","parentCommands","commands","reset","getUsageInstance","getUsage","join","key","option","_hasOutput","populatePositional","pop","splice","_","positionalCount","demand","postProcessPositional","addCamelCaseExpansions","maybe","coerce","getOptions","err","fail","message","cc","frozen","freeze","unfreeze","undefined"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/yargs/lib/command.js"],"sourcesContent":["const path = require('path')\nconst inspect = require('util').inspect\nconst camelCase = require('camelcase')\n\n// handles parsing positional arguments,\n// and populating argv with said positional\n// arguments.\nmodule.exports = function (yargs, usage, validation) {\n  const self = {}\n\n  var handlers = {}\n  var aliasMap = {}\n  self.addHandler = function (cmd, description, builder, handler) {\n    var aliases = []\n    if (Array.isArray(cmd)) {\n      aliases = cmd.slice(1)\n      cmd = cmd[0]\n    } else if (typeof cmd === 'object') {\n      var command = (Array.isArray(cmd.command) || typeof cmd.command === 'string') ? cmd.command : moduleName(cmd)\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases)\n      self.addHandler(command, extractDesc(cmd), cmd.builder, cmd.handler)\n      return\n    }\n\n    // allow a module to be provided instead of separate builder and handler\n    if (typeof builder === 'object' && builder.builder && typeof builder.handler === 'function') {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler)\n      return\n    }\n\n    var parsedCommand = parseCommand(cmd)\n    aliases = aliases.map(function (alias) {\n      alias = parseCommand(alias).cmd // remove positional args\n      aliasMap[alias] = parsedCommand.cmd\n      return alias\n    })\n\n    if (description !== false) {\n      usage.command(cmd, description, aliases)\n    }\n\n    handlers[parsedCommand.cmd] = {\n      original: cmd,\n      handler: handler,\n      builder: builder || {},\n      demanded: parsedCommand.demanded,\n      optional: parsedCommand.optional\n    }\n  }\n\n  self.addDirectory = function (dir, context, req, callerFile, opts) {\n    opts = opts || {}\n    // disable recursion to support nested directories of subcommands\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false\n    // exclude 'json', 'coffee' from require-directory defaults\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js']\n    // allow consumer to define their own visitor function\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : function (o) { return o }\n    // call addHandler via visitor function\n    opts.visit = function (obj, joined, filename) {\n      const visited = parentVisit(obj, joined, filename)\n      // allow consumer to skip modules with their own visitor\n      if (visited) {\n        // check for cyclic reference\n        // each command file path should only be seen once per execution\n        if (~context.files.indexOf(joined)) return visited\n        // keep track of visited files in context.files\n        context.files.push(joined)\n        self.addHandler(visited)\n      }\n      return visited\n    }\n    require('require-directory')({ require: req, filename: callerFile }, dir, opts)\n  }\n\n  // lookup module object from require()d command and derive name\n  // if module was not require()d and no name given, throw error\n  function moduleName (obj) {\n    const mod = require('which-module')(obj)\n    if (!mod) throw new Error('No command name given for module: ' + inspect(obj))\n    return commandFromFilename(mod.filename)\n  }\n\n  // derive command name from filename\n  function commandFromFilename (filename) {\n    return path.basename(filename, path.extname(filename))\n  }\n\n  function extractDesc (obj) {\n    for (var keys = ['describe', 'description', 'desc'], i = 0, l = keys.length, test; i < l; i++) {\n      test = obj[keys[i]]\n      if (typeof test === 'string' || typeof test === 'boolean') return test\n    }\n    return false\n  }\n\n  function parseCommand (cmd) {\n    var extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ')\n    var splitCommand = extraSpacesStrippedCommand.split(/\\s/)\n    var bregex = /\\.*[\\][<>]/g\n    var parsedCommand = {\n      cmd: (splitCommand.shift()).replace(bregex, ''),\n      demanded: [],\n      optional: []\n    }\n    splitCommand.forEach(function (cmd, i) {\n      var variadic = false\n      if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true\n      if (/^\\[/.test(cmd)) {\n        parsedCommand.optional.push({\n          cmd: cmd.replace(bregex, ''),\n          variadic: variadic\n        })\n      } else {\n        parsedCommand.demanded.push({\n          cmd: cmd.replace(bregex, ''),\n          variadic: variadic\n        })\n      }\n    })\n    return parsedCommand\n  }\n\n  self.getCommands = function () {\n    return Object.keys(handlers).concat(Object.keys(aliasMap))\n  }\n\n  self.getCommandHandlers = function () {\n    return handlers\n  }\n\n  self.runCommand = function (command, yargs, parsed) {\n    var argv = parsed.argv\n    var commandHandler = handlers[command] || handlers[aliasMap[command]]\n    var innerArgv = argv\n    var currentContext = yargs.getContext()\n    var numFiles = currentContext.files.length\n    var parentCommands = currentContext.commands.slice()\n    currentContext.commands.push(command)\n    if (typeof commandHandler.builder === 'function') {\n      // a function can be provided, which builds\n      // up a yargs chain and possibly returns it.\n      innerArgv = commandHandler.builder(yargs.reset(parsed.aliases))\n      // if the builder function did not yet parse argv with reset yargs\n      // and did not explicitly set a usage() string, then apply the\n      // original command string as usage() for consistent behavior with\n      // options object below\n      if (yargs.parsed === false) {\n        if (typeof yargs.getUsageInstance().getUsage() === 'undefined') {\n          yargs.usage('$0 ' + (parentCommands.length ? parentCommands.join(' ') + ' ' : '') + commandHandler.original)\n        }\n        innerArgv = innerArgv ? innerArgv.argv : yargs.argv\n      } else {\n        innerArgv = yargs.parsed.argv\n      }\n    } else if (typeof commandHandler.builder === 'object') {\n      // as a short hand, an object can instead be provided, specifying\n      // the options that a command takes.\n      innerArgv = yargs.reset(parsed.aliases)\n      innerArgv.usage('$0 ' + (parentCommands.length ? parentCommands.join(' ') + ' ' : '') + commandHandler.original)\n      Object.keys(commandHandler.builder).forEach(function (key) {\n        innerArgv.option(key, commandHandler.builder[key])\n      })\n      innerArgv = innerArgv.argv\n    }\n    if (!yargs._hasOutput()) populatePositional(commandHandler, innerArgv, currentContext, yargs)\n\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      commandHandler.handler(innerArgv)\n    }\n    currentContext.commands.pop()\n    numFiles = currentContext.files.length - numFiles\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles)\n    return innerArgv\n  }\n\n  function populatePositional (commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length) // nuke the current commands\n    var demanded = commandHandler.demanded.slice(0)\n    var optional = commandHandler.optional.slice(0)\n\n    validation.positionalCount(demanded.length, argv._.length)\n\n    while (demanded.length) {\n      var demand = demanded.shift()\n      if (demand.variadic) argv[demand.cmd] = []\n      if (!argv._.length) break\n      if (demand.variadic) argv[demand.cmd] = argv._.splice(0)\n      else argv[demand.cmd] = argv._.shift()\n      postProcessPositional(yargs, argv, demand.cmd)\n      addCamelCaseExpansions(argv, demand.cmd)\n    }\n\n    while (optional.length) {\n      var maybe = optional.shift()\n      if (maybe.variadic) argv[maybe.cmd] = []\n      if (!argv._.length) break\n      if (maybe.variadic) argv[maybe.cmd] = argv._.splice(0)\n      else argv[maybe.cmd] = argv._.shift()\n      postProcessPositional(yargs, argv, maybe.cmd)\n      addCamelCaseExpansions(argv, maybe.cmd)\n    }\n\n    argv._ = context.commands.concat(argv._)\n  }\n\n  // TODO move positional arg logic to yargs-parser and remove this duplication\n  function postProcessPositional (yargs, argv, key) {\n    var coerce = yargs.getOptions().coerce[key]\n    if (typeof coerce === 'function') {\n      try {\n        argv[key] = coerce(argv[key])\n      } catch (err) {\n        yargs.getUsageInstance().fail(err.message, err)\n      }\n    }\n  }\n\n  function addCamelCaseExpansions (argv, option) {\n    if (/-/.test(option)) {\n      const cc = camelCase(option)\n      if (typeof argv[option] === 'object') argv[cc] = argv[option].slice(0)\n      else argv[cc] = argv[option]\n    }\n  }\n\n  self.reset = function () {\n    handlers = {}\n    aliasMap = {}\n    return self\n  }\n\n  // used by yargs.parse() to freeze\n  // the state of commands such that\n  // we can apply .parse() multiple times\n  // with the same yargs instance.\n  var frozen\n  self.freeze = function () {\n    frozen = {}\n    frozen.handlers = handlers\n    frozen.aliasMap = aliasMap\n  }\n  self.unfreeze = function () {\n    handlers = frozen.handlers\n    aliasMap = frozen.aliasMap\n    frozen = undefined\n  }\n\n  return self\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}