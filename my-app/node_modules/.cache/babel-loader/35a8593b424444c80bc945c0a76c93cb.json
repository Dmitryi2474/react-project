{"ast":null,"code":"/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\nvar isNumber = require('is-number');\nvar randomize = require('randomatic');\nvar repeatStr = require('repeat-string');\nvar repeat = require('repeat-element');\n\n/**\n * Expose `fillRange`\n */\n\nmodule.exports = fillRange;\n\n/**\n * Return a range of numbers or letters.\n *\n * @param  {String} `a` Start of the range\n * @param  {String} `b` End of the range\n * @param  {String} `step` Increment or decrement to use.\n * @param  {Function} `fn` Custom function to modify each element in the range.\n * @return {Array}\n */\n\nfunction fillRange(a, b, step, options, fn) {\n  if (a == null || b == null) {\n    throw new Error('fill-range expects the first and second args to be strings.');\n  }\n  if (typeof step === 'function') {\n    fn = step;\n    options = {};\n    step = null;\n  }\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n  if (isObject(step)) {\n    options = step;\n    step = '';\n  }\n  var expand,\n    regex = false,\n    sep = '';\n  var opts = options || {};\n  if (typeof opts.silent === 'undefined') {\n    opts.silent = true;\n  }\n  step = step || opts.step;\n\n  // store a ref to unmodified arg\n  var origA = a,\n    origB = b;\n  b = b.toString() === '-0' ? 0 : b;\n  if (opts.optimize || opts.makeRe) {\n    step = step ? step += '~' : step;\n    expand = true;\n    regex = true;\n    sep = '~';\n  }\n\n  // handle special step characters\n  if (typeof step === 'string') {\n    var match = stepRe().exec(step);\n    if (match) {\n      var i = match.index;\n      var m = match[0];\n\n      // repeat string\n      if (m === '+') {\n        return repeat(a, b);\n\n        // randomize a, `b` times\n      } else if (m === '?') {\n        return [randomize(a, b)];\n\n        // expand right, no regex reduction\n      } else if (m === '>') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n\n        // expand to an array, or if valid create a reduced\n        // string for a regex logic `or`\n      } else if (m === '|') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n\n        // expand to an array, or if valid create a reduced\n        // string for a regex range\n      } else if (m === '~') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n      }\n    } else if (!isNumber(step)) {\n      if (!opts.silent) {\n        throw new TypeError('fill-range: invalid step.');\n      }\n      return null;\n    }\n  }\n  if (/[.&*()[\\]^%$#@!]/.test(a) || /[.&*()[\\]^%$#@!]/.test(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // has neither a letter nor number, or has both letters and numbers\n  // this needs to be after the step logic\n  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // validate arguments\n  var isNumA = isNumber(zeros(a));\n  var isNumB = isNumber(zeros(b));\n  if (!isNumA && isNumB || isNumA && !isNumB) {\n    if (!opts.silent) {\n      throw new TypeError('fill-range: first range argument is incompatible with second.');\n    }\n    return null;\n  }\n\n  // by this point both are the same, so we\n  // can use A to check going forward.\n  var isNum = isNumA;\n  var num = formatStep(step);\n\n  // is the range alphabetical? or numeric?\n  if (isNum) {\n    // if numeric, coerce to an integer\n    a = +a;\n    b = +b;\n  } else {\n    // otherwise, get the charCode to expand alpha ranges\n    a = a.charCodeAt(0);\n    b = b.charCodeAt(0);\n  }\n\n  // is the pattern descending?\n  var isDescending = a > b;\n\n  // don't create a character class if the args are < 0\n  if (a < 0 || b < 0) {\n    expand = false;\n    regex = false;\n  }\n\n  // detect padding\n  var padding = isPadded(origA, origB);\n  var res,\n    pad,\n    arr = [];\n  var ii = 0;\n\n  // character classes, ranges and logical `or`\n  if (regex) {\n    if (shouldExpand(a, b, num, isNum, padding, opts)) {\n      // make sure the correct separator is used\n      if (sep === '|' || sep === '~') {\n        sep = detectSeparator(a, b, num, isNum, isDescending);\n      }\n      return wrap([origA, origB], sep, opts);\n    }\n  }\n  while (isDescending ? a >= b : a <= b) {\n    if (padding && isNum) {\n      pad = padding(a);\n    }\n\n    // custom function\n    if (typeof fn === 'function') {\n      res = fn(a, isNum, pad, ii++);\n\n      // letters\n    } else if (!isNum) {\n      if (regex && isInvalidChar(a)) {\n        res = null;\n      } else {\n        res = String.fromCharCode(a);\n      }\n\n      // numbers\n    } else {\n      res = formatPadding(a, pad);\n    }\n\n    // add result to the array, filtering any nulled values\n    if (res !== null) arr.push(res);\n\n    // increment or decrement\n    if (isDescending) {\n      a -= num;\n    } else {\n      a += num;\n    }\n  }\n\n  // now that the array is expanded, we need to handle regex\n  // character classes, ranges or logical `or` that wasn't\n  // already handled before the loop\n  if ((regex || expand) && !opts.noexpand) {\n    // make sure the correct separator is used\n    if (sep === '|' || sep === '~') {\n      sep = detectSeparator(a, b, num, isNum, isDescending);\n    }\n    if (arr.length === 1 || a < 0 || b < 0) {\n      return arr;\n    }\n    return wrap(arr, sep, opts);\n  }\n  return arr;\n}\n\n/**\n * Wrap the string with the correct regex\n * syntax.\n */\n\nfunction wrap(arr, sep, opts) {\n  if (sep === '~') {\n    sep = '-';\n  }\n  var str = arr.join(sep);\n  var pre = opts && opts.regexPrefix;\n\n  // regex logical `or`\n  if (sep === '|') {\n    str = pre ? pre + str : str;\n    str = '(' + str + ')';\n  }\n\n  // regex character class\n  if (sep === '-') {\n    str = pre && pre === '^' ? pre + str : str;\n    str = '[' + str + ']';\n  }\n  return [str];\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isCharClass(a, b, step, isNum, isDescending) {\n  if (isDescending) {\n    return false;\n  }\n  if (isNum) {\n    return a <= 9 && b <= 9;\n  }\n  if (a < b) {\n    return step === 1;\n  }\n  return false;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction shouldExpand(a, b, num, isNum, padding, opts) {\n  if (isNum && (a > 9 || b > 9)) {\n    return false;\n  }\n  return !padding && num === 1 && a < b;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction detectSeparator(a, b, step, isNum, isDescending) {\n  var isChar = isCharClass(a, b, step, isNum, isDescending);\n  if (!isChar) {\n    return '|';\n  }\n  return '~';\n}\n\n/**\n * Correctly format the step based on type\n */\n\nfunction formatStep(step) {\n  return Math.abs(step >> 0) || 1;\n}\n\n/**\n * Format padding, taking leading `-` into account\n */\n\nfunction formatPadding(ch, pad) {\n  var res = pad ? pad + ch : ch;\n  if (pad && ch.toString().charAt(0) === '-') {\n    res = '-' + pad + ch.toString().substr(1);\n  }\n  return res.toString();\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isInvalidChar(str) {\n  var ch = toStr(str);\n  return ch === '\\\\' || ch === '[' || ch === ']' || ch === '^' || ch === '(' || ch === ')' || ch === '`';\n}\n\n/**\n * Convert to a string from a charCode\n */\n\nfunction toStr(ch) {\n  return String.fromCharCode(ch);\n}\n\n/**\n * Step regex\n */\n\nfunction stepRe() {\n  return /\\?|>|\\||\\+|\\~/g;\n}\n\n/**\n * Return true if `val` has either a letter\n * or a number\n */\n\nfunction noAlphaNum(val) {\n  return /[a-z0-9]/i.test(val);\n}\n\n/**\n * Return true if `val` has both a letter and\n * a number (invalid)\n */\n\nfunction hasBoth(val) {\n  return /[a-z][0-9]|[0-9][a-z]/i.test(val);\n}\n\n/**\n * Normalize zeros for checks\n */\n\nfunction zeros(val) {\n  if (/^-*0+$/.test(val.toString())) {\n    return '0';\n  }\n  return val;\n}\n\n/**\n * Return true if `val` has leading zeros,\n * or a similar valid pattern.\n */\n\nfunction hasZeros(val) {\n  return /[^.]\\.|^-*0+[0-9]/.test(val);\n}\n\n/**\n * If the string is padded, returns a curried function with\n * the a cached padding string, or `false` if no padding.\n *\n * @param  {*} `origA` String or number.\n * @return {String|Boolean}\n */\n\nfunction isPadded(origA, origB) {\n  if (hasZeros(origA) || hasZeros(origB)) {\n    var alen = length(origA);\n    var blen = length(origB);\n    var len = alen >= blen ? alen : blen;\n    return function (a) {\n      return repeatStr('0', len - length(a));\n    };\n  }\n  return false;\n}\n\n/**\n * Get the string length of `val`\n */\n\nfunction length(val) {\n  return val.toString().length;\n}","map":{"version":3,"names":["isObject","require","isNumber","randomize","repeatStr","repeat","module","exports","fillRange","a","b","step","options","fn","Error","expand","regex","sep","opts","silent","origA","origB","toString","optimize","makeRe","match","stepRe","exec","i","index","m","substr","TypeError","test","RangeError","noAlphaNum","hasBoth","isNumA","zeros","isNumB","isNum","num","formatStep","charCodeAt","isDescending","padding","isPadded","res","pad","arr","ii","shouldExpand","detectSeparator","wrap","isInvalidChar","String","fromCharCode","formatPadding","push","noexpand","length","str","join","pre","regexPrefix","isCharClass","isChar","Math","abs","ch","charAt","toStr","val","hasZeros","alen","blen","len"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/expand-range/node_modules/fill-range/index.js"],"sourcesContent":["/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\nvar isNumber = require('is-number');\nvar randomize = require('randomatic');\nvar repeatStr = require('repeat-string');\nvar repeat = require('repeat-element');\n\n/**\n * Expose `fillRange`\n */\n\nmodule.exports = fillRange;\n\n/**\n * Return a range of numbers or letters.\n *\n * @param  {String} `a` Start of the range\n * @param  {String} `b` End of the range\n * @param  {String} `step` Increment or decrement to use.\n * @param  {Function} `fn` Custom function to modify each element in the range.\n * @return {Array}\n */\n\nfunction fillRange(a, b, step, options, fn) {\n  if (a == null || b == null) {\n    throw new Error('fill-range expects the first and second args to be strings.');\n  }\n\n  if (typeof step === 'function') {\n    fn = step; options = {}; step = null;\n  }\n\n  if (typeof options === 'function') {\n    fn = options; options = {};\n  }\n\n  if (isObject(step)) {\n    options = step; step = '';\n  }\n\n  var expand, regex = false, sep = '';\n  var opts = options || {};\n\n  if (typeof opts.silent === 'undefined') {\n    opts.silent = true;\n  }\n\n  step = step || opts.step;\n\n  // store a ref to unmodified arg\n  var origA = a, origB = b;\n\n  b = (b.toString() === '-0') ? 0 : b;\n\n  if (opts.optimize || opts.makeRe) {\n    step = step ? (step += '~') : step;\n    expand = true;\n    regex = true;\n    sep = '~';\n  }\n\n  // handle special step characters\n  if (typeof step === 'string') {\n    var match = stepRe().exec(step);\n\n    if (match) {\n      var i = match.index;\n      var m = match[0];\n\n      // repeat string\n      if (m === '+') {\n        return repeat(a, b);\n\n      // randomize a, `b` times\n      } else if (m === '?') {\n        return [randomize(a, b)];\n\n      // expand right, no regex reduction\n      } else if (m === '>') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n\n      // expand to an array, or if valid create a reduced\n      // string for a regex logic `or`\n      } else if (m === '|') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n\n      // expand to an array, or if valid create a reduced\n      // string for a regex range\n      } else if (m === '~') {\n        step = step.substr(0, i) + step.substr(i + 1);\n        expand = true;\n        regex = true;\n        sep = m;\n      }\n    } else if (!isNumber(step)) {\n      if (!opts.silent) {\n        throw new TypeError('fill-range: invalid step.');\n      }\n      return null;\n    }\n  }\n\n  if (/[.&*()[\\]^%$#@!]/.test(a) || /[.&*()[\\]^%$#@!]/.test(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // has neither a letter nor number, or has both letters and numbers\n  // this needs to be after the step logic\n  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {\n    if (!opts.silent) {\n      throw new RangeError('fill-range: invalid range arguments.');\n    }\n    return null;\n  }\n\n  // validate arguments\n  var isNumA = isNumber(zeros(a));\n  var isNumB = isNumber(zeros(b));\n\n  if ((!isNumA && isNumB) || (isNumA && !isNumB)) {\n    if (!opts.silent) {\n      throw new TypeError('fill-range: first range argument is incompatible with second.');\n    }\n    return null;\n  }\n\n  // by this point both are the same, so we\n  // can use A to check going forward.\n  var isNum = isNumA;\n  var num = formatStep(step);\n\n  // is the range alphabetical? or numeric?\n  if (isNum) {\n    // if numeric, coerce to an integer\n    a = +a; b = +b;\n  } else {\n    // otherwise, get the charCode to expand alpha ranges\n    a = a.charCodeAt(0);\n    b = b.charCodeAt(0);\n  }\n\n  // is the pattern descending?\n  var isDescending = a > b;\n\n  // don't create a character class if the args are < 0\n  if (a < 0 || b < 0) {\n    expand = false;\n    regex = false;\n  }\n\n  // detect padding\n  var padding = isPadded(origA, origB);\n  var res, pad, arr = [];\n  var ii = 0;\n\n  // character classes, ranges and logical `or`\n  if (regex) {\n    if (shouldExpand(a, b, num, isNum, padding, opts)) {\n      // make sure the correct separator is used\n      if (sep === '|' || sep === '~') {\n        sep = detectSeparator(a, b, num, isNum, isDescending);\n      }\n      return wrap([origA, origB], sep, opts);\n    }\n  }\n\n  while (isDescending ? (a >= b) : (a <= b)) {\n    if (padding && isNum) {\n      pad = padding(a);\n    }\n\n    // custom function\n    if (typeof fn === 'function') {\n      res = fn(a, isNum, pad, ii++);\n\n    // letters\n    } else if (!isNum) {\n      if (regex && isInvalidChar(a)) {\n        res = null;\n      } else {\n        res = String.fromCharCode(a);\n      }\n\n    // numbers\n    } else {\n      res = formatPadding(a, pad);\n    }\n\n    // add result to the array, filtering any nulled values\n    if (res !== null) arr.push(res);\n\n    // increment or decrement\n    if (isDescending) {\n      a -= num;\n    } else {\n      a += num;\n    }\n  }\n\n  // now that the array is expanded, we need to handle regex\n  // character classes, ranges or logical `or` that wasn't\n  // already handled before the loop\n  if ((regex || expand) && !opts.noexpand) {\n    // make sure the correct separator is used\n    if (sep === '|' || sep === '~') {\n      sep = detectSeparator(a, b, num, isNum, isDescending);\n    }\n    if (arr.length === 1 || a < 0 || b < 0) { return arr; }\n    return wrap(arr, sep, opts);\n  }\n\n  return arr;\n}\n\n/**\n * Wrap the string with the correct regex\n * syntax.\n */\n\nfunction wrap(arr, sep, opts) {\n  if (sep === '~') { sep = '-'; }\n  var str = arr.join(sep);\n  var pre = opts && opts.regexPrefix;\n\n  // regex logical `or`\n  if (sep === '|') {\n    str = pre ? pre + str : str;\n    str = '(' + str + ')';\n  }\n\n  // regex character class\n  if (sep === '-') {\n    str = (pre && pre === '^')\n      ? pre + str\n      : str;\n    str = '[' + str + ']';\n  }\n  return [str];\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isCharClass(a, b, step, isNum, isDescending) {\n  if (isDescending) { return false; }\n  if (isNum) { return a <= 9 && b <= 9; }\n  if (a < b) { return step === 1; }\n  return false;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction shouldExpand(a, b, num, isNum, padding, opts) {\n  if (isNum && (a > 9 || b > 9)) { return false; }\n  return !padding && num === 1 && a < b;\n}\n\n/**\n * Detect the correct separator to use\n */\n\nfunction detectSeparator(a, b, step, isNum, isDescending) {\n  var isChar = isCharClass(a, b, step, isNum, isDescending);\n  if (!isChar) {\n    return '|';\n  }\n  return '~';\n}\n\n/**\n * Correctly format the step based on type\n */\n\nfunction formatStep(step) {\n  return Math.abs(step >> 0) || 1;\n}\n\n/**\n * Format padding, taking leading `-` into account\n */\n\nfunction formatPadding(ch, pad) {\n  var res = pad ? pad + ch : ch;\n  if (pad && ch.toString().charAt(0) === '-') {\n    res = '-' + pad + ch.toString().substr(1);\n  }\n  return res.toString();\n}\n\n/**\n * Check for invalid characters\n */\n\nfunction isInvalidChar(str) {\n  var ch = toStr(str);\n  return ch === '\\\\'\n    || ch === '['\n    || ch === ']'\n    || ch === '^'\n    || ch === '('\n    || ch === ')'\n    || ch === '`';\n}\n\n/**\n * Convert to a string from a charCode\n */\n\nfunction toStr(ch) {\n  return String.fromCharCode(ch);\n}\n\n\n/**\n * Step regex\n */\n\nfunction stepRe() {\n  return /\\?|>|\\||\\+|\\~/g;\n}\n\n/**\n * Return true if `val` has either a letter\n * or a number\n */\n\nfunction noAlphaNum(val) {\n  return /[a-z0-9]/i.test(val);\n}\n\n/**\n * Return true if `val` has both a letter and\n * a number (invalid)\n */\n\nfunction hasBoth(val) {\n  return /[a-z][0-9]|[0-9][a-z]/i.test(val);\n}\n\n/**\n * Normalize zeros for checks\n */\n\nfunction zeros(val) {\n  if (/^-*0+$/.test(val.toString())) {\n    return '0';\n  }\n  return val;\n}\n\n/**\n * Return true if `val` has leading zeros,\n * or a similar valid pattern.\n */\n\nfunction hasZeros(val) {\n  return /[^.]\\.|^-*0+[0-9]/.test(val);\n}\n\n/**\n * If the string is padded, returns a curried function with\n * the a cached padding string, or `false` if no padding.\n *\n * @param  {*} `origA` String or number.\n * @return {String|Boolean}\n */\n\nfunction isPadded(origA, origB) {\n  if (hasZeros(origA) || hasZeros(origB)) {\n    var alen = length(origA);\n    var blen = length(origB);\n\n    var len = alen >= blen\n      ? alen\n      : blen;\n\n    return function (a) {\n      return repeatStr('0', len - length(a));\n    };\n  }\n  return false;\n}\n\n/**\n * Get the string length of `val`\n */\n\nfunction length(val) {\n  return val.toString().length;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}