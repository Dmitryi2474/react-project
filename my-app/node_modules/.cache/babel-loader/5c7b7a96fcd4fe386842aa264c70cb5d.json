{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n  return target;\n};\ntry {\n  const bufferUtil = require('bufferutil');\n  module.exports = Object.assign({\n    concat\n  }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */{\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n  module.exports = {\n    concat,\n    mask,\n    unmask\n  };\n}","map":{"version":3,"names":["safeBuffer","require","Buffer","concat","list","totalLength","target","allocUnsafe","offset","i","length","buf","copy","bufferUtil","module","exports","Object","assign","BufferUtil","e","mask","source","output","unmask","buffer"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/ws/lib/BufferUtil.js"],"sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = { concat, mask, unmask };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMC,MAAM,GAAGF,UAAU,CAACE,MAAM;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG,CAACC,IAAI,EAAEC,WAAW,KAAK;EACpC,MAAMC,MAAM,GAAGJ,MAAM,CAACK,WAAW,CAACF,WAAW,CAAC;EAC9C,IAAIG,MAAM,GAAG,CAAC;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,GAAG,GAAGP,IAAI,CAACK,CAAC,CAAC;IACnBE,GAAG,CAACC,IAAI,CAACN,MAAM,EAAEE,MAAM,CAAC;IACxBA,MAAM,IAAIG,GAAG,CAACD,MAAM;EACtB;EAEA,OAAOJ,MAAM;AACf,CAAC;AAED,IAAI;EACF,MAAMO,UAAU,GAAGZ,OAAO,CAAC,YAAY,CAAC;EAExCa,MAAM,CAACC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC;IAAEd;EAAO,CAAC,EAAEU,UAAU,CAACK,UAAU,IAAIL,UAAU,CAAC;AACjF,CAAC,CAAC,OAAOM,CAAC,EAAE,0BAA2B;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,IAAI,GAAG,CAACC,MAAM,EAAED,IAAI,EAAEE,MAAM,EAAEd,MAAM,EAAEE,MAAM,KAAK;IACrD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/Ba,MAAM,CAACd,MAAM,GAAGC,CAAC,CAAC,GAAGY,MAAM,CAACZ,CAAC,CAAC,GAAGW,IAAI,CAACX,CAAC,GAAG,CAAC,CAAC;IAC9C;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMc,MAAM,GAAG,CAACC,MAAM,EAAEJ,IAAI,KAAK;IAC/B;IACA,MAAMV,MAAM,GAAGc,MAAM,CAACd,MAAM;IAC5B,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/Be,MAAM,CAACf,CAAC,CAAC,IAAIW,IAAI,CAACX,CAAC,GAAG,CAAC,CAAC;IAC1B;EACF,CAAC;EAEDK,MAAM,CAACC,OAAO,GAAG;IAAEZ,MAAM;IAAEiB,IAAI;IAAEG;EAAO,CAAC;AAC3C"},"metadata":{},"sourceType":"script"}