{"ast":null,"code":"'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener(method, listener) {\n    if (typeof listener !== 'function') return;\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n    function onError(event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(method, listener) {\n    const listeners = this.listeners(method);\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\nmodule.exports = EventTarget;","map":{"version":3,"names":["Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","EventTarget","addEventListener","method","listener","onMessage","call","onClose","message","onError","event","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener","module","exports"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/ws/lib/EventTarget.js"],"sourcesContent":["'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}