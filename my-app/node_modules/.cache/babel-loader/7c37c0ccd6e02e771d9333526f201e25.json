{"ast":null,"code":"var net = require('net');\nvar Socket = net.Socket;\nvar async = require('async');\nvar isNumberLike = require('is-number-like');\nvar promisify = require('./promisify');\n\n/**\n * Finds the first port with a status of 'open', implying the port is in use and\n * there is likely a service listening on it.\n */\n/**\n * @param {Number} startPort - Port to begin status check on (inclusive).\n * @param {Number} [endPort=65535] - Last port to check status on (inclusive).\n * @param {String} [host='127.0.0.1'] - Host of where to scan.\n * @param {findPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n * @example\n * // scans through 3000 to 3002 (inclusive)\n * portscanner.findAPortInUse(3000, 3002, '127.0.0.1', console.log)\n * // returns a promise in the absence of a callback\n * portscanner.findAPortInUse(3000, 3002, '127.0.0.1').then(console.log)\n * @example\n * // scans through 3000 to 65535 on '127.0.0.1'\n * portscanner.findAPortInUse(3000, console.log)\n */\n/**\n * @param {Array} postList - Array of ports to check status on.\n * @param {String} [host='127.0.0.1'] - Host of where to scan.\n * @param {findPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n * @example\n * // scans 3000 and 3002 only, not 3001.\n * portscanner.findAPortInUse([3000, 3002], console.log)\n */\nfunction findAPortInUse() {\n  var params = [].slice.call(arguments);\n  params.unshift('open');\n  return findAPortWithStatus.apply(null, params);\n}\n\n/**\n * Finds the first port with a status of 'closed', implying the port is not in\n * use. Accepts identical parameters as {@link findAPortInUse}\n */\nfunction findAPortNotInUse() {\n  var params = [].slice.call(arguments);\n  params.unshift('closed');\n  return findAPortWithStatus.apply(null, params);\n}\n\n/**\n * Checks the status of an individual port.\n */\n/**\n * @param {Number} port - Port to check status on.\n * @param {String} [host='127.0.0.1'] - Host of where to scan.\n * @param {checkPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n */\n/**\n * @param {Number} port - Port to check status on.\n * @param {Object} [opts={}] - Options object.\n * @param {String} [opts.host='127.0.0.1'] - Host of where to scan.\n * @param {Number} [opts.timeout=400] - Connection timeout in ms.\n * @param {checkPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n */\nfunction checkPortStatus(port) {\n  var args, host, opts, callback;\n  args = [].slice.call(arguments, 1);\n  if (typeof args[0] === 'string') {\n    host = args[0];\n  } else if (typeof args[0] === 'object') {\n    opts = args[0];\n  } else if (typeof args[0] === 'function') {\n    callback = args[0];\n  }\n  if (typeof args[1] === 'object') {\n    opts = args[1];\n  } else if (typeof args[1] === 'function') {\n    callback = args[1];\n  }\n  if (typeof args[2] === 'function') {\n    callback = args[2];\n  }\n  if (!callback) return promisify(checkPortStatus, arguments);\n  opts = opts || {};\n  host = host || opts.host || '127.0.0.1';\n  var timeout = opts.timeout || 400;\n  var connectionRefused = false;\n  var socket = new Socket();\n  var status = null;\n  var error = null;\n\n  // Socket connection established, port is open\n  socket.on('connect', function () {\n    status = 'open';\n    socket.destroy();\n  });\n\n  // If no response, assume port is not listening\n  socket.setTimeout(timeout);\n  socket.on('timeout', function () {\n    status = 'closed';\n    error = new Error('Timeout (' + timeout + 'ms) occurred waiting for ' + host + ':' + port + ' to be available');\n    socket.destroy();\n  });\n\n  // Assuming the port is not open if an error. May need to refine based on\n  // exception\n  socket.on('error', function (exception) {\n    if (exception.code !== 'ECONNREFUSED') {\n      error = exception;\n    } else {\n      connectionRefused = true;\n    }\n    status = 'closed';\n  });\n\n  // Return after the socket has closed\n  socket.on('close', function (exception) {\n    if (exception && !connectionRefused) {\n      error = error || exception;\n    } else {\n      error = null;\n    }\n    callback(error, status);\n  });\n  socket.connect(port, host);\n}\n/**\n * Callback for {@link checkPortStatus}\n * @callback checkPortCallback\n * @param {Error|null} error - Any error that occurred while port scanning, or null.\n * @param {String} status - Status: 'open' if the port is in use, 'closed' if the port is available.\n */\n\n/**\n * Internal helper function used by {@link findAPortInUse} and {@link findAPortNotInUse}\n * to find a port from a range or a list with a specific status.\n */\n/**\n * @param {String} status - Status to check.\n * @param {...params} params - Params as passed exactly to {@link findAPortInUse} and {@link findAPortNotInUse}.\n */\nfunction findAPortWithStatus(status) {\n  var params, startPort, endPort, portList, host, callback;\n  params = [].slice.call(arguments, 1);\n  if (params[0] instanceof Array) {\n    portList = params[0];\n  } else if (isNumberLike(params[0])) {\n    startPort = parseInt(params[0], 10);\n  }\n  if (typeof params[1] === 'function') {\n    callback = params[1];\n  } else if (typeof params[1] === 'string') {\n    host = params[1];\n  } else if (isNumberLike(params[1])) {\n    endPort = parseInt(params[1], 10);\n  }\n  if (typeof params[2] === 'string') {\n    host = params[2];\n  } else if (typeof params[2] === 'function') {\n    callback = params[2];\n  }\n  if (typeof params[3] === 'function') {\n    callback = params[3];\n  }\n  if (!callback) return promisify(findAPortWithStatus, arguments);\n  if (startPort && endPort && endPort < startPort) {\n    // WARNING: endPort less than startPort. Using endPort as startPort & vice versa.\n    var tempStartPort = startPort;\n    startPort = endPort;\n    endPort = tempStartPort;\n  }\n  endPort = endPort || 65535;\n  var foundPort = false;\n  var numberOfPortsChecked = 0;\n  var port = portList ? portList[0] : startPort;\n\n  // Returns true if a port with matching status has been found or if checked\n  // the entire range of ports\n  var hasFoundPort = function () {\n    return foundPort || numberOfPortsChecked === (portList ? portList.length : endPort - startPort + 1);\n  };\n\n  // Checks the status of the port\n  var checkNextPort = function (callback) {\n    checkPortStatus(port, host, function (error, statusOfPort) {\n      numberOfPortsChecked++;\n      if (statusOfPort === status) {\n        foundPort = true;\n        callback(error);\n      } else {\n        port = portList ? portList[numberOfPortsChecked] : port + 1;\n        callback(null);\n      }\n    });\n  };\n\n  // Check the status of each port until one with a matching status has been\n  // found or the range of ports has been exhausted\n  async.until(hasFoundPort, checkNextPort, function (error) {\n    if (error) {\n      callback(error, port);\n    } else if (foundPort) {\n      callback(null, port);\n    } else {\n      callback(null, false);\n    }\n  });\n}\n/**\n * Callback for {@link findAPortWithStatus}, and by that extension, for {@link findAPortInUse} and {@link findAPortNotInUse}.\n * @callback findPortCallback\n * @param {Error|null} error - Any error that occurred while port scanning, or null.\n * @param {Number|Boolean} port - The first open port found. Note, this is the first port that returns status as 'open', not necessarily the first open port checked. If no open port is found, the value is false.\n */\n\n/**\n * @exports portscanner\n */\n\nmodule.exports = {\n  findAPortInUse: findAPortInUse,\n  findAPortNotInUse: findAPortNotInUse,\n  checkPortStatus: checkPortStatus\n};","map":{"version":3,"names":["net","require","Socket","async","isNumberLike","promisify","findAPortInUse","params","slice","call","arguments","unshift","findAPortWithStatus","apply","findAPortNotInUse","checkPortStatus","port","args","host","opts","callback","timeout","connectionRefused","socket","status","error","on","destroy","setTimeout","Error","exception","code","connect","startPort","endPort","portList","Array","parseInt","tempStartPort","foundPort","numberOfPortsChecked","hasFoundPort","length","checkNextPort","statusOfPort","until","module","exports"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/portscanner/lib/portscanner.js"],"sourcesContent":["var net = require('net')\nvar Socket = net.Socket\nvar async = require('async')\nvar isNumberLike = require('is-number-like')\nvar promisify = require('./promisify')\n\n/**\n * Finds the first port with a status of 'open', implying the port is in use and\n * there is likely a service listening on it.\n */\n/**\n * @param {Number} startPort - Port to begin status check on (inclusive).\n * @param {Number} [endPort=65535] - Last port to check status on (inclusive).\n * @param {String} [host='127.0.0.1'] - Host of where to scan.\n * @param {findPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n * @example\n * // scans through 3000 to 3002 (inclusive)\n * portscanner.findAPortInUse(3000, 3002, '127.0.0.1', console.log)\n * // returns a promise in the absence of a callback\n * portscanner.findAPortInUse(3000, 3002, '127.0.0.1').then(console.log)\n * @example\n * // scans through 3000 to 65535 on '127.0.0.1'\n * portscanner.findAPortInUse(3000, console.log)\n */\n/**\n * @param {Array} postList - Array of ports to check status on.\n * @param {String} [host='127.0.0.1'] - Host of where to scan.\n * @param {findPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n * @example\n * // scans 3000 and 3002 only, not 3001.\n * portscanner.findAPortInUse([3000, 3002], console.log)\n */\nfunction findAPortInUse () {\n  var params = [].slice.call(arguments)\n  params.unshift('open')\n  return findAPortWithStatus.apply(null, params)\n}\n\n/**\n * Finds the first port with a status of 'closed', implying the port is not in\n * use. Accepts identical parameters as {@link findAPortInUse}\n */\nfunction findAPortNotInUse () {\n  var params = [].slice.call(arguments)\n  params.unshift('closed')\n  return findAPortWithStatus.apply(null, params)\n}\n\n/**\n * Checks the status of an individual port.\n */\n/**\n * @param {Number} port - Port to check status on.\n * @param {String} [host='127.0.0.1'] - Host of where to scan.\n * @param {checkPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n */\n/**\n * @param {Number} port - Port to check status on.\n * @param {Object} [opts={}] - Options object.\n * @param {String} [opts.host='127.0.0.1'] - Host of where to scan.\n * @param {Number} [opts.timeout=400] - Connection timeout in ms.\n * @param {checkPortCallback} [callback] - Function to call back with error or results.\n * @returns {Promise}\n */\nfunction checkPortStatus (port) {\n  var args, host, opts, callback\n\n  args = [].slice.call(arguments, 1)\n\n  if (typeof args[0] === 'string') {\n    host = args[0]\n  } else if (typeof args[0] === 'object') {\n    opts = args[0]\n  } else if (typeof args[0] === 'function') {\n    callback = args[0]\n  }\n\n  if (typeof args[1] === 'object') {\n    opts = args[1]\n  } else if (typeof args[1] === 'function') {\n    callback = args[1]\n  }\n\n  if (typeof args[2] === 'function') {\n    callback = args[2]\n  }\n\n  if (!callback) return promisify(checkPortStatus, arguments)\n\n  opts = opts || {}\n\n  host = host || opts.host || '127.0.0.1'\n\n  var timeout = opts.timeout || 400\n  var connectionRefused = false\n\n  var socket = new Socket()\n  var status = null\n  var error = null\n\n  // Socket connection established, port is open\n  socket.on('connect', function () {\n    status = 'open'\n    socket.destroy()\n  })\n\n  // If no response, assume port is not listening\n  socket.setTimeout(timeout)\n  socket.on('timeout', function () {\n    status = 'closed'\n    error = new Error('Timeout (' + timeout + 'ms) occurred waiting for ' + host + ':' + port + ' to be available')\n    socket.destroy()\n  })\n\n  // Assuming the port is not open if an error. May need to refine based on\n  // exception\n  socket.on('error', function (exception) {\n    if (exception.code !== 'ECONNREFUSED') {\n      error = exception\n    } else {\n      connectionRefused = true\n    }\n    status = 'closed'\n  })\n\n  // Return after the socket has closed\n  socket.on('close', function (exception) {\n    if (exception && !connectionRefused) { error = error || exception } else { error = null }\n    callback(error, status)\n  })\n\n  socket.connect(port, host)\n}\n/**\n * Callback for {@link checkPortStatus}\n * @callback checkPortCallback\n * @param {Error|null} error - Any error that occurred while port scanning, or null.\n * @param {String} status - Status: 'open' if the port is in use, 'closed' if the port is available.\n */\n\n/**\n * Internal helper function used by {@link findAPortInUse} and {@link findAPortNotInUse}\n * to find a port from a range or a list with a specific status.\n */\n/**\n * @param {String} status - Status to check.\n * @param {...params} params - Params as passed exactly to {@link findAPortInUse} and {@link findAPortNotInUse}.\n */\nfunction findAPortWithStatus (status) {\n  var params, startPort, endPort, portList, host, callback\n\n  params = [].slice.call(arguments, 1)\n\n  if (params[0] instanceof Array) {\n    portList = params[0]\n  } else if (isNumberLike(params[0])) {\n    startPort = parseInt(params[0], 10)\n  }\n\n  if (typeof params[1] === 'function') {\n    callback = params[1]\n  } else if (typeof params[1] === 'string') {\n    host = params[1]\n  } else if (isNumberLike(params[1])) {\n    endPort = parseInt(params[1], 10)\n  }\n\n  if (typeof params[2] === 'string') {\n    host = params[2]\n  } else if (typeof params[2] === 'function') {\n    callback = params[2]\n  }\n\n  if (typeof params[3] === 'function') {\n    callback = params[3]\n  }\n\n  if (!callback) return promisify(findAPortWithStatus, arguments)\n\n  if (startPort && endPort && endPort < startPort) {\n    // WARNING: endPort less than startPort. Using endPort as startPort & vice versa.\n    var tempStartPort = startPort\n    startPort = endPort\n    endPort = tempStartPort\n  }\n\n  endPort = endPort || 65535\n\n  var foundPort = false\n  var numberOfPortsChecked = 0\n  var port = portList ? portList[0] : startPort\n\n  // Returns true if a port with matching status has been found or if checked\n  // the entire range of ports\n  var hasFoundPort = function () {\n    return foundPort || numberOfPortsChecked === (portList ? portList.length : endPort - startPort + 1)\n  }\n\n  // Checks the status of the port\n  var checkNextPort = function (callback) {\n    checkPortStatus(port, host, function (error, statusOfPort) {\n      numberOfPortsChecked++\n      if (statusOfPort === status) {\n        foundPort = true\n        callback(error)\n      } else {\n        port = portList ? portList[numberOfPortsChecked] : port + 1\n        callback(null)\n      }\n    })\n  }\n\n  // Check the status of each port until one with a matching status has been\n  // found or the range of ports has been exhausted\n  async.until(hasFoundPort, checkNextPort, function (error) {\n    if (error) {\n      callback(error, port)\n    } else if (foundPort) {\n      callback(null, port)\n    } else {\n      callback(null, false)\n    }\n  })\n}\n/**\n * Callback for {@link findAPortWithStatus}, and by that extension, for {@link findAPortInUse} and {@link findAPortNotInUse}.\n * @callback findPortCallback\n * @param {Error|null} error - Any error that occurred while port scanning, or null.\n * @param {Number|Boolean} port - The first open port found. Note, this is the first port that returns status as 'open', not necessarily the first open port checked. If no open port is found, the value is false.\n */\n\n/**\n * @exports portscanner\n */\n\nmodule.exports = {\n  findAPortInUse: findAPortInUse,\n  findAPortNotInUse: findAPortNotInUse,\n  checkPortStatus: checkPortStatus\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}