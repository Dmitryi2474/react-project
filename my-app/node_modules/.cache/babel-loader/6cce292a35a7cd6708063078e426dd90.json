{"ast":null,"code":"'use strict';\n\nvar gitHosts = module.exports = {\n  github: {\n    // First two are insecure and generally shouldn't be used any more, but\n    // they are still supported.\n    'protocols': ['git', 'http', 'git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'github.com',\n    'treepath': 'tree',\n    'filetemplate': 'https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'gittemplate': 'git://{auth@}{domain}/{user}/{project}.git{#committish}',\n    'tarballtemplate': 'https://codeload.{domain}/{user}/{project}/tar.gz/{committish}'\n  },\n  bitbucket: {\n    'protocols': ['git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'bitbucket.org',\n    'treepath': 'src',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/get/{committish}.tar.gz'\n  },\n  gitlab: {\n    'protocols': ['git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'gitlab.com',\n    'treepath': 'tree',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}'\n  },\n  gist: {\n    'protocols': ['git', 'git+ssh', 'git+https', 'ssh', 'https'],\n    'domain': 'gist.github.com',\n    'pathmatch': /^[/](?:([^/]+)[/])?([a-z0-9]+)(?:[.]git)?$/,\n    'filetemplate': 'https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}',\n    'bugstemplate': 'https://{domain}/{project}',\n    'gittemplate': 'git://{domain}/{project}.git{#committish}',\n    'sshtemplate': 'git@{domain}:/{project}.git{#committish}',\n    'sshurltemplate': 'git+ssh://git@{domain}/{project}.git{#committish}',\n    'browsetemplate': 'https://{domain}/{project}{/committish}',\n    'browsefiletemplate': 'https://{domain}/{project}{/committish}{#path}',\n    'docstemplate': 'https://{domain}/{project}{/committish}',\n    'httpstemplate': 'git+https://{domain}/{project}.git{#committish}',\n    'shortcuttemplate': '{type}:{project}{#committish}',\n    'pathtemplate': '{project}{#committish}',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/archive/{committish}.tar.gz',\n    'hashformat': function (fragment) {\n      return 'file-' + formatHashFragment(fragment);\n    }\n  }\n};\nvar gitHostDefaults = {\n  'sshtemplate': 'git@{domain}:{user}/{project}.git{#committish}',\n  'sshurltemplate': 'git+ssh://git@{domain}/{user}/{project}.git{#committish}',\n  'browsetemplate': 'https://{domain}/{user}/{project}{/tree/committish}',\n  'browsefiletemplate': 'https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}',\n  'docstemplate': 'https://{domain}/{user}/{project}{/tree/committish}#readme',\n  'httpstemplate': 'git+https://{auth@}{domain}/{user}/{project}.git{#committish}',\n  'filetemplate': 'https://{domain}/{user}/{project}/raw/{committish}/{path}',\n  'shortcuttemplate': '{type}:{user}/{project}{#committish}',\n  'pathtemplate': '{user}/{project}{#committish}',\n  'pathmatch': /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,\n  'hashformat': formatHashFragment\n};\nObject.keys(gitHosts).forEach(function (name) {\n  Object.keys(gitHostDefaults).forEach(function (key) {\n    if (gitHosts[name][key]) return;\n    gitHosts[name][key] = gitHostDefaults[key];\n  });\n  gitHosts[name].protocols_re = RegExp('^(' + gitHosts[name].protocols.map(function (protocol) {\n    return protocol.replace(/([\\\\+*{}()[\\]$^|])/g, '\\\\$1');\n  }).join('|') + '):$');\n});\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}","map":{"version":3,"names":["gitHosts","module","exports","github","bitbucket","gitlab","gist","fragment","formatHashFragment","gitHostDefaults","Object","keys","forEach","name","key","protocols_re","RegExp","protocols","map","protocol","replace","join","toLowerCase"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/hosted-git-info/git-host-info.js"],"sourcesContent":["'use strict'\n\nvar gitHosts = module.exports = {\n  github: {\n    // First two are insecure and generally shouldn't be used any more, but\n    // they are still supported.\n    'protocols': [ 'git', 'http', 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'github.com',\n    'treepath': 'tree',\n    'filetemplate': 'https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'gittemplate': 'git://{auth@}{domain}/{user}/{project}.git{#committish}',\n    'tarballtemplate': 'https://codeload.{domain}/{user}/{project}/tar.gz/{committish}'\n  },\n  bitbucket: {\n    'protocols': [ 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'bitbucket.org',\n    'treepath': 'src',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/get/{committish}.tar.gz'\n  },\n  gitlab: {\n    'protocols': [ 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'gitlab.com',\n    'treepath': 'tree',\n    'bugstemplate': 'https://{domain}/{user}/{project}/issues',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}'\n  },\n  gist: {\n    'protocols': [ 'git', 'git+ssh', 'git+https', 'ssh', 'https' ],\n    'domain': 'gist.github.com',\n    'pathmatch': /^[/](?:([^/]+)[/])?([a-z0-9]+)(?:[.]git)?$/,\n    'filetemplate': 'https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}',\n    'bugstemplate': 'https://{domain}/{project}',\n    'gittemplate': 'git://{domain}/{project}.git{#committish}',\n    'sshtemplate': 'git@{domain}:/{project}.git{#committish}',\n    'sshurltemplate': 'git+ssh://git@{domain}/{project}.git{#committish}',\n    'browsetemplate': 'https://{domain}/{project}{/committish}',\n    'browsefiletemplate': 'https://{domain}/{project}{/committish}{#path}',\n    'docstemplate': 'https://{domain}/{project}{/committish}',\n    'httpstemplate': 'git+https://{domain}/{project}.git{#committish}',\n    'shortcuttemplate': '{type}:{project}{#committish}',\n    'pathtemplate': '{project}{#committish}',\n    'tarballtemplate': 'https://{domain}/{user}/{project}/archive/{committish}.tar.gz',\n    'hashformat': function (fragment) {\n      return 'file-' + formatHashFragment(fragment)\n    }\n  }\n}\n\nvar gitHostDefaults = {\n  'sshtemplate': 'git@{domain}:{user}/{project}.git{#committish}',\n  'sshurltemplate': 'git+ssh://git@{domain}/{user}/{project}.git{#committish}',\n  'browsetemplate': 'https://{domain}/{user}/{project}{/tree/committish}',\n  'browsefiletemplate': 'https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}',\n  'docstemplate': 'https://{domain}/{user}/{project}{/tree/committish}#readme',\n  'httpstemplate': 'git+https://{auth@}{domain}/{user}/{project}.git{#committish}',\n  'filetemplate': 'https://{domain}/{user}/{project}/raw/{committish}/{path}',\n  'shortcuttemplate': '{type}:{user}/{project}{#committish}',\n  'pathtemplate': '{user}/{project}{#committish}',\n  'pathmatch': /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,\n  'hashformat': formatHashFragment\n}\n\nObject.keys(gitHosts).forEach(function (name) {\n  Object.keys(gitHostDefaults).forEach(function (key) {\n    if (gitHosts[name][key]) return\n    gitHosts[name][key] = gitHostDefaults[key]\n  })\n  gitHosts[name].protocols_re = RegExp('^(' +\n    gitHosts[name].protocols.map(function (protocol) {\n      return protocol.replace(/([\\\\+*{}()[\\]$^|])/g, '\\\\$1')\n    }).join('|') + '):$')\n})\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}