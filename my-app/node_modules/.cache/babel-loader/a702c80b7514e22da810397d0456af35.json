{"ast":null,"code":"/*!\n * glob-base <https://github.com/jonschlinkert/glob-base>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar path = require('path');\nvar parent = require('glob-parent');\nvar isGlob = require('is-glob');\nmodule.exports = function globBase(pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob-base expects a string.');\n  }\n  var res = {};\n  res.base = parent(pattern);\n  res.isGlob = isGlob(pattern);\n  if (res.base !== '.') {\n    res.glob = pattern.substr(res.base.length);\n    if (res.glob.charAt(0) === '/') {\n      res.glob = res.glob.substr(1);\n    }\n  } else {\n    res.glob = pattern;\n  }\n  if (!res.isGlob) {\n    res.base = dirname(pattern);\n    res.glob = res.base !== '.' ? pattern.substr(res.base.length) : pattern;\n  }\n  if (res.glob.substr(0, 2) === './') {\n    res.glob = res.glob.substr(2);\n  }\n  if (res.glob.charAt(0) === '/') {\n    res.glob = res.glob.substr(1);\n  }\n  return res;\n};\nfunction dirname(glob) {\n  if (glob.slice(-1) === '/') return glob;\n  return path.dirname(glob);\n}","map":{"version":3,"names":["path","require","parent","isGlob","module","exports","globBase","pattern","TypeError","res","base","glob","substr","length","charAt","dirname","slice"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/glob-base/index.js"],"sourcesContent":["/*!\n * glob-base <https://github.com/jonschlinkert/glob-base>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar path = require('path');\nvar parent = require('glob-parent');\nvar isGlob = require('is-glob');\n\nmodule.exports = function globBase(pattern) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob-base expects a string.');\n  }\n\n  var res = {};\n  res.base = parent(pattern);\n  res.isGlob = isGlob(pattern);\n\n  if (res.base !== '.') {\n    res.glob = pattern.substr(res.base.length);\n    if (res.glob.charAt(0) === '/') {\n      res.glob = res.glob.substr(1);\n    }\n  } else {\n    res.glob = pattern;\n  }\n\n  if (!res.isGlob) {\n    res.base = dirname(pattern);\n    res.glob = res.base !== '.'\n      ? pattern.substr(res.base.length)\n      : pattern;\n  }\n\n  if (res.glob.substr(0, 2) === './') {\n    res.glob = res.glob.substr(2);\n  }\n  if (res.glob.charAt(0) === '/') {\n    res.glob = res.glob.substr(1);\n  }\n  return res;\n};\n\nfunction dirname(glob) {\n  if (glob.slice(-1) === '/') return glob;\n  return path.dirname(glob);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIE,MAAM,GAAGF,OAAO,CAAC,SAAS,CAAC;AAE/BG,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQ,CAACC,OAAO,EAAE;EAC1C,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAM,IAAIC,SAAS,CAAC,6BAA6B,CAAC;EACpD;EAEA,IAAIC,GAAG,GAAG,CAAC,CAAC;EACZA,GAAG,CAACC,IAAI,GAAGR,MAAM,CAACK,OAAO,CAAC;EAC1BE,GAAG,CAACN,MAAM,GAAGA,MAAM,CAACI,OAAO,CAAC;EAE5B,IAAIE,GAAG,CAACC,IAAI,KAAK,GAAG,EAAE;IACpBD,GAAG,CAACE,IAAI,GAAGJ,OAAO,CAACK,MAAM,CAACH,GAAG,CAACC,IAAI,CAACG,MAAM,CAAC;IAC1C,IAAIJ,GAAG,CAACE,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC9BL,GAAG,CAACE,IAAI,GAAGF,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IAC/B;EACF,CAAC,MAAM;IACLH,GAAG,CAACE,IAAI,GAAGJ,OAAO;EACpB;EAEA,IAAI,CAACE,GAAG,CAACN,MAAM,EAAE;IACfM,GAAG,CAACC,IAAI,GAAGK,OAAO,CAACR,OAAO,CAAC;IAC3BE,GAAG,CAACE,IAAI,GAAGF,GAAG,CAACC,IAAI,KAAK,GAAG,GACvBH,OAAO,CAACK,MAAM,CAACH,GAAG,CAACC,IAAI,CAACG,MAAM,CAAC,GAC/BN,OAAO;EACb;EAEA,IAAIE,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;IAClCH,GAAG,CAACE,IAAI,GAAGF,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC/B;EACA,IAAIH,GAAG,CAACE,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC9BL,GAAG,CAACE,IAAI,GAAGF,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAC/B;EACA,OAAOH,GAAG;AACZ,CAAC;AAED,SAASM,OAAO,CAACJ,IAAI,EAAE;EACrB,IAAIA,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,OAAOL,IAAI;EACvC,OAAOX,IAAI,CAACe,OAAO,CAACJ,IAAI,CAAC;AAC3B"},"metadata":{},"sourceType":"script"}