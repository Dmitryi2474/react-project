{"ast":null,"code":"#! /usr/bin/env node\n\"use strict\";\n\n/**\n * @module BrowserSync\n */\nvar pjson = require(\"../package.json\");\nvar BrowserSync = require(\"./browser-sync\");\nvar publicUtils = require(\"./public/public-utils\");\nvar events = require(\"events\");\nvar PassThrough = require(\"stream\").PassThrough;\nvar logger = require(\"eazy-logger\").Logger({\n  useLevelPrefixes: true\n});\nvar singleton = false;\nvar singletonPlugins = [];\nvar instances = [];\n/**\n * @type {boolean|EventEmitter}\n */\nvar singletonEmitter = false;\nmodule.exports = initSingleton;\n/**\n * Create a Browsersync instance\n * @method create\n * @param {String} name an identifier that can used for retrieval later\n */\n/**\n * Get a single instance by name. This is useful if you have your\n * build scripts in separate files\n * @method get\n * @param {String} name\n * @returns {Object|Boolean}\n */\nmodule.exports.get = function (name) {\n  var instance = getSingle(name);\n  if (instance) {\n    return instance;\n  }\n  throw new Error(\"An instance with the name `%s` was not found.\".replace(\"%s\", name));\n};\n/**\n * Check if an instance has been created.\n * @method has\n * @param {String} name\n * @returns {Boolean}\n */\nmodule.exports.has = function (name) {\n  var instance = getSingle(name);\n  if (instance) {\n    return true;\n  }\n  return false;\n};\n/**\n * Start the Browsersync service. This will launch a server, proxy or start the snippet\n * mode depending on your use-case.\n * @method init\n * @param {Object} [config] This is the main configuration for your Browsersync instance and can contain any of the [available options]({{site.links.options}})\n *  If you do not pass a config an argument for configuration, Browsersync will still run; but it will be in the `snippet` mode\n * @param {Function} [cb] If you pass a callback function, it will be called when Browsersync has completed all setup tasks and is ready to use. This\n * is useful when you need to wait for information (for example: urls, port etc) or perform other tasks synchronously.\n * @returns {BrowserSync}\n */\nmodule.exports.init = initSingleton;\n/**\n * Register a plugin. Must implement at least a 'plugin' method that returns a\n * callable function.\n *\n * @method use\n * @param {String} name The name of the plugin\n * @param {Object} module The object to be `required`.\n * @param {Function} [cb] A callback function that will return any errors.\n */\nmodule.exports.use = function () {\n  var args = Array.prototype.slice.call(arguments);\n  singletonPlugins.push({\n    args: args\n  });\n};\n/**\n * The `reload` method will inform all browsers about changed files and will either cause the browser to refresh, or inject the files where possible.\n *\n * @method reload\n * @param {String|Array|Object} [arg] The file or files to be reloaded.\n * @returns {*}\n */\nmodule.exports.reload = noop(\"reload\");\n/**\n * The `stream` method returns a transform stream and can act once or on many files.\n *\n * @method stream\n * @param {Object} [opts] Configuration for the stream method\n * @param {Object} [opts.match] Resulting files to reload. The path is from the\n * root of the site (not the root of your project).  You can use '**' to recurse\n * directories.\n * @param {Object} [opts.once] Only reload on the first changed file in the stream.\n * @since 2.6.0\n * @returns {*}\n */\nmodule.exports.stream = noop(\"stream\");\n/**\n * Helper method for browser notifications\n *\n * @method notify\n * @param {String|HTML} msg Can be a simple message such as 'Connected' or HTML\n * @param {Number} [timeout] How long the message will remain in the browser. @since 1.3.0\n */\nmodule.exports.notify = noop(\"notify\");\n/**\n * This method will close any running server, stop file watching & exit the current process.\n *\n * @method exit\n */\nmodule.exports.exit = noop(\"exit\");\n/**\n * Stand alone file-watcher. Use this along with Browsersync to create your own, minimal build system\n * @method watch\n * @param {string} patterns Glob patterns for files to watch\n * @param {object} [opts] Options to be passed to Chokidar - check what's available in [their docs](https://github.com/paulmillr/chokidar#getting-started)\n * @param {function} [fn] Callback function for each event.\n * @since 2.6.0\n */\nmodule.exports.watch = noop(\"watch\");\n/**\n * Method to pause file change events\n *\n * @method pause\n */\nmodule.exports.pause = noop(\"pause\");\n/**\n * Method to resume paused watchers\n *\n * @method resume\n */\nmodule.exports.resume = noop(\"resume\");\n/**\n * Add properties fo\n */\nObject.defineProperties(module.exports, {\n  /**\n   * The internal Event Emitter used by the running Browsersync instance (if there is one).\n   * You can use this to emit your own events, such as changed files, logging etc.\n   *\n   * @property emitter\n   */\n  emitter: {\n    get: function () {\n      if (!singletonEmitter) {\n        singletonEmitter = newEmitter();\n        return singletonEmitter;\n      }\n      return singletonEmitter;\n    }\n  },\n  /**\n   * A simple true/false flag that you can use to determine if there's a currently-running Browsersync instance.\n   *\n   * @property active\n   */\n  active: {\n    get: getSingletonValue.bind(null, \"active\")\n  },\n  /**\n   * A simple true/false flag to determine if the current instance is paused\n   *\n   * @property paused\n   */\n  paused: {\n    get: getSingletonValue.bind(null, \"paused\")\n  }\n});\n/**\n * Event emitter factory\n * @returns {EventEmitter}\n */\nfunction newEmitter() {\n  var emitter = new events.EventEmitter();\n  emitter.setMaxListeners(20);\n  return emitter;\n}\n/**\n * Get the singleton's emitter, or a new one.\n * @returns {EventEmitter}\n */\nfunction getSingletonEmitter() {\n  if (singletonEmitter) {\n    return singletonEmitter;\n  }\n  singletonEmitter = newEmitter();\n  return singletonEmitter;\n}\n/**\n * Helper to allow methods to be called on the module export\n * before there's a running instance\n * @param {String} name\n * @returns {Function}\n */\nfunction noop(name) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    if (singleton) {\n      return singleton[name].apply(singleton, args);\n    } else {\n      if (publicUtils.isStreamArg(name, args)) {\n        return new PassThrough({\n          objectMode: true\n        });\n      }\n    }\n  };\n}\n/**\n * Create a single instance when module export is used directly via browserSync({});\n * This is mostly for back-compatibility, for also for the nicer api.\n * This will never be removed to ensure we never break user-land, but\n * we should discourage it's use.\n * @returns {*}\n */\nfunction initSingleton() {\n  var instance;\n  if (instances.length) {\n    instance = instances.filter(function (item) {\n      return item.name === \"singleton\";\n    });\n    if (instance.length) {\n      logger.error(\"{yellow:You tried to start Browsersync twice!} To create multiple instances, use {cyan:browserSync.create().init()\");\n      return instance;\n    }\n  }\n  var args = Array.prototype.slice.call(arguments);\n  singleton = create(\"singleton\", getSingletonEmitter());\n  if (singletonPlugins.length) {\n    singletonPlugins.forEach(function (obj) {\n      singleton.instance.registerPlugin.apply(singleton.instance, obj.args);\n    });\n  }\n  singleton.init.apply(null, args);\n  return singleton;\n}\n/**\n * @param {String} prop\n * @returns {Object|Boolean}\n */\nfunction getSingletonValue(prop) {\n  var single = getSingle(\"singleton\");\n  if (single) {\n    return single[prop];\n  }\n  return false;\n}\n/**\n * Get a single instance by name\n * @param {String} name\n * @returns {Object|Boolean}\n */\nfunction getSingle(name) {\n  if (instances.length) {\n    var match = instances.filter(function (item) {\n      return item.name === name;\n    });\n    if (match.length) {\n      return match[0];\n    }\n  }\n  return false;\n}\n/**\n * Create an instance of Browsersync\n * @param {String} [name]\n * @param {EventEmitter} [emitter]\n * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (Browsersync.events|*), use: *}}\n */\n/**\n * Reset the state of the module.\n * (should only be needed for test environments)\n */\nmodule.exports.reset = function () {\n  instances.forEach(function (item) {\n    item.cleanup();\n  });\n  instances = [];\n  singletonPlugins = [];\n  singletonEmitter = false;\n  singleton = false;\n};\n/**\n * @type {Array}\n */\nmodule.exports.instances = instances;\n/**\n * Create an instance of Browsersync\n * @param {String} [name]\n * @param {EventEmitter} [emitter]\n * @returns {{init: *, exit: (exit|exports), notify: *, reload: *, cleanup: *, emitter: (Browsersync.events|*), use: *}}\n */\nmodule.exports.create = create;\nfunction create(name, emitter) {\n  name = name || new Date().getTime();\n  emitter = emitter || newEmitter();\n  var browserSync = new BrowserSync(emitter);\n  var instance = {\n    name: name,\n    instance: browserSync,\n    exit: require(\"./public/exit\")(browserSync),\n    notify: require(\"./public/notify\")(browserSync),\n    pause: require(\"./public/pause\")(browserSync),\n    resume: require(\"./public/resume\")(browserSync),\n    reload: require(\"./public/reload\")(emitter),\n    stream: require(\"./public/stream\")(emitter),\n    cleanup: browserSync.cleanup.bind(browserSync),\n    use: browserSync.registerPlugin.bind(browserSync),\n    getOption: browserSync.getOption.bind(browserSync),\n    emitter: browserSync.events,\n    watch: require(\"./file-watcher\").watch\n  };\n  browserSync.publicInstance = instance;\n  instance.init = require(\"./public/init\")(browserSync, name, pjson);\n  Object.defineProperty(instance, \"active\", {\n    get: function () {\n      return browserSync.active;\n    }\n  });\n  Object.defineProperty(instance, \"paused\", {\n    get: function () {\n      return browserSync.paused;\n    }\n  });\n  /**\n   * Access to client-side socket for emitting events\n   *\n   * @property sockets\n   */\n  Object.defineProperty(instance, \"sockets\", {\n    get: function () {\n      if (!browserSync.active) {\n        return {\n          emit: function () {},\n          on: function () {}\n        };\n      } else {\n        return browserSync.io.sockets;\n      }\n    }\n  });\n  instances.push(instance);\n  return instance;\n}","map":{"version":3,"mappings":"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","names":["pjson","require","BrowserSync","publicUtils","events","PassThrough","logger","Logger","useLevelPrefixes","singleton","singletonPlugins","instances","singletonEmitter","module","exports","initSingleton","get","name","instance","getSingle","Error","replace","has","init","use","args","Array","prototype","slice","call","arguments","push","reload","noop","stream","notify","exit","watch","pause","resume","Object","defineProperties","emitter","newEmitter","active","getSingletonValue","bind","paused","EventEmitter","setMaxListeners","getSingletonEmitter","apply","isStreamArg","objectMode","length","filter","item","error","create","forEach","obj","registerPlugin","prop","single","match","reset","cleanup","Date","getTime","browserSync","getOption","publicInstance","defineProperty","emit","on","io","sockets"],"sources":["../lib/index.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}