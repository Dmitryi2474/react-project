{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n  Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n  return needMoreData(state);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }\n    return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return this;\n};\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","map":{"version":3,"names":["pna","require","module","exports","Readable","isArray","Duplex","ReadableState","EE","EventEmitter","EElistenerCount","emitter","type","listeners","length","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","chunk","from","_isUint8Array","obj","isBuffer","util","inherits","debugUtil","debug","debuglog","BufferList","destroyImpl","StringDecoder","kProxyEvents","prependListener","event","fn","_events","on","unshift","options","stream","isDuplex","objectMode","readableObjectMode","hwm","highWaterMark","readableHwm","readableHighWaterMark","defaultHwm","Math","floor","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","destroyed","defaultEncoding","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","destroy","_destroy","call","Object","defineProperty","prototype","get","undefined","set","value","_undestroy","undestroy","err","cb","push","state","skipChunkCheck","readableAddChunk","addToFront","onEofChunk","er","chunkInvalid","emit","getPrototypeOf","Error","addChunk","write","maybeReadMore","needMoreData","emitReadable","TypeError","isPaused","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","head","data","parseInt","nOrig","endReadable","doRead","ret","fromList","end","nextTick","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","process","stdout","stderr","endFn","onend","unpipe","once","onunpipe","unpipeInfo","hasUnpiped","cleanup","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","increasedAwaitDrain","indexOf","pause","resume","dests","i","index","splice","ev","res","nReadingNextTick","addListener","self","resume_","wrap","_this","paused","method","apply","arguments","bind","enumerable","_fromList","shift","join","concat","clear","fromListPartial","list","hasStrings","slice","copyFromBufferString","copyFromBuffer","p","c","next","str","nb","tail","allocUnsafe","copy","buf","endReadableNT","xs","x","l"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}