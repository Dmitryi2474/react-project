{"ast":null,"code":"/*!\n * randomatic <https://github.com/jonschlinkert/randomatic>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isNumber = require('is-number');\nvar typeOf = require('kind-of');\nvar mathRandom = require('math-random');\n\n/**\n * Expose `randomatic`\n */\n\nmodule.exports = randomatic;\nmodule.exports.isCrypto = !!mathRandom.cryptographic;\n\n/**\n * Available mask characters\n */\n\nvar type = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  special: '~!@#$%^&()_+-={}[];\\',.'\n};\ntype.all = type.lower + type.upper + type.number + type.special;\n\n/**\n * Generate random character sequences of a specified `length`,\n * based on the given `pattern`.\n *\n * @param {String} `pattern` The pattern to use for generating the random string.\n * @param {String} `length` The length of the string to generate.\n * @param {String} `options`\n * @return {String}\n * @api public\n */\n\nfunction randomatic(pattern, length, options) {\n  if (typeof pattern === 'undefined') {\n    throw new Error('randomatic expects a string or number.');\n  }\n  var custom = false;\n  if (arguments.length === 1) {\n    if (typeof pattern === 'string') {\n      length = pattern.length;\n    } else if (isNumber(pattern)) {\n      options = {};\n      length = pattern;\n      pattern = '*';\n    }\n  }\n  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {\n    options = length;\n    pattern = options.chars;\n    length = pattern.length;\n    custom = true;\n  }\n  var opts = options || {};\n  var mask = '';\n  var res = '';\n\n  // Characters to be used\n  if (pattern.indexOf('?') !== -1) mask += opts.chars;\n  if (pattern.indexOf('a') !== -1) mask += type.lower;\n  if (pattern.indexOf('A') !== -1) mask += type.upper;\n  if (pattern.indexOf('0') !== -1) mask += type.number;\n  if (pattern.indexOf('!') !== -1) mask += type.special;\n  if (pattern.indexOf('*') !== -1) mask += type.all;\n  if (custom) mask += pattern;\n\n  // Characters to exclude\n  if (opts.exclude) {\n    var exclude = typeOf(opts.exclude) === 'string' ? opts.exclude : opts.exclude.join('');\n    exclude = exclude.replace(new RegExp('[\\\\]]+', 'g'), '');\n    mask = mask.replace(new RegExp('[' + exclude + ']+', 'g'), '');\n    if (opts.exclude.indexOf(']') !== -1) mask = mask.replace(new RegExp('[\\\\]]+', 'g'), '');\n  }\n  while (length--) {\n    res += mask.charAt(parseInt(mathRandom() * mask.length, 10));\n  }\n  return res;\n}\n;","map":{"version":3,"names":["isNumber","require","typeOf","mathRandom","module","exports","randomatic","isCrypto","cryptographic","type","lower","upper","number","special","all","pattern","length","options","Error","custom","arguments","hasOwnProperty","chars","opts","mask","res","indexOf","exclude","join","replace","RegExp","charAt","parseInt"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/randomatic/index.js"],"sourcesContent":["/*!\n * randomatic <https://github.com/jonschlinkert/randomatic>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isNumber = require('is-number');\nvar typeOf = require('kind-of');\nvar mathRandom = require('math-random');\n\n/**\n * Expose `randomatic`\n */\n\nmodule.exports = randomatic;\nmodule.exports.isCrypto = !!mathRandom.cryptographic;\n\n/**\n * Available mask characters\n */\n\nvar type = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  special: '~!@#$%^&()_+-={}[];\\',.'\n};\n\ntype.all = type.lower + type.upper + type.number + type.special;\n\n/**\n * Generate random character sequences of a specified `length`,\n * based on the given `pattern`.\n *\n * @param {String} `pattern` The pattern to use for generating the random string.\n * @param {String} `length` The length of the string to generate.\n * @param {String} `options`\n * @return {String}\n * @api public\n */\n\nfunction randomatic(pattern, length, options) {\n  if (typeof pattern === 'undefined') {\n    throw new Error('randomatic expects a string or number.');\n  }\n\n  var custom = false;\n  if (arguments.length === 1) {\n    if (typeof pattern === 'string') {\n      length = pattern.length;\n\n    } else if (isNumber(pattern)) {\n      options = {};\n      length = pattern;\n      pattern = '*';\n    }\n  }\n\n  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {\n    options = length;\n    pattern = options.chars;\n    length = pattern.length;\n    custom = true;\n  }\n\n  var opts = options || {};\n  var mask = '';\n  var res = '';\n\n  // Characters to be used\n  if (pattern.indexOf('?') !== -1) mask += opts.chars;\n  if (pattern.indexOf('a') !== -1) mask += type.lower;\n  if (pattern.indexOf('A') !== -1) mask += type.upper;\n  if (pattern.indexOf('0') !== -1) mask += type.number;\n  if (pattern.indexOf('!') !== -1) mask += type.special;\n  if (pattern.indexOf('*') !== -1) mask += type.all;\n  if (custom) mask += pattern;\n\n  // Characters to exclude\n  if (opts.exclude) {\n    var exclude = typeOf(opts.exclude) === 'string' ? opts.exclude : opts.exclude.join('');\n    exclude = exclude.replace(new RegExp('[\\\\]]+', 'g'), '');\n    mask = mask.replace(new RegExp('[' + exclude + ']+', 'g'), '');\n    \n    if(opts.exclude.indexOf(']') !== -1) mask = mask.replace(new RegExp('[\\\\]]+', 'g'), '');\n  }\n\n  while (length--) {\n    res += mask.charAt(parseInt(mathRandom() * mask.length, 10));\n  }\n  return res;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}