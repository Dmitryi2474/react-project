{"ast":null,"code":"var parse = require('spdx-expression-parse');\nvar correct = require('spdx-correct');\nvar genericWarning = 'license should be ' + 'a valid SPDX license expression (without \"LicenseRef\"), ' + '\"UNLICENSED\", or ' + '\"SEE LICENSE IN <filename>\"';\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return startsWith('LicenseRef', license) || startsWith('DocumentRef', license);\n  } else {\n    return usesLicenseRef(ast.left) || usesLicenseRef(ast.right);\n  }\n}\nmodule.exports = function (argument) {\n  var ast;\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match;\n    if (argument === 'UNLICENSED' || argument === 'UNLICENCED') {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n      if (argument.trim().length !== 0) {\n        var corrected = correct(argument);\n        if (corrected) {\n          result.warnings.push('license is similar to the valid expression \"' + corrected + '\"');\n        }\n      }\n      return result;\n    }\n  }\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};","map":{"version":3,"names":["parse","require","correct","genericWarning","fileReferenceRE","startsWith","prefix","string","slice","length","usesLicenseRef","ast","hasOwnProperty","license","left","right","module","exports","argument","e","match","validForOldPackages","validForNewPackages","unlicensed","exec","inFile","result","warnings","trim","corrected","push","spdx"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/validate-npm-package-license/index.js"],"sourcesContent":["var parse = require('spdx-expression-parse');\nvar correct = require('spdx-correct');\n\nvar genericWarning = (\n  'license should be ' +\n  'a valid SPDX license expression (without \"LicenseRef\"), ' +\n  '\"UNLICENSED\", or ' +\n  '\"SEE LICENSE IN <filename>\"'\n);\n\nvar fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;\n\nfunction startsWith(prefix, string) {\n  return string.slice(0, prefix.length) === prefix;\n}\n\nfunction usesLicenseRef(ast) {\n  if (ast.hasOwnProperty('license')) {\n    var license = ast.license;\n    return (\n      startsWith('LicenseRef', license) ||\n      startsWith('DocumentRef', license)\n    );\n  } else {\n    return (\n      usesLicenseRef(ast.left) ||\n      usesLicenseRef(ast.right)\n    );\n  }\n}\n\nmodule.exports = function(argument) {\n  var ast;\n\n  try {\n    ast = parse(argument);\n  } catch (e) {\n    var match\n    if (\n      argument === 'UNLICENSED' ||\n      argument === 'UNLICENCED'\n    ) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        unlicensed: true\n      };\n    } else if (match = fileReferenceRE.exec(argument)) {\n      return {\n        validForOldPackages: true,\n        validForNewPackages: true,\n        inFile: match[1]\n      };\n    } else {\n      var result = {\n        validForOldPackages: false,\n        validForNewPackages: false,\n        warnings: [genericWarning]\n      };\n      if (argument.trim().length !== 0) {\n        var corrected = correct(argument);\n        if (corrected) {\n          result.warnings.push(\n            'license is similar to the valid expression \"' + corrected + '\"'\n          );\n        }\n      }\n      return result;\n    }\n  }\n\n  if (usesLicenseRef(ast)) {\n    return {\n      validForNewPackages: false,\n      validForOldPackages: false,\n      spdx: true,\n      warnings: [genericWarning]\n    };\n  } else {\n    return {\n      validForNewPackages: true,\n      validForOldPackages: true,\n      spdx: true\n    };\n  }\n};\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC5C,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;AAErC,IAAIE,cAAc,GAChB,oBAAoB,GACpB,0DAA0D,GAC1D,mBAAmB,GACnB,6BACD;AAED,IAAIC,eAAe,GAAG,0BAA0B;AAEhD,SAASC,UAAU,CAACC,MAAM,EAAEC,MAAM,EAAE;EAClC,OAAOA,MAAM,CAACC,KAAK,CAAC,CAAC,EAAEF,MAAM,CAACG,MAAM,CAAC,KAAKH,MAAM;AAClD;AAEA,SAASI,cAAc,CAACC,GAAG,EAAE;EAC3B,IAAIA,GAAG,CAACC,cAAc,CAAC,SAAS,CAAC,EAAE;IACjC,IAAIC,OAAO,GAAGF,GAAG,CAACE,OAAO;IACzB,OACER,UAAU,CAAC,YAAY,EAAEQ,OAAO,CAAC,IACjCR,UAAU,CAAC,aAAa,EAAEQ,OAAO,CAAC;EAEtC,CAAC,MAAM;IACL,OACEH,cAAc,CAACC,GAAG,CAACG,IAAI,CAAC,IACxBJ,cAAc,CAACC,GAAG,CAACI,KAAK,CAAC;EAE7B;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAE;EAClC,IAAIP,GAAG;EAEP,IAAI;IACFA,GAAG,GAAGX,KAAK,CAACkB,QAAQ,CAAC;EACvB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,IAAIC,KAAK;IACT,IACEF,QAAQ,KAAK,YAAY,IACzBA,QAAQ,KAAK,YAAY,EACzB;MACA,OAAO;QACLG,mBAAmB,EAAE,IAAI;QACzBC,mBAAmB,EAAE,IAAI;QACzBC,UAAU,EAAE;MACd,CAAC;IACH,CAAC,MAAM,IAAIH,KAAK,GAAGhB,eAAe,CAACoB,IAAI,CAACN,QAAQ,CAAC,EAAE;MACjD,OAAO;QACLG,mBAAmB,EAAE,IAAI;QACzBC,mBAAmB,EAAE,IAAI;QACzBG,MAAM,EAAEL,KAAK,CAAC,CAAC;MACjB,CAAC;IACH,CAAC,MAAM;MACL,IAAIM,MAAM,GAAG;QACXL,mBAAmB,EAAE,KAAK;QAC1BC,mBAAmB,EAAE,KAAK;QAC1BK,QAAQ,EAAE,CAACxB,cAAc;MAC3B,CAAC;MACD,IAAIe,QAAQ,CAACU,IAAI,EAAE,CAACnB,MAAM,KAAK,CAAC,EAAE;QAChC,IAAIoB,SAAS,GAAG3B,OAAO,CAACgB,QAAQ,CAAC;QACjC,IAAIW,SAAS,EAAE;UACbH,MAAM,CAACC,QAAQ,CAACG,IAAI,CAClB,8CAA8C,GAAGD,SAAS,GAAG,GAAG,CACjE;QACH;MACF;MACA,OAAOH,MAAM;IACf;EACF;EAEA,IAAIhB,cAAc,CAACC,GAAG,CAAC,EAAE;IACvB,OAAO;MACLW,mBAAmB,EAAE,KAAK;MAC1BD,mBAAmB,EAAE,KAAK;MAC1BU,IAAI,EAAE,IAAI;MACVJ,QAAQ,EAAE,CAACxB,cAAc;IAC3B,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACLmB,mBAAmB,EAAE,IAAI;MACzBD,mBAAmB,EAAE,IAAI;MACzBU,IAAI,EAAE;IACR,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"script"}