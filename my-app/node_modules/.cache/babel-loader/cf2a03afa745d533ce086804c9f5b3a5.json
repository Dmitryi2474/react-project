{"ast":null,"code":"'use strict';\n\nvar win32 = process && process.platform === 'win32';\nvar path = require('path');\nvar fileRe = require('filename-regex');\nvar utils = module.exports;\n\n/**\n * Module dependencies\n */\n\nutils.diff = require('arr-diff');\nutils.unique = require('array-unique');\nutils.braces = require('braces');\nutils.brackets = require('expand-brackets');\nutils.extglob = require('extglob');\nutils.isExtglob = require('is-extglob');\nutils.isGlob = require('is-glob');\nutils.typeOf = require('kind-of');\nutils.normalize = require('normalize-path');\nutils.omit = require('object.omit');\nutils.parseGlob = require('parse-glob');\nutils.cache = require('regex-cache');\n\n/**\n * Get the filename of a filepath\n *\n * @param {String} `string`\n * @return {String}\n */\n\nutils.filename = function filename(fp) {\n  var seg = fp.match(fileRe());\n  return seg && seg[0];\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern is the same as a given `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.isPath = function isPath(pattern, opts) {\n  opts = opts || {};\n  return function (fp) {\n    var unixified = utils.unixify(fp, opts);\n    if (opts.nocase) {\n      return pattern.toLowerCase() === unixified.toLowerCase();\n    }\n    return pattern === unixified;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.hasPath = function hasPath(pattern, opts) {\n  return function (fp) {\n    return utils.unixify(pattern, opts).indexOf(fp) !== -1;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern matches or contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.matchPath = function matchPath(pattern, opts) {\n  var fn = opts && opts.contains ? utils.hasPath(pattern, opts) : utils.isPath(pattern, opts);\n  return fn;\n};\n\n/**\n * Returns a function that returns true if the given\n * regex matches the `filename` of a file path.\n *\n * @param {RegExp} `re`\n * @return {Boolean}\n */\n\nutils.hasFilename = function hasFilename(re) {\n  return function (fp) {\n    var name = utils.filename(fp);\n    return name && re.test(name);\n  };\n};\n\n/**\n * Coerce `val` to an array\n *\n * @param  {*} val\n * @return {Array}\n */\n\nutils.arrayify = function arrayify(val) {\n  return !Array.isArray(val) ? [val] : val;\n};\n\n/**\n * Normalize all slashes in a file path or glob pattern to\n * forward slashes.\n */\n\nutils.unixify = function unixify(fp, opts) {\n  if (opts && opts.unixify === false) return fp;\n  if (opts && opts.unixify === true || win32 || path.sep === '\\\\') {\n    return utils.normalize(fp, false);\n  }\n  if (opts && opts.unescape === true) {\n    return fp ? fp.toString().replace(/\\\\(\\w)/g, '$1') : '';\n  }\n  return fp;\n};\n\n/**\n * Escape/unescape utils\n */\n\nutils.escapePath = function escapePath(fp) {\n  return fp.replace(/[\\\\.]/g, '\\\\$&');\n};\nutils.unescapeGlob = function unescapeGlob(fp) {\n  return fp.replace(/[\\\\\"']/g, '');\n};\nutils.escapeRe = function escapeRe(str) {\n  return str.replace(/[-[\\\\$*+?.#^\\s{}(|)\\]]/g, '\\\\$&');\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;","map":{"version":3,"names":["win32","process","platform","path","require","fileRe","utils","module","exports","diff","unique","braces","brackets","extglob","isExtglob","isGlob","typeOf","normalize","omit","parseGlob","cache","filename","fp","seg","match","isPath","pattern","opts","unixified","unixify","nocase","toLowerCase","hasPath","indexOf","matchPath","fn","contains","hasFilename","re","name","test","arrayify","val","Array","isArray","sep","unescape","toString","replace","escapePath","unescapeGlob","escapeRe","str"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/micromatch/lib/utils.js"],"sourcesContent":["'use strict';\n\nvar win32 = process && process.platform === 'win32';\nvar path = require('path');\nvar fileRe = require('filename-regex');\nvar utils = module.exports;\n\n/**\n * Module dependencies\n */\n\nutils.diff = require('arr-diff');\nutils.unique = require('array-unique');\nutils.braces = require('braces');\nutils.brackets = require('expand-brackets');\nutils.extglob = require('extglob');\nutils.isExtglob = require('is-extglob');\nutils.isGlob = require('is-glob');\nutils.typeOf = require('kind-of');\nutils.normalize = require('normalize-path');\nutils.omit = require('object.omit');\nutils.parseGlob = require('parse-glob');\nutils.cache = require('regex-cache');\n\n/**\n * Get the filename of a filepath\n *\n * @param {String} `string`\n * @return {String}\n */\n\nutils.filename = function filename(fp) {\n  var seg = fp.match(fileRe());\n  return seg && seg[0];\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern is the same as a given `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.isPath = function isPath(pattern, opts) {\n  opts = opts || {};\n  return function(fp) {\n    var unixified = utils.unixify(fp, opts);\n    if(opts.nocase){\n      return pattern.toLowerCase() === unixified.toLowerCase();\n    }\n    return pattern === unixified;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.hasPath = function hasPath(pattern, opts) {\n  return function(fp) {\n    return utils.unixify(pattern, opts).indexOf(fp) !== -1;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern matches or contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.matchPath = function matchPath(pattern, opts) {\n  var fn = (opts && opts.contains)\n    ? utils.hasPath(pattern, opts)\n    : utils.isPath(pattern, opts);\n  return fn;\n};\n\n/**\n * Returns a function that returns true if the given\n * regex matches the `filename` of a file path.\n *\n * @param {RegExp} `re`\n * @return {Boolean}\n */\n\nutils.hasFilename = function hasFilename(re) {\n  return function(fp) {\n    var name = utils.filename(fp);\n    return name && re.test(name);\n  };\n};\n\n/**\n * Coerce `val` to an array\n *\n * @param  {*} val\n * @return {Array}\n */\n\nutils.arrayify = function arrayify(val) {\n  return !Array.isArray(val)\n    ? [val]\n    : val;\n};\n\n/**\n * Normalize all slashes in a file path or glob pattern to\n * forward slashes.\n */\n\nutils.unixify = function unixify(fp, opts) {\n  if (opts && opts.unixify === false) return fp;\n  if (opts && opts.unixify === true || win32 || path.sep === '\\\\') {\n    return utils.normalize(fp, false);\n  }\n  if (opts && opts.unescape === true) {\n    return fp ? fp.toString().replace(/\\\\(\\w)/g, '$1') : '';\n  }\n  return fp;\n};\n\n/**\n * Escape/unescape utils\n */\n\nutils.escapePath = function escapePath(fp) {\n  return fp.replace(/[\\\\.]/g, '\\\\$&');\n};\n\nutils.unescapeGlob = function unescapeGlob(fp) {\n  return fp.replace(/[\\\\\"']/g, '');\n};\n\nutils.escapeRe = function escapeRe(str) {\n  return str.replace(/[-[\\\\$*+?.#^\\s{}(|)\\]]/g, '\\\\$&');\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}