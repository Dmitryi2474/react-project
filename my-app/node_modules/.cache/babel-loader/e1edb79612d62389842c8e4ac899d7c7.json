{"ast":null,"code":"/*!\n * parse-glob <https://github.com/jonschlinkert/parse-glob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isGlob = require('is-glob');\nvar findBase = require('glob-base');\nvar extglob = require('is-extglob');\nvar dotfile = require('is-dotfile');\n\n/**\n * Expose `cache`\n */\n\nvar cache = module.exports.cache = {};\n\n/**\n * Parse a glob pattern into tokens.\n *\n * When no paths or '**' are in the glob, we use a\n * different strategy for parsing the filename, since\n * file names can contain braces and other difficult\n * patterns. such as:\n *\n *  - `*.{a,b}`\n *  - `(**|*.js)`\n */\n\nmodule.exports = function parseGlob(glob) {\n  if (cache.hasOwnProperty(glob)) {\n    return cache[glob];\n  }\n  var tok = {};\n  tok.orig = glob;\n  tok.is = {};\n\n  // unescape dots and slashes in braces/brackets\n  glob = escape(glob);\n  var parsed = findBase(glob);\n  tok.is.glob = parsed.isGlob;\n  tok.glob = parsed.glob;\n  tok.base = parsed.base;\n  var segs = /([^\\/]*)$/.exec(glob);\n  tok.path = {};\n  tok.path.dirname = '';\n  tok.path.basename = segs[1] || '';\n  tok.path.dirname = glob.split(tok.path.basename).join('') || '';\n  var basename = (tok.path.basename || '').split('.') || '';\n  tok.path.filename = basename[0] || '';\n  tok.path.extname = basename.slice(1).join('.') || '';\n  tok.path.ext = '';\n  if (isGlob(tok.path.dirname) && !tok.path.basename) {\n    if (!/\\/$/.test(tok.glob)) {\n      tok.path.basename = tok.glob;\n    }\n    tok.path.dirname = tok.base;\n  }\n  if (glob.indexOf('/') === -1 && !tok.is.globstar) {\n    tok.path.dirname = '';\n    tok.path.basename = tok.orig;\n  }\n  var dot = tok.path.basename.indexOf('.');\n  if (dot !== -1) {\n    tok.path.filename = tok.path.basename.slice(0, dot);\n    tok.path.extname = tok.path.basename.slice(dot);\n  }\n  if (tok.path.extname.charAt(0) === '.') {\n    var exts = tok.path.extname.split('.');\n    tok.path.ext = exts[exts.length - 1];\n  }\n\n  // unescape dots and slashes in braces/brackets\n  tok.glob = unescape(tok.glob);\n  tok.path.dirname = unescape(tok.path.dirname);\n  tok.path.basename = unescape(tok.path.basename);\n  tok.path.filename = unescape(tok.path.filename);\n  tok.path.extname = unescape(tok.path.extname);\n\n  // Booleans\n  var is = glob && tok.is.glob;\n  tok.is.negated = glob && glob.charAt(0) === '!';\n  tok.is.extglob = glob && extglob(glob);\n  tok.is.braces = has(is, glob, '{');\n  tok.is.brackets = has(is, glob, '[:');\n  tok.is.globstar = has(is, glob, '**');\n  tok.is.dotfile = dotfile(tok.path.basename) || dotfile(tok.path.filename);\n  tok.is.dotdir = dotdir(tok.path.dirname);\n  return cache[glob] = tok;\n};\n\n/**\n * Returns true if the glob matches dot-directories.\n *\n * @param  {Object} `tok` The tokens object\n * @param  {Object} `path` The path object\n * @return {Object}\n */\n\nfunction dotdir(base) {\n  if (base.indexOf('/.') !== -1) {\n    return true;\n  }\n  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if the pattern has the given `ch`aracter(s)\n *\n * @param  {Object} `glob` The glob pattern.\n * @param  {Object} `ch` The character to test for\n * @return {Object}\n */\n\nfunction has(is, glob, ch) {\n  return is && glob.indexOf(ch) !== -1;\n}\n\n/**\n * Escape/unescape utils\n */\n\nfunction escape(str) {\n  var re = /\\{([^{}]*?)}|\\(([^()]*?)\\)|\\[([^\\[\\]]*?)\\]/g;\n  return str.replace(re, function (outter, braces, parens, brackets) {\n    var inner = braces || parens || brackets;\n    if (!inner) {\n      return outter;\n    }\n    return outter.split(inner).join(esc(inner));\n  });\n}\nfunction esc(str) {\n  str = str.split('/').join('__SLASH__');\n  str = str.split('.').join('__DOT__');\n  return str;\n}\nfunction unescape(str) {\n  str = str.split('__SLASH__').join('/');\n  str = str.split('__DOT__').join('.');\n  return str;\n}","map":{"version":3,"names":["isGlob","require","findBase","extglob","dotfile","cache","module","exports","parseGlob","glob","hasOwnProperty","tok","orig","is","escape","parsed","base","segs","exec","path","dirname","basename","split","join","filename","extname","slice","ext","test","indexOf","globstar","dot","charAt","exts","length","unescape","negated","braces","has","brackets","dotdir","ch","str","re","replace","outter","parens","inner","esc"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/parse-glob/index.js"],"sourcesContent":["/*!\n * parse-glob <https://github.com/jonschlinkert/parse-glob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isGlob = require('is-glob');\nvar findBase = require('glob-base');\nvar extglob = require('is-extglob');\nvar dotfile = require('is-dotfile');\n\n/**\n * Expose `cache`\n */\n\nvar cache = module.exports.cache = {};\n\n/**\n * Parse a glob pattern into tokens.\n *\n * When no paths or '**' are in the glob, we use a\n * different strategy for parsing the filename, since\n * file names can contain braces and other difficult\n * patterns. such as:\n *\n *  - `*.{a,b}`\n *  - `(**|*.js)`\n */\n\nmodule.exports = function parseGlob(glob) {\n  if (cache.hasOwnProperty(glob)) {\n    return cache[glob];\n  }\n\n  var tok = {};\n  tok.orig = glob;\n  tok.is = {};\n\n  // unescape dots and slashes in braces/brackets\n  glob = escape(glob);\n\n  var parsed = findBase(glob);\n  tok.is.glob = parsed.isGlob;\n\n  tok.glob = parsed.glob;\n  tok.base = parsed.base;\n  var segs = /([^\\/]*)$/.exec(glob);\n\n  tok.path = {};\n  tok.path.dirname = '';\n  tok.path.basename = segs[1] || '';\n  tok.path.dirname = glob.split(tok.path.basename).join('') || '';\n  var basename = (tok.path.basename || '').split('.') || '';\n  tok.path.filename = basename[0] || '';\n  tok.path.extname = basename.slice(1).join('.') || '';\n  tok.path.ext = '';\n\n  if (isGlob(tok.path.dirname) && !tok.path.basename) {\n    if (!/\\/$/.test(tok.glob)) {\n      tok.path.basename = tok.glob;\n    }\n    tok.path.dirname = tok.base;\n  }\n\n  if (glob.indexOf('/') === -1 && !tok.is.globstar) {\n    tok.path.dirname = '';\n    tok.path.basename = tok.orig;\n  }\n\n  var dot = tok.path.basename.indexOf('.');\n  if (dot !== -1) {\n    tok.path.filename = tok.path.basename.slice(0, dot);\n    tok.path.extname = tok.path.basename.slice(dot);\n  }\n\n  if (tok.path.extname.charAt(0) === '.') {\n    var exts = tok.path.extname.split('.');\n    tok.path.ext = exts[exts.length - 1];\n  }\n\n  // unescape dots and slashes in braces/brackets\n  tok.glob = unescape(tok.glob);\n  tok.path.dirname = unescape(tok.path.dirname);\n  tok.path.basename = unescape(tok.path.basename);\n  tok.path.filename = unescape(tok.path.filename);\n  tok.path.extname = unescape(tok.path.extname);\n\n  // Booleans\n  var is = (glob && tok.is.glob);\n  tok.is.negated  = glob && glob.charAt(0) === '!';\n  tok.is.extglob  = glob && extglob(glob);\n  tok.is.braces   = has(is, glob, '{');\n  tok.is.brackets = has(is, glob, '[:');\n  tok.is.globstar = has(is, glob, '**');\n  tok.is.dotfile  = dotfile(tok.path.basename) || dotfile(tok.path.filename);\n  tok.is.dotdir   = dotdir(tok.path.dirname);\n  return (cache[glob] = tok);\n}\n\n/**\n * Returns true if the glob matches dot-directories.\n *\n * @param  {Object} `tok` The tokens object\n * @param  {Object} `path` The path object\n * @return {Object}\n */\n\nfunction dotdir(base) {\n  if (base.indexOf('/.') !== -1) {\n    return true;\n  }\n  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if the pattern has the given `ch`aracter(s)\n *\n * @param  {Object} `glob` The glob pattern.\n * @param  {Object} `ch` The character to test for\n * @return {Object}\n */\n\nfunction has(is, glob, ch) {\n  return is && glob.indexOf(ch) !== -1;\n}\n\n/**\n * Escape/unescape utils\n */\n\nfunction escape(str) {\n  var re = /\\{([^{}]*?)}|\\(([^()]*?)\\)|\\[([^\\[\\]]*?)\\]/g;\n  return str.replace(re, function (outter, braces, parens, brackets) {\n    var inner = braces || parens || brackets;\n    if (!inner) { return outter; }\n    return outter.split(inner).join(esc(inner));\n  });\n}\n\nfunction esc(str) {\n  str = str.split('/').join('__SLASH__');\n  str = str.split('.').join('__DOT__');\n  return str;\n}\n\nfunction unescape(str) {\n  str = str.split('__SLASH__').join('/');\n  str = str.split('__DOT__').join('.');\n  return str;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAY,CAAC;AACnC,IAAIG,OAAO,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA;AACA;;AAEA,IAAII,KAAK,GAAGC,MAAM,CAACC,OAAO,CAACF,KAAK,GAAG,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,SAAS,CAACC,IAAI,EAAE;EACxC,IAAIJ,KAAK,CAACK,cAAc,CAACD,IAAI,CAAC,EAAE;IAC9B,OAAOJ,KAAK,CAACI,IAAI,CAAC;EACpB;EAEA,IAAIE,GAAG,GAAG,CAAC,CAAC;EACZA,GAAG,CAACC,IAAI,GAAGH,IAAI;EACfE,GAAG,CAACE,EAAE,GAAG,CAAC,CAAC;;EAEX;EACAJ,IAAI,GAAGK,MAAM,CAACL,IAAI,CAAC;EAEnB,IAAIM,MAAM,GAAGb,QAAQ,CAACO,IAAI,CAAC;EAC3BE,GAAG,CAACE,EAAE,CAACJ,IAAI,GAAGM,MAAM,CAACf,MAAM;EAE3BW,GAAG,CAACF,IAAI,GAAGM,MAAM,CAACN,IAAI;EACtBE,GAAG,CAACK,IAAI,GAAGD,MAAM,CAACC,IAAI;EACtB,IAAIC,IAAI,GAAG,WAAW,CAACC,IAAI,CAACT,IAAI,CAAC;EAEjCE,GAAG,CAACQ,IAAI,GAAG,CAAC,CAAC;EACbR,GAAG,CAACQ,IAAI,CAACC,OAAO,GAAG,EAAE;EACrBT,GAAG,CAACQ,IAAI,CAACE,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;EACjCN,GAAG,CAACQ,IAAI,CAACC,OAAO,GAAGX,IAAI,CAACa,KAAK,CAACX,GAAG,CAACQ,IAAI,CAACE,QAAQ,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE;EAC/D,IAAIF,QAAQ,GAAG,CAACV,GAAG,CAACQ,IAAI,CAACE,QAAQ,IAAI,EAAE,EAAEC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE;EACzDX,GAAG,CAACQ,IAAI,CAACK,QAAQ,GAAGH,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE;EACrCV,GAAG,CAACQ,IAAI,CAACM,OAAO,GAAGJ,QAAQ,CAACK,KAAK,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;EACpDZ,GAAG,CAACQ,IAAI,CAACQ,GAAG,GAAG,EAAE;EAEjB,IAAI3B,MAAM,CAACW,GAAG,CAACQ,IAAI,CAACC,OAAO,CAAC,IAAI,CAACT,GAAG,CAACQ,IAAI,CAACE,QAAQ,EAAE;IAClD,IAAI,CAAC,KAAK,CAACO,IAAI,CAACjB,GAAG,CAACF,IAAI,CAAC,EAAE;MACzBE,GAAG,CAACQ,IAAI,CAACE,QAAQ,GAAGV,GAAG,CAACF,IAAI;IAC9B;IACAE,GAAG,CAACQ,IAAI,CAACC,OAAO,GAAGT,GAAG,CAACK,IAAI;EAC7B;EAEA,IAAIP,IAAI,CAACoB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAClB,GAAG,CAACE,EAAE,CAACiB,QAAQ,EAAE;IAChDnB,GAAG,CAACQ,IAAI,CAACC,OAAO,GAAG,EAAE;IACrBT,GAAG,CAACQ,IAAI,CAACE,QAAQ,GAAGV,GAAG,CAACC,IAAI;EAC9B;EAEA,IAAImB,GAAG,GAAGpB,GAAG,CAACQ,IAAI,CAACE,QAAQ,CAACQ,OAAO,CAAC,GAAG,CAAC;EACxC,IAAIE,GAAG,KAAK,CAAC,CAAC,EAAE;IACdpB,GAAG,CAACQ,IAAI,CAACK,QAAQ,GAAGb,GAAG,CAACQ,IAAI,CAACE,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAEK,GAAG,CAAC;IACnDpB,GAAG,CAACQ,IAAI,CAACM,OAAO,GAAGd,GAAG,CAACQ,IAAI,CAACE,QAAQ,CAACK,KAAK,CAACK,GAAG,CAAC;EACjD;EAEA,IAAIpB,GAAG,CAACQ,IAAI,CAACM,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACtC,IAAIC,IAAI,GAAGtB,GAAG,CAACQ,IAAI,CAACM,OAAO,CAACH,KAAK,CAAC,GAAG,CAAC;IACtCX,GAAG,CAACQ,IAAI,CAACQ,GAAG,GAAGM,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EACtC;;EAEA;EACAvB,GAAG,CAACF,IAAI,GAAG0B,QAAQ,CAACxB,GAAG,CAACF,IAAI,CAAC;EAC7BE,GAAG,CAACQ,IAAI,CAACC,OAAO,GAAGe,QAAQ,CAACxB,GAAG,CAACQ,IAAI,CAACC,OAAO,CAAC;EAC7CT,GAAG,CAACQ,IAAI,CAACE,QAAQ,GAAGc,QAAQ,CAACxB,GAAG,CAACQ,IAAI,CAACE,QAAQ,CAAC;EAC/CV,GAAG,CAACQ,IAAI,CAACK,QAAQ,GAAGW,QAAQ,CAACxB,GAAG,CAACQ,IAAI,CAACK,QAAQ,CAAC;EAC/Cb,GAAG,CAACQ,IAAI,CAACM,OAAO,GAAGU,QAAQ,CAACxB,GAAG,CAACQ,IAAI,CAACM,OAAO,CAAC;;EAE7C;EACA,IAAIZ,EAAE,GAAIJ,IAAI,IAAIE,GAAG,CAACE,EAAE,CAACJ,IAAK;EAC9BE,GAAG,CAACE,EAAE,CAACuB,OAAO,GAAI3B,IAAI,IAAIA,IAAI,CAACuB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;EAChDrB,GAAG,CAACE,EAAE,CAACV,OAAO,GAAIM,IAAI,IAAIN,OAAO,CAACM,IAAI,CAAC;EACvCE,GAAG,CAACE,EAAE,CAACwB,MAAM,GAAKC,GAAG,CAACzB,EAAE,EAAEJ,IAAI,EAAE,GAAG,CAAC;EACpCE,GAAG,CAACE,EAAE,CAAC0B,QAAQ,GAAGD,GAAG,CAACzB,EAAE,EAAEJ,IAAI,EAAE,IAAI,CAAC;EACrCE,GAAG,CAACE,EAAE,CAACiB,QAAQ,GAAGQ,GAAG,CAACzB,EAAE,EAAEJ,IAAI,EAAE,IAAI,CAAC;EACrCE,GAAG,CAACE,EAAE,CAACT,OAAO,GAAIA,OAAO,CAACO,GAAG,CAACQ,IAAI,CAACE,QAAQ,CAAC,IAAIjB,OAAO,CAACO,GAAG,CAACQ,IAAI,CAACK,QAAQ,CAAC;EAC1Eb,GAAG,CAACE,EAAE,CAAC2B,MAAM,GAAKA,MAAM,CAAC7B,GAAG,CAACQ,IAAI,CAACC,OAAO,CAAC;EAC1C,OAAQf,KAAK,CAACI,IAAI,CAAC,GAAGE,GAAG;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS6B,MAAM,CAACxB,IAAI,EAAE;EACpB,IAAIA,IAAI,CAACa,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IAC7B,OAAO,IAAI;EACb;EACA,IAAIb,IAAI,CAACgB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIhB,IAAI,CAACgB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACpD,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASM,GAAG,CAACzB,EAAE,EAAEJ,IAAI,EAAEgC,EAAE,EAAE;EACzB,OAAO5B,EAAE,IAAIJ,IAAI,CAACoB,OAAO,CAACY,EAAE,CAAC,KAAK,CAAC,CAAC;AACtC;;AAEA;AACA;AACA;;AAEA,SAAS3B,MAAM,CAAC4B,GAAG,EAAE;EACnB,IAAIC,EAAE,GAAG,6CAA6C;EACtD,OAAOD,GAAG,CAACE,OAAO,CAACD,EAAE,EAAE,UAAUE,MAAM,EAAER,MAAM,EAAES,MAAM,EAAEP,QAAQ,EAAE;IACjE,IAAIQ,KAAK,GAAGV,MAAM,IAAIS,MAAM,IAAIP,QAAQ;IACxC,IAAI,CAACQ,KAAK,EAAE;MAAE,OAAOF,MAAM;IAAE;IAC7B,OAAOA,MAAM,CAACvB,KAAK,CAACyB,KAAK,CAAC,CAACxB,IAAI,CAACyB,GAAG,CAACD,KAAK,CAAC,CAAC;EAC7C,CAAC,CAAC;AACJ;AAEA,SAASC,GAAG,CAACN,GAAG,EAAE;EAChBA,GAAG,GAAGA,GAAG,CAACpB,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC;EACtCmB,GAAG,GAAGA,GAAG,CAACpB,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;EACpC,OAAOmB,GAAG;AACZ;AAEA,SAASP,QAAQ,CAACO,GAAG,EAAE;EACrBA,GAAG,GAAGA,GAAG,CAACpB,KAAK,CAAC,WAAW,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACtCmB,GAAG,GAAGA,GAAG,CAACpB,KAAK,CAAC,SAAS,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACpC,OAAOmB,GAAG;AACZ"},"metadata":{},"sourceType":"script"}