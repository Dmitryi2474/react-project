{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar url = require(\"url\");\nvar immutable_1 = require(\"immutable\");\nfunction handleProxyOption(incoming) {\n  var value = incoming.get('proxy');\n  var mw;\n  var target;\n  if (!value || value === true) {\n    return [incoming, []];\n  }\n  if (typeof value !== \"string\") {\n    target = value.get(\"target\");\n    mw = value.get(\"middleware\");\n  } else {\n    target = value;\n    value = immutable_1.Map({});\n  }\n  if (!target.match(/^(https?):\\/\\//)) {\n    target = \"http://\" + target;\n  }\n  var parsedUrl = url.parse(target);\n  if (!parsedUrl.port) {\n    parsedUrl.port = \"80\";\n  }\n  var out = {\n    target: parsedUrl.protocol + \"//\" + parsedUrl.host,\n    url: immutable_1.Map(parsedUrl)\n  };\n  if (mw) {\n    out.middleware = mw;\n  }\n  var proxyOutput = value.mergeDeep(out);\n  return [incoming.set('proxy', proxyOutput), []];\n}\nexports.handleProxyOption = handleProxyOption;","map":{"version":3,"mappings":";;;;;AAAA;AACA;AAIA,SAAgBA,iBAAiB,CAACC,QAAuB;EACrD,IAAIC,KAAK,GAAGD,QAAQ,CAACE,GAAG,CAAC,OAAO,CAAC;EACjC,IAAIC,EAAE;EACN,IAAIC,MAAM;EAEV,IAAI,CAACH,KAAK,IAAIA,KAAK,KAAK,IAAI,EAAE;IAC1B,OAAO,CAACD,QAAQ,EAAE,EAAE,CAAC;;EAGzB,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;IAC3BG,MAAM,GAAGH,KAAK,CAACC,GAAG,CAAC,QAAQ,CAAC;IAC5BC,EAAE,GAAGF,KAAK,CAACC,GAAG,CAAC,YAAY,CAAC;GAC/B,MAAM;IACHE,MAAM,GAAGH,KAAK;IACdA,KAAK,GAAGI,eAAG,CAAC,EAAE,CAAC;;EAGnB,IAAI,CAACD,MAAM,CAACE,KAAK,CAAC,gBAAgB,CAAC,EAAE;IACjCF,MAAM,GAAG,SAAS,GAAGA,MAAM;;EAG/B,IAAMG,SAAS,GAAGC,GAAG,CAACC,KAAK,CAACL,MAAM,CAAC;EAEnC,IAAI,CAACG,SAAS,CAACG,IAAI,EAAE;IACjBH,SAAS,CAACG,IAAI,GAAG,IAAI;;EAGzB,IAAMC,GAAG,GAAqB;IAC1BP,MAAM,EAAEG,SAAS,CAACK,QAAQ,GAAG,IAAI,GAAGL,SAAS,CAACM,IAAI;IAClDL,GAAG,EAAEH,eAAG,CAACE,SAAS;GACrB;EAED,IAAIJ,EAAE,EAAE;IACJQ,GAAG,CAACG,UAAU,GAAGX,EAAE;;EAGvB,IAAMY,WAAW,GAAGd,KAAK,CAACe,SAAS,CAACL,GAAG,CAAC;EAExC,OAAO,CAACX,QAAQ,CAACiB,GAAG,CAAC,OAAO,EAAEF,WAAW,CAAC,EAAE,EAAE,CAAC;AACnD;AAvCAG","names":["handleProxyOption","incoming","value","get","mw","target","immutable_1","match","parsedUrl","url","parse","port","out","protocol","host","middleware","proxyOutput","mergeDeep","set","exports"],"sources":["../../../lib/cli/transforms/handleProxyOption.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}