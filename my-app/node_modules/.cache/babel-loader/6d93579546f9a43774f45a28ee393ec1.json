{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst childProcess = require('child_process');\nconst isWsl = require('is-wsl');\nmodule.exports = (target, opts) => {\n  if (typeof target !== 'string') {\n    return Promise.reject(new Error('Expected a `target`'));\n  }\n  opts = Object.assign({\n    wait: true\n  }, opts);\n  let cmd;\n  let appArgs = [];\n  let args = [];\n  const cpOpts = {};\n  if (Array.isArray(opts.app)) {\n    appArgs = opts.app.slice(1);\n    opts.app = opts.app[0];\n  }\n  if (process.platform === 'darwin') {\n    cmd = 'open';\n    if (opts.wait) {\n      args.push('-W');\n    }\n    if (opts.app) {\n      args.push('-a', opts.app);\n    }\n  } else if (process.platform === 'win32' || isWsl) {\n    cmd = 'cmd' + (isWsl ? '.exe' : '');\n    args.push('/c', 'start', '\"\"', '/b');\n    target = target.replace(/&/g, '^&');\n    if (opts.wait) {\n      args.push('/wait');\n    }\n    if (opts.app) {\n      args.push(opts.app);\n    }\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n  } else {\n    if (opts.app) {\n      cmd = opts.app;\n    } else {\n      cmd = process.platform === 'android' ? 'xdg-open' : path.join(__dirname, 'xdg-open');\n    }\n    if (appArgs.length > 0) {\n      args = args.concat(appArgs);\n    }\n    if (!opts.wait) {\n      // `xdg-open` will block the process unless\n      // stdio is ignored and it's detached from the parent\n      // even if it's unref'd\n      cpOpts.stdio = 'ignore';\n      cpOpts.detached = true;\n    }\n  }\n  args.push(target);\n  if (process.platform === 'darwin' && appArgs.length > 0) {\n    args.push('--args');\n    args = args.concat(appArgs);\n  }\n  const cp = childProcess.spawn(cmd, args, cpOpts);\n  if (opts.wait) {\n    return new Promise((resolve, reject) => {\n      cp.once('error', reject);\n      cp.once('close', code => {\n        if (code > 0) {\n          reject(new Error('Exited with code ' + code));\n          return;\n        }\n        resolve(cp);\n      });\n    });\n  }\n  cp.unref();\n  return Promise.resolve(cp);\n};","map":{"version":3,"names":["path","require","childProcess","isWsl","module","exports","target","opts","Promise","reject","Error","Object","assign","wait","cmd","appArgs","args","cpOpts","Array","isArray","app","slice","process","platform","push","replace","length","concat","join","__dirname","stdio","detached","cp","spawn","resolve","once","code","unref"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/opn/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst childProcess = require('child_process');\nconst isWsl = require('is-wsl');\n\nmodule.exports = (target, opts) => {\n\tif (typeof target !== 'string') {\n\t\treturn Promise.reject(new Error('Expected a `target`'));\n\t}\n\n\topts = Object.assign({wait: true}, opts);\n\n\tlet cmd;\n\tlet appArgs = [];\n\tlet args = [];\n\tconst cpOpts = {};\n\n\tif (Array.isArray(opts.app)) {\n\t\tappArgs = opts.app.slice(1);\n\t\topts.app = opts.app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcmd = 'open';\n\n\t\tif (opts.wait) {\n\t\t\targs.push('-W');\n\t\t}\n\n\t\tif (opts.app) {\n\t\t\targs.push('-a', opts.app);\n\t\t}\n\t} else if (process.platform === 'win32' || isWsl) {\n\t\tcmd = 'cmd' + (isWsl ? '.exe' : '');\n\t\targs.push('/c', 'start', '\"\"', '/b');\n\t\ttarget = target.replace(/&/g, '^&');\n\n\t\tif (opts.wait) {\n\t\t\targs.push('/wait');\n\t\t}\n\n\t\tif (opts.app) {\n\t\t\targs.push(opts.app);\n\t\t}\n\n\t\tif (appArgs.length > 0) {\n\t\t\targs = args.concat(appArgs);\n\t\t}\n\t} else {\n\t\tif (opts.app) {\n\t\t\tcmd = opts.app;\n\t\t} else {\n\t\t\tcmd = process.platform === 'android' ? 'xdg-open' : path.join(__dirname, 'xdg-open');\n\t\t}\n\n\t\tif (appArgs.length > 0) {\n\t\t\targs = args.concat(appArgs);\n\t\t}\n\n\t\tif (!opts.wait) {\n\t\t\t// `xdg-open` will block the process unless\n\t\t\t// stdio is ignored and it's detached from the parent\n\t\t\t// even if it's unref'd\n\t\t\tcpOpts.stdio = 'ignore';\n\t\t\tcpOpts.detached = true;\n\t\t}\n\t}\n\n\targs.push(target);\n\n\tif (process.platform === 'darwin' && appArgs.length > 0) {\n\t\targs.push('--args');\n\t\targs = args.concat(appArgs);\n\t}\n\n\tconst cp = childProcess.spawn(cmd, args, cpOpts);\n\n\tif (opts.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcp.once('error', reject);\n\n\t\t\tcp.once('close', code => {\n\t\t\t\tif (code > 0) {\n\t\t\t\t\treject(new Error('Exited with code ' + code));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(cp);\n\t\t\t});\n\t\t});\n\t}\n\n\tcp.unref();\n\n\treturn Promise.resolve(cp);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}