{"ast":null,"code":"/*!\n * connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar debug = require('debug')('connect:dispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar finalhandler = require('finalhandler');\nvar http = require('http');\nvar merge = require('utils-merge');\nvar parseUrl = require('parseurl');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createServer;\n\n/**\n * Module variables.\n * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n\n/**\n * Create a new connect server.\n *\n * @return {function}\n * @public\n */\n\nfunction createServer() {\n  function app(req, res, next) {\n    app.handle(req, res, next);\n  }\n  merge(app, proto);\n  merge(app, EventEmitter.prototype);\n  app.route = '/';\n  app.stack = [];\n  return app;\n}\n\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * @param {String|Function|Server} route, callback or server\n * @param {Function|Server} callback or server\n * @return {Server} for chaining\n * @public\n */\n\nproto.use = function use(route, fn) {\n  var handle = fn;\n  var path = route;\n\n  // default route to '/'\n  if (typeof route !== 'string') {\n    handle = route;\n    path = '/';\n  }\n\n  // wrap sub-apps\n  if (typeof handle.handle === 'function') {\n    var server = handle;\n    server.route = path;\n    handle = function (req, res, next) {\n      server.handle(req, res, next);\n    };\n  }\n\n  // wrap vanilla http.Servers\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  }\n\n  // strip trailing slash\n  if (path[path.length - 1] === '/') {\n    path = path.slice(0, -1);\n  }\n\n  // add the middleware\n  debug('use %s %s', path || '/', handle.name || 'anonymous');\n  this.stack.push({\n    route: path,\n    handle: handle\n  });\n  return this;\n};\n\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @private\n */\n\nproto.handle = function handle(req, res, out) {\n  var index = 0;\n  var protohost = getProtohost(req.url) || '';\n  var removed = '';\n  var slashAdded = false;\n  var stack = this.stack;\n\n  // final function handler\n  var done = out || finalhandler(req, res, {\n    env: env,\n    onerror: logerror\n  });\n\n  // store the original URL\n  req.originalUrl = req.originalUrl || req.url;\n  function next(err) {\n    if (slashAdded) {\n      req.url = req.url.substr(1);\n      slashAdded = false;\n    }\n    if (removed.length !== 0) {\n      req.url = protohost + removed + req.url.substr(protohost.length);\n      removed = '';\n    }\n\n    // next callback\n    var layer = stack[index++];\n\n    // all done\n    if (!layer) {\n      defer(done, err);\n      return;\n    }\n\n    // route data\n    var path = parseUrl(req).pathname || '/';\n    var route = layer.route;\n\n    // skip this layer if the route doesn't match\n    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {\n      return next(err);\n    }\n\n    // skip if route match does not border \"/\", \".\", or end\n    var c = path.length > route.length && path[route.length];\n    if (c && c !== '/' && c !== '.') {\n      return next(err);\n    }\n\n    // trim off the part of the url that matches the route\n    if (route.length !== 0 && route !== '/') {\n      removed = route;\n      req.url = protohost + req.url.substr(protohost.length + removed.length);\n\n      // ensure leading slash\n      if (!protohost && req.url[0] !== '/') {\n        req.url = '/' + req.url;\n        slashAdded = true;\n      }\n    }\n\n    // call the layer handle\n    call(layer.handle, route, err, req, res, next);\n  }\n  next();\n};\n\n/**\n * Listen for connections.\n *\n * This method takes the same arguments\n * as node's `http.Server#listen()`.\n *\n * HTTP and HTTPS:\n *\n * If you run your application both as HTTP\n * and HTTPS you may wrap them individually,\n * since your Connect \"server\" is really just\n * a JavaScript `Function`.\n *\n *      var connect = require('connect')\n *        , http = require('http')\n *        , https = require('https');\n *\n *      var app = connect();\n *\n *      http.createServer(app).listen(80);\n *      https.createServer(options, app).listen(443);\n *\n * @return {http.Server}\n * @api public\n */\n\nproto.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\n\n/**\n * Invoke a route handle.\n * @private\n */\n\nfunction call(handle, route, err, req, res, next) {\n  var arity = handle.length;\n  var error = err;\n  var hasError = Boolean(err);\n  debug('%s %s : %s', handle.name || '<anonymous>', route, req.originalUrl);\n  try {\n    if (hasError && arity === 4) {\n      // error-handling middleware\n      handle(err, req, res, next);\n      return;\n    } else if (!hasError && arity < 4) {\n      // request-handling middleware\n      handle(req, res, next);\n      return;\n    }\n  } catch (e) {\n    // replace the error\n    error = e;\n  }\n\n  // continue\n  next(error);\n}\n\n/**\n * Log error using console.error.\n *\n * @param {Error} err\n * @private\n */\n\nfunction logerror(err) {\n  if (env !== 'test') console.error(err.stack || err.toString());\n}\n\n/**\n * Get get protocol + host for a URL.\n *\n * @param {string} url\n * @private\n */\n\nfunction getProtohost(url) {\n  if (url.length === 0 || url[0] === '/') {\n    return undefined;\n  }\n  var searchIndex = url.indexOf('?');\n  var pathLength = searchIndex !== -1 ? searchIndex : url.length;\n  var fqdnIndex = url.substr(0, pathLength).indexOf('://');\n  return fqdnIndex !== -1 ? url.substr(0, url.indexOf('/', 3 + fqdnIndex)) : undefined;\n}","map":{"version":3,"names":["debug","require","EventEmitter","finalhandler","http","merge","parseUrl","module","exports","createServer","env","process","NODE_ENV","proto","defer","setImmediate","fn","nextTick","bind","apply","arguments","app","req","res","next","handle","prototype","route","stack","use","path","server","Server","listeners","length","slice","name","push","out","index","protohost","getProtohost","url","removed","slashAdded","done","onerror","logerror","originalUrl","err","substr","layer","pathname","toLowerCase","c","call","listen","arity","error","hasError","Boolean","e","console","toString","undefined","searchIndex","indexOf","pathLength","fqdnIndex"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/connect/index.js"],"sourcesContent":["/*!\n * connect\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('connect:dispatcher');\nvar EventEmitter = require('events').EventEmitter;\nvar finalhandler = require('finalhandler');\nvar http = require('http');\nvar merge = require('utils-merge');\nvar parseUrl = require('parseurl');\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = createServer;\n\n/**\n * Module variables.\n * @private\n */\n\nvar env = process.env.NODE_ENV || 'development';\nvar proto = {};\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Create a new connect server.\n *\n * @return {function}\n * @public\n */\n\nfunction createServer() {\n  function app(req, res, next){ app.handle(req, res, next); }\n  merge(app, proto);\n  merge(app, EventEmitter.prototype);\n  app.route = '/';\n  app.stack = [];\n  return app;\n}\n\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * @param {String|Function|Server} route, callback or server\n * @param {Function|Server} callback or server\n * @return {Server} for chaining\n * @public\n */\n\nproto.use = function use(route, fn) {\n  var handle = fn;\n  var path = route;\n\n  // default route to '/'\n  if (typeof route !== 'string') {\n    handle = route;\n    path = '/';\n  }\n\n  // wrap sub-apps\n  if (typeof handle.handle === 'function') {\n    var server = handle;\n    server.route = path;\n    handle = function (req, res, next) {\n      server.handle(req, res, next);\n    };\n  }\n\n  // wrap vanilla http.Servers\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  }\n\n  // strip trailing slash\n  if (path[path.length - 1] === '/') {\n    path = path.slice(0, -1);\n  }\n\n  // add the middleware\n  debug('use %s %s', path || '/', handle.name || 'anonymous');\n  this.stack.push({ route: path, handle: handle });\n\n  return this;\n};\n\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @private\n */\n\nproto.handle = function handle(req, res, out) {\n  var index = 0;\n  var protohost = getProtohost(req.url) || '';\n  var removed = '';\n  var slashAdded = false;\n  var stack = this.stack;\n\n  // final function handler\n  var done = out || finalhandler(req, res, {\n    env: env,\n    onerror: logerror\n  });\n\n  // store the original URL\n  req.originalUrl = req.originalUrl || req.url;\n\n  function next(err) {\n    if (slashAdded) {\n      req.url = req.url.substr(1);\n      slashAdded = false;\n    }\n\n    if (removed.length !== 0) {\n      req.url = protohost + removed + req.url.substr(protohost.length);\n      removed = '';\n    }\n\n    // next callback\n    var layer = stack[index++];\n\n    // all done\n    if (!layer) {\n      defer(done, err);\n      return;\n    }\n\n    // route data\n    var path = parseUrl(req).pathname || '/';\n    var route = layer.route;\n\n    // skip this layer if the route doesn't match\n    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {\n      return next(err);\n    }\n\n    // skip if route match does not border \"/\", \".\", or end\n    var c = path.length > route.length && path[route.length];\n    if (c && c !== '/' && c !== '.') {\n      return next(err);\n    }\n\n    // trim off the part of the url that matches the route\n    if (route.length !== 0 && route !== '/') {\n      removed = route;\n      req.url = protohost + req.url.substr(protohost.length + removed.length);\n\n      // ensure leading slash\n      if (!protohost && req.url[0] !== '/') {\n        req.url = '/' + req.url;\n        slashAdded = true;\n      }\n    }\n\n    // call the layer handle\n    call(layer.handle, route, err, req, res, next);\n  }\n\n  next();\n};\n\n/**\n * Listen for connections.\n *\n * This method takes the same arguments\n * as node's `http.Server#listen()`.\n *\n * HTTP and HTTPS:\n *\n * If you run your application both as HTTP\n * and HTTPS you may wrap them individually,\n * since your Connect \"server\" is really just\n * a JavaScript `Function`.\n *\n *      var connect = require('connect')\n *        , http = require('http')\n *        , https = require('https');\n *\n *      var app = connect();\n *\n *      http.createServer(app).listen(80);\n *      https.createServer(options, app).listen(443);\n *\n * @return {http.Server}\n * @api public\n */\n\nproto.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\n\n/**\n * Invoke a route handle.\n * @private\n */\n\nfunction call(handle, route, err, req, res, next) {\n  var arity = handle.length;\n  var error = err;\n  var hasError = Boolean(err);\n\n  debug('%s %s : %s', handle.name || '<anonymous>', route, req.originalUrl);\n\n  try {\n    if (hasError && arity === 4) {\n      // error-handling middleware\n      handle(err, req, res, next);\n      return;\n    } else if (!hasError && arity < 4) {\n      // request-handling middleware\n      handle(req, res, next);\n      return;\n    }\n  } catch (e) {\n    // replace the error\n    error = e;\n  }\n\n  // continue\n  next(error);\n}\n\n/**\n * Log error using console.error.\n *\n * @param {Error} err\n * @private\n */\n\nfunction logerror(err) {\n  if (env !== 'test') console.error(err.stack || err.toString());\n}\n\n/**\n * Get get protocol + host for a URL.\n *\n * @param {string} url\n * @private\n */\n\nfunction getProtohost(url) {\n  if (url.length === 0 || url[0] === '/') {\n    return undefined;\n  }\n\n  var searchIndex = url.indexOf('?');\n  var pathLength = searchIndex !== -1\n    ? searchIndex\n    : url.length;\n  var fqdnIndex = url.substr(0, pathLength).indexOf('://');\n\n  return fqdnIndex !== -1\n    ? url.substr(0, url.indexOf('/', 3 + fqdnIndex))\n    : undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}