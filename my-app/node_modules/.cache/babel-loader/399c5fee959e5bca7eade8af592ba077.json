{"ast":null,"code":"\"use strict\";\n\nvar etag = require(\"etag\");\nvar fresh = require(\"fresh\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar zlib = require(\"zlib\");\nvar minifiedScript = path.join(__dirname, \"dist\", \"index.min.js\");\nvar unminifiedScript = path.join(__dirname, \"dist\", \"index.js\");\n\n/**\n * Does the current request support compressed encoding?\n * @param {Object} req\n * @returns {boolean}\n */\nfunction supportsGzip(req) {\n  var accept = req.headers[\"accept-encoding\"];\n  return accept && accept.indexOf(\"gzip\") > -1;\n}\n\n/**\n * Set headers on the response\n * @param {Object} res\n * @param {String} body\n */\nfunction setHeaders(res, body) {\n  res.setHeader(\"Cache-Control\", \"public, max-age=0\");\n  res.setHeader(\"Content-Type\", \"text/javascript\");\n  res.setHeader(\"ETag\", etag(body));\n}\n\n/**\n * @param {Object} req\n * @returns {String}\n */\nfunction isConditionalGet(req) {\n  return req.headers[\"if-none-match\"] || req.headers[\"if-modified-since\"];\n}\n\n/**\n * Return a not-modified response\n * @param {Object} res\n */\nfunction notModified(res) {\n  res.removeHeader(\"Content-Type\");\n  res.statusCode = 304;\n  res.end();\n}\nfunction processItems(items) {\n  return [].concat(items).filter(Boolean).reduce((stringOutput, item) => {\n    if (typeof item === 'string') {\n      return stringOutput + item;\n    }\n    if (typeof item === 'function') {\n      return stringOutput + item();\n    }\n    return stringOutput;\n  }, \"\");\n}\n\n/**\n * Public method for returning either a middleware fn\n * or the content as a string\n * @param {Object} options\n * @param requestBody\n * @param {String} type - either `file` or `middleware`\n * @returns {*}\n */\nfunction init(options, requestBody, type) {\n  /**\n   * If the user asked for a file, simply return the string.\n   */\n  if (type && type === \"file\") {\n    return processItems(requestBody);\n  }\n\n  /**\n   * Otherwise return a function to be used a middleware\n   */\n  return function (req, res) {\n    /**\n     * default to using the uncompressed string\n     * @type {String}\n     */\n    var output = processItems(requestBody);\n\n    /**\n     * Set the appropriate headers for caching\n     */\n    setHeaders(res, output);\n    if (isConditionalGet(req) && fresh(req.headers, res._headers)) {\n      return notModified(res);\n    }\n\n    /**\n     * If gzip is supported, compress the string once\n     * and save for future requests\n     */\n    if (supportsGzip(req)) {\n      res.setHeader(\"Content-Encoding\", \"gzip\");\n      var buf = new Buffer(output, \"utf-8\");\n      zlib.gzip(buf, function (_, result) {\n        res.end(result);\n      });\n    } else {\n      res.end(output);\n    }\n  };\n}\nmodule.exports.middleware = init;\nmodule.exports.plugin = init;\nmodule.exports.minified = function () {\n  return fs.readFileSync(minifiedScript, \"utf8\");\n};\nmodule.exports.unminified = function () {\n  return fs.readFileSync(unminifiedScript, \"utf8\");\n};","map":{"version":3,"names":["etag","require","fresh","fs","path","zlib","minifiedScript","join","__dirname","unminifiedScript","supportsGzip","req","accept","headers","indexOf","setHeaders","res","body","setHeader","isConditionalGet","notModified","removeHeader","statusCode","end","processItems","items","concat","filter","Boolean","reduce","stringOutput","item","init","options","requestBody","type","output","_headers","buf","Buffer","gzip","_","result","module","exports","middleware","plugin","minified","readFileSync","unminified"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/browser-sync-client/index.js"],"sourcesContent":["\"use strict\";\n\nvar etag = require(\"etag\");\nvar fresh = require(\"fresh\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar zlib = require(\"zlib\");\n\nvar minifiedScript = path.join(__dirname, \"dist\", \"index.min.js\");\nvar unminifiedScript = path.join(__dirname, \"dist\", \"index.js\");\n\n/**\n * Does the current request support compressed encoding?\n * @param {Object} req\n * @returns {boolean}\n */\nfunction supportsGzip(req) {\n    var accept = req.headers[\"accept-encoding\"];\n    return accept && accept.indexOf(\"gzip\") > -1;\n}\n\n/**\n * Set headers on the response\n * @param {Object} res\n * @param {String} body\n */\nfunction setHeaders(res, body) {\n    res.setHeader(\"Cache-Control\", \"public, max-age=0\");\n    res.setHeader(\"Content-Type\", \"text/javascript\");\n    res.setHeader(\"ETag\", etag(body));\n}\n\n/**\n * @param {Object} req\n * @returns {String}\n */\nfunction isConditionalGet(req) {\n    return req.headers[\"if-none-match\"] || req.headers[\"if-modified-since\"];\n}\n\n/**\n * Return a not-modified response\n * @param {Object} res\n */\nfunction notModified(res) {\n    res.removeHeader(\"Content-Type\");\n    res.statusCode = 304;\n    res.end();\n}\n\nfunction processItems(items) {\n    return [].concat(items)\n        .filter(Boolean)\n        .reduce((stringOutput, item) => {\n            if (typeof item === 'string') {\n                return stringOutput + item;\n            }\n            if (typeof item === 'function') {\n                return stringOutput + item();\n            }\n            return stringOutput;\n        }, \"\");\n}\n\n/**\n * Public method for returning either a middleware fn\n * or the content as a string\n * @param {Object} options\n * @param requestBody\n * @param {String} type - either `file` or `middleware`\n * @returns {*}\n */\nfunction init(options, requestBody, type) {\n    /**\n     * If the user asked for a file, simply return the string.\n     */\n    if (type && type === \"file\") {\n        return processItems(requestBody);\n    }\n\n    /**\n     * Otherwise return a function to be used a middleware\n     */\n    return function(req, res) {\n        /**\n         * default to using the uncompressed string\n         * @type {String}\n         */\n        var output = processItems(requestBody);\n\n        /**\n         * Set the appropriate headers for caching\n         */\n        setHeaders(res, output);\n        if (isConditionalGet(req) && fresh(req.headers, res._headers)) {\n            return notModified(res);\n        }\n\n        /**\n         * If gzip is supported, compress the string once\n         * and save for future requests\n         */\n        if (supportsGzip(req)) {\n            res.setHeader(\"Content-Encoding\", \"gzip\");\n            var buf = new Buffer(output, \"utf-8\");\n            zlib.gzip(buf, function(_, result) {\n                res.end(result);\n            });\n        } else {\n            res.end(output);\n        }\n    };\n}\n\nmodule.exports.middleware = init;\nmodule.exports.plugin = init;\nmodule.exports.minified = function() {\n    return fs.readFileSync(minifiedScript, \"utf8\");\n};\nmodule.exports.unminified = function() {\n    return fs.readFileSync(unminifiedScript, \"utf8\");\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}