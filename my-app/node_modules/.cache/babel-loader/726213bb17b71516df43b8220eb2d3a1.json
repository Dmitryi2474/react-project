{"ast":null,"code":"/*!\n * is-glob <https://github.com/jonschlinkert/is-glob>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nvar isExtglob = require('is-extglob');\nvar chars = {\n  '{': '}',\n  '(': ')',\n  '[': ']'\n};\nmodule.exports = function isGlob(str, options) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n  if (isExtglob(str)) {\n    return true;\n  }\n  var regex = /\\\\(.)|(^!|\\*|[\\].+)]\\?|\\[[^\\\\\\]]+\\]|\\{[^\\\\}]+\\}|\\(\\?[:!=][^\\\\)]+\\)|\\([^|]+\\|[^\\\\)]+\\))/;\n  var match;\n\n  // optionally relax regex\n  if (options && options.strict === false) {\n    regex = /\\\\(.)|(^!|[*?{}()[\\]]|\\(\\?)/;\n  }\n  while (match = regex.exec(str)) {\n    if (match[2]) return true;\n    var idx = match.index + match[0].length;\n\n    // if an open bracket/brace/paren is escaped,\n    // set the index to the next closing character\n    var open = match[1];\n    var close = open ? chars[open] : null;\n    if (open && close) {\n      var n = str.indexOf(close, idx);\n      if (n !== -1) {\n        idx = n + 1;\n      }\n    }\n    str = str.slice(idx);\n  }\n  return false;\n};","map":{"version":3,"names":["isExtglob","require","chars","module","exports","isGlob","str","options","regex","match","strict","exec","idx","index","length","open","close","n","indexOf","slice"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/is-glob/index.js"],"sourcesContent":["/*!\n * is-glob <https://github.com/jonschlinkert/is-glob>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nvar isExtglob = require('is-extglob');\nvar chars = { '{': '}', '(': ')', '[': ']'};\n\nmodule.exports = function isGlob(str, options) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  if (isExtglob(str)) {\n    return true;\n  }\n\n  var regex = /\\\\(.)|(^!|\\*|[\\].+)]\\?|\\[[^\\\\\\]]+\\]|\\{[^\\\\}]+\\}|\\(\\?[:!=][^\\\\)]+\\)|\\([^|]+\\|[^\\\\)]+\\))/;\n  var match;\n\n  // optionally relax regex\n  if (options && options.strict === false) {\n    regex = /\\\\(.)|(^!|[*?{}()[\\]]|\\(\\?)/;\n  }\n\n  while ((match = regex.exec(str))) {\n    if (match[2]) return true;\n    var idx = match.index + match[0].length;\n\n    // if an open bracket/brace/paren is escaped,\n    // set the index to the next closing character\n    var open = match[1];\n    var close = open ? chars[open] : null;\n    if (open && close) {\n      var n = str.indexOf(close, idx);\n      if (n !== -1) {\n        idx = n + 1;\n      }\n    }\n\n    str = str.slice(idx);\n  }\n  return false;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AACrC,IAAIC,KAAK,GAAG;EAAE,GAAG,EAAE,GAAG;EAAE,GAAG,EAAE,GAAG;EAAE,GAAG,EAAE;AAAG,CAAC;AAE3CC,MAAM,CAACC,OAAO,GAAG,SAASC,MAAM,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC7C,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,EAAE,EAAE;IACzC,OAAO,KAAK;EACd;EAEA,IAAIN,SAAS,CAACM,GAAG,CAAC,EAAE;IAClB,OAAO,IAAI;EACb;EAEA,IAAIE,KAAK,GAAG,wFAAwF;EACpG,IAAIC,KAAK;;EAET;EACA,IAAIF,OAAO,IAAIA,OAAO,CAACG,MAAM,KAAK,KAAK,EAAE;IACvCF,KAAK,GAAG,6BAA6B;EACvC;EAEA,OAAQC,KAAK,GAAGD,KAAK,CAACG,IAAI,CAACL,GAAG,CAAC,EAAG;IAChC,IAAIG,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,IAAI;IACzB,IAAIG,GAAG,GAAGH,KAAK,CAACI,KAAK,GAAGJ,KAAK,CAAC,CAAC,CAAC,CAACK,MAAM;;IAEvC;IACA;IACA,IAAIC,IAAI,GAAGN,KAAK,CAAC,CAAC,CAAC;IACnB,IAAIO,KAAK,GAAGD,IAAI,GAAGb,KAAK,CAACa,IAAI,CAAC,GAAG,IAAI;IACrC,IAAIA,IAAI,IAAIC,KAAK,EAAE;MACjB,IAAIC,CAAC,GAAGX,GAAG,CAACY,OAAO,CAACF,KAAK,EAAEJ,GAAG,CAAC;MAC/B,IAAIK,CAAC,KAAK,CAAC,CAAC,EAAE;QACZL,GAAG,GAAGK,CAAC,GAAG,CAAC;MACb;IACF;IAEAX,GAAG,GAAGA,GAAG,CAACa,KAAK,CAACP,GAAG,CAAC;EACtB;EACA,OAAO,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"script"}