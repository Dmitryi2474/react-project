{"ast":null,"code":"\"use strict\";\n\nvar logger = require(\"../logger\").logger;\n/**\n * $ browser-sync recipe <name> <options>\n *\n * This command will copy a recipe into either the current directory\n * or one given with the --output flag\n *\n * @param opts\n * @returns {Function}\n */\nmodule.exports = function (opts) {\n  var path = require(\"path\");\n  var fs = require(\"fs-extra\");\n  var input = opts.cli.input.slice(1);\n  var resolved = require.resolve(\"bs-recipes\");\n  var dir = path.dirname(resolved);\n  var logRecipes = function () {\n    var dirs = fs.readdirSync(path.join(dir, \"recipes\"));\n    logger.info(\"Install one of the following with {cyan:browser-sync recipe <name>\\n\");\n    dirs.forEach(function (name) {\n      console.log(\"    \" + name);\n    });\n  };\n  if (!input.length) {\n    logger.info(\"No recipe name provided!\");\n    logRecipes();\n    return opts.cb();\n  }\n  if (opts.cli.input[1] === \"ls\") {\n    logRecipes();\n    return opts.cb();\n  }\n  input = input[0];\n  var flags = opts.cli.flags;\n  var output = flags.output ? path.resolve(flags.output) : path.join(process.cwd(), input);\n  var targetDir = path.join(dir, \"recipes\", input);\n  if (fs.existsSync(output)) {\n    return opts.cb(new Error(\"Target folder exists remove it first and then try again\"));\n  }\n  if (fs.existsSync(targetDir)) {\n    fs.copy(targetDir, output, function (err) {\n      if (err) {\n        opts.cb(err);\n      } else {\n        logger.info(\"Recipe copied into {cyan:%s}\", output);\n        logger.info(\"Next, inside that folder, run {cyan:npm i && npm start}\");\n        opts.cb(null);\n      }\n    });\n  } else {\n    logger.info(\"Recipe {cyan:%s} not found. The following are available though\", input);\n    logRecipes();\n    opts.cb();\n  }\n};","map":{"version":3,"mappings":"AAAA,YAAY;;AACZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACD,MAAM;AAExC;;;;;;;;;AASAE,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI;EAC1B,IAAIC,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;EAC1B,IAAIK,EAAE,GAAGL,OAAO,CAAC,UAAU,CAAC;EAC5B,IAAIM,KAAK,GAAGH,IAAI,CAACI,GAAG,CAACD,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC;EACnC,IAAIC,QAAQ,GAAGT,OAAO,CAACU,OAAO,CAAC,YAAY,CAAC;EAC5C,IAAIC,GAAG,GAAGP,IAAI,CAACQ,OAAO,CAACH,QAAQ,CAAC;EAEhC,IAAII,UAAU,GAAG;IACb,IAAIC,IAAI,GAAGT,EAAE,CAACU,WAAW,CAACX,IAAI,CAACY,IAAI,CAACL,GAAG,EAAE,SAAS,CAAC,CAAC;IACpDZ,MAAM,CAACkB,IAAI,CACP,sEAAsE,CACzE;IACDH,IAAI,CAACI,OAAO,CAAC,UAASC,IAAI;MACtBC,OAAO,CAACC,GAAG,CAAC,MAAM,GAAGF,IAAI,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EAED,IAAI,CAACb,KAAK,CAACgB,MAAM,EAAE;IACfvB,MAAM,CAACkB,IAAI,CAAC,0BAA0B,CAAC;IACvCJ,UAAU,EAAE;IACZ,OAAOV,IAAI,CAACoB,EAAE,EAAE;;EAGpB,IAAIpB,IAAI,CAACI,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IAC5BO,UAAU,EAAE;IACZ,OAAOV,IAAI,CAACoB,EAAE,EAAE;;EAGpBjB,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC;EAChB,IAAIkB,KAAK,GAAGrB,IAAI,CAACI,GAAG,CAACiB,KAAK;EAC1B,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM,GACnBrB,IAAI,CAACM,OAAO,CAACc,KAAK,CAACC,MAAM,CAAC,GAC1BrB,IAAI,CAACY,IAAI,CAACU,OAAO,CAACC,GAAG,EAAE,EAAErB,KAAK,CAAC;EACrC,IAAIsB,SAAS,GAAGxB,IAAI,CAACY,IAAI,CAACL,GAAG,EAAE,SAAS,EAAEL,KAAK,CAAC;EAEhD,IAAID,EAAE,CAACwB,UAAU,CAACJ,MAAM,CAAC,EAAE;IACvB,OAAOtB,IAAI,CAACoB,EAAE,CACV,IAAIO,KAAK,CAAC,yDAAyD,CAAC,CACvE;;EAGL,IAAIzB,EAAE,CAACwB,UAAU,CAACD,SAAS,CAAC,EAAE;IAC1BvB,EAAE,CAAC0B,IAAI,CAACH,SAAS,EAAEH,MAAM,EAAE,UAASO,GAAG;MACnC,IAAIA,GAAG,EAAE;QACL7B,IAAI,CAACoB,EAAE,CAACS,GAAG,CAAC;OACf,MAAM;QACHjC,MAAM,CAACkB,IAAI,CAAC,8BAA8B,EAAEQ,MAAM,CAAC;QACnD1B,MAAM,CAACkB,IAAI,CACP,yDAAyD,CAC5D;QACDd,IAAI,CAACoB,EAAE,CAAC,IAAI,CAAC;;IAErB,CAAC,CAAC;GACL,MAAM;IACHxB,MAAM,CAACkB,IAAI,CACP,gEAAgE,EAChEX,KAAK,CACR;IACDO,UAAU,EAAE;IACZV,IAAI,CAACoB,EAAE,EAAE;;AAEjB,CAAC","names":["logger","require","module","exports","opts","path","fs","input","cli","slice","resolved","resolve","dir","dirname","logRecipes","dirs","readdirSync","join","info","forEach","name","console","log","length","cb","flags","output","process","cwd","targetDir","existsSync","Error","copy","err"],"sources":["../../lib/cli/command.recipe.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}