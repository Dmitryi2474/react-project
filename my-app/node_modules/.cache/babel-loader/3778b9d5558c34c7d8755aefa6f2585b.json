{"ast":null,"code":"\"use strict\";\n\nvar queryString = require(\"qs\");\nvar proto = exports;\nvar instanceMethods = [\"exit\", \"notify\", \"pause\", \"resume\"];\nvar getBody = require('raw-body');\nvar permittedSocketEvents = [\"file:reload\", \"browser:reload\", \"browser:notify\", \"browser:location\", \"options:set\"];\n/**\n * Does the requested method expect an instance of BrowserSync\n * or raw access to the emitter?\n * @param method\n * @returns {boolean}\n */\nfunction methodRequiresInstance(method) {\n  return instanceMethods.indexOf(method) > -1;\n}\n/**\n * Use BrowserSync options + querystring to create a\n * full HTTP/HTTTPS url.\n *\n * Eg. http://localhost:3000/__browser_sync__?method=reload\n * Eg. http://localhost:3000/__browser_sync__?method=reload&args=core.css\n * Eg. http://localhost:3000/__browser_sync__?method=reload&args=core.css&args=core.min\n *\n * @param args\n * @param url\n * @returns {string}\n */\nproto.getUrl = function (args, url) {\n  return [url, require(\"./config\").httpProtocol.path, \"?\", queryString.stringify(args)].join(\"\");\n};\n/**\n * Return a middleware for handling the requests\n * @param {BrowserSync} bs\n * @returns {Function}\n */\nproto.middleware = function (bs) {\n  return function (req, res) {\n    if (req.method === 'POST') {\n      return getBody(req, function (err, body) {\n        if (err) {\n          var output_1 = [\"Error: could not parse JSON.\"];\n          res.writeHead(500, {\n            \"Content-Type\": \"text/plain\"\n          });\n          return res.end(output_1.join(\"\\n\"));\n        }\n        try {\n          var _a = JSON.parse(body.toString()),\n            name = _a[0],\n            payload = _a[1];\n          bs.io.sockets.emit(name, payload);\n          return res.end(\"Browsersync HTTP Protocol received: \" + name + \" \" + JSON.stringify(payload));\n        } catch (e) {\n          var output_2 = [\"Error: \" + e.message];\n          res.writeHead(500, {\n            \"Content-Type\": \"text/plain\"\n          });\n          return res.end(output_2.join(\"\\n\"));\n        }\n      });\n    }\n    var params = queryString.parse(req.url.replace(/^.*\\?/, \"\"));\n    var output;\n    if (!Object.keys(params).length) {\n      output = [\"Error: No Parameters were provided.\", \"Example: http://localhost:3000/__browser_sync__?method=reload&args=core.css\"];\n      res.writeHead(500, {\n        \"Content-Type\": \"text/plain\"\n      });\n      res.end(output.join(\"\\n\"));\n      return;\n    }\n    try {\n      var bsOrEmitter = methodRequiresInstance(params.method) ? bs : bs.events;\n      require(\"./public/\" + params.method)(bsOrEmitter).apply(null, [params.args]);\n      output = [\"Called public API method `.%s()`\".replace(\"%s\", params.method), \"With args: \" + JSON.stringify(params.args)];\n      res.end(output.join(\"\\n\"));\n    } catch (e) {\n      res.writeHead(404, {\n        \"Content-Type\": \"text/plain\"\n      });\n      res.write(\"Public API method `\" + params.method + \"` not found.\");\n      res.end();\n      return;\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,IAAI,CAAC;AAC/B,IAAIC,KAAK,GAAGC,OAAO;AACnB,IAAIC,eAAe,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC;AAC3D,IAAIC,OAAO,GAAGJ,OAAO,CAAC,UAAU,CAAC;AACjC,IAAMK,qBAAqB,GAAG,CAC1B,aAAa,EACb,gBAAgB,EAChB,gBAAgB,EAChB,kBAAkB,EAClB,aAAa,CAChB;AAED;;;;;;AAMA,SAASC,sBAAsB,CAACC,MAAM;EAClC,OAAOJ,eAAe,CAACK,OAAO,CAACD,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/C;AAEA;;;;;;;;;;;;AAYAN,KAAK,CAACQ,MAAM,GAAG,UAASC,IAAI,EAAEC,GAAG;EAC7B,OAAO,CACHA,GAAG,EACHX,OAAO,CAAC,UAAU,CAAC,CAACY,YAAY,CAACC,IAAI,EACrC,GAAG,EACHd,WAAW,CAACe,SAAS,CAACJ,IAAI,CAAC,CAC9B,CAACK,IAAI,CAAC,EAAE,CAAC;AACd,CAAC;AAED;;;;;AAKAd,KAAK,CAACe,UAAU,GAAG,UAASC,EAAE;EAC1B,OAAO,UAASC,GAAG,EAAEC,GAAG;IACpB,IAAID,GAAG,CAACX,MAAM,KAAK,MAAM,EAAE;MACvB,OAAOH,OAAO,CAACc,GAAG,EAAE,UAASE,GAAG,EAAEC,IAAI;QAClC,IAAID,GAAG,EAAE;UACL,IAAME,QAAM,GAAG,CACX,8BAA8B,CACjC;UACDH,GAAG,CAACI,SAAS,CAAC,GAAG,EAAE;YAAE,cAAc,EAAE;UAAY,CAAE,CAAC;UACpD,OAAOJ,GAAG,CAACK,GAAG,CAACF,QAAM,CAACP,IAAI,CAAC,IAAI,CAAC,CAAC;;QAErC,IAAI;UACM,oCAA6C;YAA5CU,YAAI;YAAEC,eAAO;UACpBT,EAAE,CAACU,EAAE,CAACC,OAAO,CAACC,IAAI,CAACJ,IAAI,EAAEC,OAAO,CAAC;UACjC,OAAOP,GAAG,CAACK,GAAG,CAAC,yCAAuCC,IAAI,SAAIK,IAAI,CAAChB,SAAS,CAACY,OAAO,CAAG,CAAC;SAC3F,CAAC,OAAOK,CAAC,EAAE;UACR,IAAMC,QAAM,GAAG,CACX,YAAUD,CAAC,CAACE,OAAS,CACxB;UACDd,GAAG,CAACI,SAAS,CAAC,GAAG,EAAE;YAAE,cAAc,EAAE;UAAY,CAAE,CAAC;UACpD,OAAOJ,GAAG,CAACK,GAAG,CAACQ,QAAM,CAACjB,IAAI,CAAC,IAAI,CAAC,CAAC;;MAEzC,CAAC,CAAC;;IAEN,IAAImB,MAAM,GAAGnC,WAAW,CAACoC,KAAK,CAACjB,GAAG,CAACP,GAAG,CAACyB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5D,IAAIC,MAAM;IAEV,IAAI,CAACC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACM,MAAM,EAAE;MAC7BH,MAAM,GAAG,CACL,qCAAqC,EACrC,6EAA6E,CAChF;MACDlB,GAAG,CAACI,SAAS,CAAC,GAAG,EAAE;QAAE,cAAc,EAAE;MAAY,CAAE,CAAC;MACpDJ,GAAG,CAACK,GAAG,CAACa,MAAM,CAACtB,IAAI,CAAC,IAAI,CAAC,CAAC;MAC1B;;IAGJ,IAAI;MACA,IAAI0B,WAAW,GAAGnC,sBAAsB,CAAC4B,MAAM,CAAC3B,MAAM,CAAC,GACjDU,EAAE,GACFA,EAAE,CAACyB,MAAM;MAEf1C,OAAO,CAAC,WAAW,GAAGkC,MAAM,CAAC3B,MAAM,CAAC,CAACkC,WAAW,CAAC,CAACE,KAAK,CAAC,IAAI,EAAE,CAC1DT,MAAM,CAACxB,IAAI,CACd,CAAC;MAEF2B,MAAM,GAAG,CACL,kCAAkC,CAACD,OAAO,CAAC,IAAI,EAAEF,MAAM,CAAC3B,MAAM,CAAC,EAC/D,aAAa,GAAGuB,IAAI,CAAChB,SAAS,CAACoB,MAAM,CAACxB,IAAI,CAAC,CAC9C;MAEDS,GAAG,CAACK,GAAG,CAACa,MAAM,CAACtB,IAAI,CAAC,IAAI,CAAC,CAAC;KAC7B,CAAC,OAAOgB,CAAC,EAAE;MACRZ,GAAG,CAACI,SAAS,CAAC,GAAG,EAAE;QAAE,cAAc,EAAE;MAAY,CAAE,CAAC;MACpDJ,GAAG,CAACyB,KAAK,CAAC,qBAAqB,GAAGV,MAAM,CAAC3B,MAAM,GAAG,cAAc,CAAC;MACjEY,GAAG,CAACK,GAAG,EAAE;MAET;;EAER,CAAC;AACL,CAAC","names":["queryString","require","proto","exports","instanceMethods","getBody","permittedSocketEvents","methodRequiresInstance","method","indexOf","getUrl","args","url","httpProtocol","path","stringify","join","middleware","bs","req","res","err","body","output_1","writeHead","end","name","payload","io","sockets","emit","JSON","e","output_2","message","params","parse","replace","output","Object","keys","length","bsOrEmitter","events","apply","write"],"sources":["../lib/http-protocol.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}