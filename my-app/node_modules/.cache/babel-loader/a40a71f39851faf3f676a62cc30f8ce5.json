{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst copyFileSync = require('./copy-file-sync');\nconst mkdir = require('../mkdirs');\nfunction copySync(src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {\n      filter: options\n    };\n  }\n  options = options || {};\n  options.recursive = !!options.recursive;\n\n  // default to true for now\n  options.clobber = 'clobber' in options ? !!options.clobber : true;\n  // overwrite falls back to clobber\n  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber;\n  options.dereference = 'dereference' in options ? !!options.dereference : false;\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false;\n  options.filter = options.filter || function () {\n    return true;\n  };\n\n  // Warn about using preserveTimestamps on 32-bit node:\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`);\n  }\n  const stats = options.recursive && !options.dereference ? fs.lstatSync(src) : fs.statSync(src);\n  const destFolder = path.dirname(dest);\n  const destFolderExists = fs.existsSync(destFolder);\n  let performCopy = false;\n  if (options.filter instanceof RegExp) {\n    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function');\n    performCopy = options.filter.test(src);\n  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest);\n  if (stats.isFile() && performCopy) {\n    if (!destFolderExists) mkdir.mkdirsSync(destFolder);\n    copyFileSync(src, dest, {\n      overwrite: options.overwrite,\n      errorOnExist: options.errorOnExist,\n      preserveTimestamps: options.preserveTimestamps\n    });\n  } else if (stats.isDirectory() && performCopy) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest);\n    const contents = fs.readdirSync(src);\n    contents.forEach(content => {\n      const opts = options;\n      opts.recursive = true;\n      copySync(path.join(src, content), path.join(dest, content), opts);\n    });\n  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {\n    const srcPath = fs.readlinkSync(src);\n    fs.symlinkSync(srcPath, dest);\n  }\n}\nmodule.exports = copySync;","map":{"version":3,"names":["fs","require","path","copyFileSync","mkdir","copySync","src","dest","options","RegExp","filter","recursive","clobber","overwrite","dereference","preserveTimestamps","process","arch","console","warn","stats","lstatSync","statSync","destFolder","dirname","destFolderExists","existsSync","performCopy","test","isFile","mkdirsSync","errorOnExist","isDirectory","contents","readdirSync","forEach","content","opts","join","isSymbolicLink","srcPath","readlinkSync","symlinkSync","module","exports"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/fs-extra/lib/copy-sync/copy-sync.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copyFileSync = require('./copy-file-sync')\nconst mkdir = require('../mkdirs')\n\nfunction copySync (src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {filter: options}\n  }\n\n  options = options || {}\n  options.recursive = !!options.recursive\n\n  // default to true for now\n  options.clobber = 'clobber' in options ? !!options.clobber : true\n  // overwrite falls back to clobber\n  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber\n  options.dereference = 'dereference' in options ? !!options.dereference : false\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false\n\n  options.filter = options.filter || function () { return true }\n\n  // Warn about using preserveTimestamps on 32-bit node:\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`)\n  }\n\n  const stats = (options.recursive && !options.dereference) ? fs.lstatSync(src) : fs.statSync(src)\n  const destFolder = path.dirname(dest)\n  const destFolderExists = fs.existsSync(destFolder)\n  let performCopy = false\n\n  if (options.filter instanceof RegExp) {\n    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')\n    performCopy = options.filter.test(src)\n  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest)\n\n  if (stats.isFile() && performCopy) {\n    if (!destFolderExists) mkdir.mkdirsSync(destFolder)\n    copyFileSync(src, dest, {\n      overwrite: options.overwrite,\n      errorOnExist: options.errorOnExist,\n      preserveTimestamps: options.preserveTimestamps\n    })\n  } else if (stats.isDirectory() && performCopy) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)\n    const contents = fs.readdirSync(src)\n    contents.forEach(content => {\n      const opts = options\n      opts.recursive = true\n      copySync(path.join(src, content), path.join(dest, content), opts)\n    })\n  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {\n    const srcPath = fs.readlinkSync(src)\n    fs.symlinkSync(srcPath, dest)\n  }\n}\n\nmodule.exports = copySync\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}