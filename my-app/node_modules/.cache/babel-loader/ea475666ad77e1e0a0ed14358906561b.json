{"ast":null,"code":"\"use strict\";\n\nvar socket = require(\"socket.io\");\nvar utils = require(\"./server/utils\");\n/**\n * Plugin interface\n * @returns {*|function(this:exports)}\n */\nmodule.exports.plugin = function (server, clientEvents, bs) {\n  return exports.init(server, clientEvents, bs);\n};\n/**\n * @param {http.Server} server\n * @param clientEvents\n * @param {BrowserSync} bs\n */\nmodule.exports.init = function (server, clientEvents, bs) {\n  var emitter = bs.events;\n  var socketConfig = bs.options.get(\"socket\").toJS();\n  if (bs.options.get(\"mode\") === \"proxy\" && bs.options.getIn([\"proxy\", \"ws\"])) {\n    server = utils.getServer(null, bs.options).server;\n    server.listen(bs.options.getIn([\"socket\", \"port\"]));\n    bs.registerCleanupTask(function () {\n      server.close();\n    });\n  }\n  var socketIoConfig = socketConfig.socketIoOptions;\n  socketIoConfig.path = socketConfig.path;\n  var io = socket(server, socketIoConfig);\n  // Override default namespace.\n  io.sockets = io.of(socketConfig.namespace);\n  io.set(\"heartbeat interval\", socketConfig.clients.heartbeatTimeout);\n  /**\n   * Listen for new connections\n   */\n  io.sockets.on(\"connection\", handleConnection);\n  /**\n   * Handle each new connection\n   * @param {Object} client\n   */\n  function handleConnection(client) {\n    // set ghostmode callbacks\n    if (bs.options.get(\"ghostMode\")) {\n      addGhostMode(client);\n    }\n    client.emit(\"connection\", bs.options.toJS()); //todo - trim the amount of options sent to clients\n    emitter.emit(\"client:connected\", {\n      ua: client.handshake.headers[\"user-agent\"]\n    });\n  }\n  /**\n   * @param client\n   */\n  function addGhostMode(client) {\n    clientEvents.forEach(addEvent);\n    function addEvent(event) {\n      client.on(event, function (data) {\n        client.broadcast.emit(event, data);\n      });\n    }\n  }\n  return io;\n};","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAErC;;;;AAIAE,MAAM,CAACC,OAAO,CAACC,MAAM,GAAG,UAASC,MAAM,EAAEC,YAAY,EAAEC,EAAE;EACrD,OAAOJ,OAAO,CAACK,IAAI,CAACH,MAAM,EAAEC,YAAY,EAAEC,EAAE,CAAC;AACjD,CAAC;AAED;;;;;AAKAL,MAAM,CAACC,OAAO,CAACK,IAAI,GAAG,UAASH,MAAM,EAAEC,YAAY,EAAEC,EAAE;EACnD,IAAIE,OAAO,GAAGF,EAAE,CAACG,MAAM;EAEvB,IAAIC,YAAY,GAAGJ,EAAE,CAACK,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE;EAElD,IACIP,EAAE,CAACK,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC,KAAK,OAAO,IAClCN,EAAE,CAACK,OAAO,CAACG,KAAK,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,EACnC;IACEV,MAAM,GAAGJ,KAAK,CAACe,SAAS,CAAC,IAAI,EAAET,EAAE,CAACK,OAAO,CAAC,CAACP,MAAM;IACjDA,MAAM,CAACY,MAAM,CAACV,EAAE,CAACK,OAAO,CAACG,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IACnDR,EAAE,CAACW,mBAAmB,CAAC;MACnBb,MAAM,CAACc,KAAK,EAAE;IAClB,CAAC,CAAC;;EAGN,IAAIC,cAAc,GAAGT,YAAY,CAACU,eAAe;EACjDD,cAAc,CAACE,IAAI,GAAGX,YAAY,CAACW,IAAI;EAEvC,IAAIC,EAAE,GAAGxB,MAAM,CAACM,MAAM,EAAEe,cAAc,CAAC;EAEvC;EACAG,EAAE,CAACC,OAAO,GAAGD,EAAE,CAACE,EAAE,CAACd,YAAY,CAACe,SAAS,CAAC;EAE1CH,EAAE,CAACI,GAAG,CAAC,oBAAoB,EAAEhB,YAAY,CAACiB,OAAO,CAACC,gBAAgB,CAAC;EAEnE;;;EAGAN,EAAE,CAACC,OAAO,CAACM,EAAE,CAAC,YAAY,EAAEC,gBAAgB,CAAC;EAE7C;;;;EAIA,SAASA,gBAAgB,CAACC,MAAM;IAC5B;IACA,IAAIzB,EAAE,CAACK,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,EAAE;MAC7BoB,YAAY,CAACD,MAAM,CAAC;;IAGxBA,MAAM,CAACE,IAAI,CAAC,YAAY,EAAE3B,EAAE,CAACK,OAAO,CAACE,IAAI,EAAE,CAAC,CAAC,CAAC;IAE9CL,OAAO,CAACyB,IAAI,CAAC,kBAAkB,EAAE;MAC7BC,EAAE,EAAEH,MAAM,CAACI,SAAS,CAACC,OAAO,CAAC,YAAY;KAC5C,CAAC;EACN;EAEA;;;EAGA,SAASJ,YAAY,CAACD,MAAM;IACxB1B,YAAY,CAACgC,OAAO,CAACC,QAAQ,CAAC;IAE9B,SAASA,QAAQ,CAACC,KAAK;MACnBR,MAAM,CAACF,EAAE,CAACU,KAAK,EAAE,UAACC,IAAI;QAClBT,MAAM,CAACU,SAAS,CAACR,IAAI,CAACM,KAAK,EAAEC,IAAI,CAAC;MACtC,CAAC,CAAC;IACN;EACJ;EAEA,OAAOlB,EAAE;AACb,CAAC","names":["socket","require","utils","module","exports","plugin","server","clientEvents","bs","init","emitter","events","socketConfig","options","get","toJS","getIn","getServer","listen","registerCleanupTask","close","socketIoConfig","socketIoOptions","path","io","sockets","of","namespace","set","clients","heartbeatTimeout","on","handleConnection","client","addGhostMode","emit","ua","handshake","headers","forEach","addEvent","event","data","broadcast"],"sources":["../lib/sockets.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}