{"ast":null,"code":"var serverUtils = require(\"./utils.js\");\nvar resolve = require(\"path\").resolve;\nvar utils = require(\"../utils.js\");\nvar serveStatic = require(\"./serve-static-wrapper\").default();\nvar serveIndex = require(\"serve-index\");\n/**\n * @param {BrowserSync} bs\n * @returns {*}\n */\nmodule.exports = function createServer(bs) {\n  var options = bs.options;\n  var server = options.get(\"server\");\n  var basedirs = utils.arrayify(server.get(\"baseDir\"));\n  var serveStaticOptions = server.get(\"serveStaticOptions\").toJS(); // passed to 3rd party\n  var _serveStatic = 0;\n  var _routes = 0;\n  bs.options = bs.options\n  /**\n   * Add directory Middleware if given in server.directory\n   */.update(\"middleware\", function (mw) {\n    if (!server.get(\"directory\")) {\n      return mw;\n    }\n    return mw.concat({\n      route: \"\",\n      handle: serveIndex(resolve(basedirs[0]), {\n        icons: true,\n        view: \"details\"\n      }),\n      id: \"Browsersync Server Directory Middleware\"\n    });\n  })\n  /**\n   * Add middleware for server.baseDir Option\n   */.update(\"middleware\", function (mw) {\n    return mw.concat(basedirs.map(function (root) {\n      return {\n        route: \"\",\n        id: \"Browsersync Server ServeStatic Middleware - \" + _serveStatic++,\n        handle: serveStatic(resolve(root), serveStaticOptions)\n      };\n    }));\n  })\n  /**\n   * Add middleware for server.routes\n   */.update(\"middleware\", function (mw) {\n    if (!server.get(\"routes\")) {\n      return mw;\n    }\n    return mw.concat(server.get(\"routes\").map(function (root, urlPath) {\n      // strip trailing slash\n      if (urlPath[urlPath.length - 1] === \"/\") {\n        urlPath = urlPath.slice(0, -1);\n      }\n      return {\n        route: urlPath,\n        id: \"Browsersync Server Routes Middleware - \" + _routes++,\n        handle: serveStatic(resolve(root))\n      };\n    }));\n  });\n  var app = serverUtils.getBaseApp(bs);\n  /**\n   * Finally, return the server + App\n   */\n  return serverUtils.getServer(app, bs.options);\n};","map":{"version":3,"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,IAAIC,OAAO,GAAGD,OAAO,CAAC,MAAM,CAAC,CAACC,OAAO;AACrC,IAAIC,KAAK,GAAGF,OAAO,CAAC,aAAa,CAAC;AAClC,IAAIG,WAAW,GAAGH,OAAO,CAAC,wBAAwB,CAAC,CAACI,OAAO,EAAE;AAC7D,IAAIC,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC;AAEvC;;;;AAIAM,MAAM,CAACC,OAAO,GAAG,SAASC,YAAY,CAACC,EAAE;EACrC,IAAIC,OAAO,GAAGD,EAAE,CAACC,OAAO;EACxB,IAAIC,MAAM,GAAGD,OAAO,CAACE,GAAG,CAAC,QAAQ,CAAC;EAClC,IAAIC,QAAQ,GAAGX,KAAK,CAACY,QAAQ,CAACH,MAAM,CAACC,GAAG,CAAC,SAAS,CAAC,CAAC;EACpD,IAAIG,kBAAkB,GAAGJ,MAAM,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAACI,IAAI,EAAE,CAAC,CAAC;EAElE,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,OAAO,GAAG,CAAC;EACfT,EAAE,CAACC,OAAO,GAAGD,EAAE,CAACC;EACZ;;KAAA,CAGCS,MAAM,CAAC,YAAY,EAAE,UAASC,EAAE;IAC7B,IAAI,CAACT,MAAM,CAACC,GAAG,CAAC,WAAW,CAAC,EAAE;MAC1B,OAAOQ,EAAE;;IAGb,OAAOA,EAAE,CAACC,MAAM,CAAC;MACbC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAElB,UAAU,CAACJ,OAAO,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;QACrCW,KAAK,EAAE,IAAI;QACXC,IAAI,EAAE;OACT,CAAC;MACFC,EAAE,EAAE;KACP,CAAC;EACN,CAAC;EACD;;KAAA,CAGCP,MAAM,CAAC,YAAY,EAAE,UAASC,EAAE;IAC7B,OAAOA,EAAE,CAACC,MAAM,CACZR,QAAQ,CAACc,GAAG,CAAC,UAASC,IAAI;MACtB,OAAO;QACHN,KAAK,EAAE,EAAE;QACTI,EAAE,EACE,8CAA8C,GAC9CT,YAAY,EAAE;QAClBM,MAAM,EAAEpB,WAAW,CAACF,OAAO,CAAC2B,IAAI,CAAC,EAAEb,kBAAkB;OACxD;IACL,CAAC,CAAC,CACL;EACL,CAAC;EACD;;KAAA,CAGCI,MAAM,CAAC,YAAY,EAAE,UAASC,EAAE;IAC7B,IAAI,CAACT,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;MACvB,OAAOQ,EAAE;;IAGb,OAAOA,EAAE,CAACC,MAAM,CACZV,MAAM,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACe,GAAG,CAAC,UAASC,IAAI,EAAEC,OAAO;MAC3C;MACA,IAAIA,OAAO,CAACA,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACrCD,OAAO,GAAGA,OAAO,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;MAElC,OAAO;QACHT,KAAK,EAAEO,OAAO;QACdH,EAAE,EACE,yCAAyC,GACzCR,OAAO,EAAE;QACbK,MAAM,EAAEpB,WAAW,CAACF,OAAO,CAAC2B,IAAI,CAAC;OACpC;IACL,CAAC,CAAC,CACL;EACL,CAAC,CAAC;EAEN,IAAII,GAAG,GAAGjC,WAAW,CAACkC,UAAU,CAACxB,EAAE,CAAC;EAEpC;;;EAGA,OAAOV,WAAW,CAACmC,SAAS,CAACF,GAAG,EAAEvB,EAAE,CAACC,OAAO,CAAC;AACjD,CAAC","names":["serverUtils","require","resolve","utils","serveStatic","default","serveIndex","module","exports","createServer","bs","options","server","get","basedirs","arrayify","serveStaticOptions","toJS","_serveStatic","_routes","update","mw","concat","route","handle","icons","view","id","map","root","urlPath","length","slice","app","getBaseApp","getServer"],"sources":["../../lib/server/static-server.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}