{"ast":null,"code":"/*!\n * expand-brackets <https://github.com/jonschlinkert/expand-brackets>\n *\n * Copyright (c) 2015 Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar isPosixBracket = require('is-posix-bracket');\n\n/**\n * POSIX character classes\n */\n\nvar POSIX = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E',\n  punct: '-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\n\n/**\n * Expose `brackets`\n */\n\nmodule.exports = brackets;\nfunction brackets(str) {\n  if (!isPosixBracket(str)) {\n    return str;\n  }\n  var negated = false;\n  if (str.indexOf('[^') !== -1) {\n    negated = true;\n    str = str.split('[^').join('[');\n  }\n  if (str.indexOf('[!') !== -1) {\n    negated = true;\n    str = str.split('[!').join('[');\n  }\n  var a = str.split('[');\n  var b = str.split(']');\n  var imbalanced = a.length !== b.length;\n  var parts = str.split(/(?::\\]\\[:|\\[?\\[:|:\\]\\]?)/);\n  var len = parts.length,\n    i = 0;\n  var end = '',\n    beg = '';\n  var res = [];\n\n  // start at the end (innermost) first\n  while (len--) {\n    var inner = parts[i++];\n    if (inner === '^[!' || inner === '[!') {\n      inner = '';\n      negated = true;\n    }\n    var prefix = negated ? '^' : '';\n    var ch = POSIX[inner];\n    if (ch) {\n      res.push('[' + prefix + ch + ']');\n    } else if (inner) {\n      if (/^\\[?\\w-\\w\\]?$/.test(inner)) {\n        if (i === parts.length) {\n          res.push('[' + prefix + inner);\n        } else if (i === 1) {\n          res.push(prefix + inner + ']');\n        } else {\n          res.push(prefix + inner);\n        }\n      } else {\n        if (i === 1) {\n          beg += inner;\n        } else if (i === parts.length) {\n          end += inner;\n        } else {\n          res.push('[' + prefix + inner + ']');\n        }\n      }\n    }\n  }\n  var result = res.join('|');\n  var rlen = res.length || 1;\n  if (rlen > 1) {\n    result = '(?:' + result + ')';\n    rlen = 1;\n  }\n  if (beg) {\n    rlen++;\n    if (beg.charAt(0) === '[') {\n      if (imbalanced) {\n        beg = '\\\\[' + beg.slice(1);\n      } else {\n        beg += ']';\n      }\n    }\n    result = beg + result;\n  }\n  if (end) {\n    rlen++;\n    if (end.slice(-1) === ']') {\n      if (imbalanced) {\n        end = end.slice(0, end.length - 1) + '\\\\]';\n      } else {\n        end = '[' + end;\n      }\n    }\n    result += end;\n  }\n  if (rlen > 1) {\n    result = result.split('][').join(']|[');\n    if (result.indexOf('|') !== -1 && !/\\(\\?/.test(result)) {\n      result = '(?:' + result + ')';\n    }\n  }\n  result = result.replace(/\\[+=|=\\]+/g, '\\\\b');\n  return result;\n}\nbrackets.makeRe = function (pattern) {\n  try {\n    return new RegExp(brackets(pattern));\n  } catch (err) {}\n};\nbrackets.isMatch = function (str, pattern) {\n  try {\n    return brackets.makeRe(pattern).test(str);\n  } catch (err) {\n    return false;\n  }\n};\nbrackets.match = function (arr, pattern) {\n  var len = arr.length,\n    i = 0;\n  var res = arr.slice();\n  var re = brackets.makeRe(pattern);\n  while (i < len) {\n    var ele = arr[i++];\n    if (!re.test(ele)) {\n      continue;\n    }\n    res.splice(i, 1);\n  }\n  return res;\n};","map":{"version":3,"names":["isPosixBracket","require","POSIX","alnum","alpha","blank","cntrl","digit","graph","lower","print","punct","space","upper","word","xdigit","module","exports","brackets","str","negated","indexOf","split","join","a","b","imbalanced","length","parts","len","i","end","beg","res","inner","prefix","ch","push","test","result","rlen","charAt","slice","replace","makeRe","pattern","RegExp","err","isMatch","match","arr","re","ele","splice"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/expand-brackets/index.js"],"sourcesContent":["/*!\n * expand-brackets <https://github.com/jonschlinkert/expand-brackets>\n *\n * Copyright (c) 2015 Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar isPosixBracket = require('is-posix-bracket');\n\n/**\n * POSIX character classes\n */\n\nvar POSIX = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E',\n  punct: '-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word:  'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9',\n};\n\n/**\n * Expose `brackets`\n */\n\nmodule.exports = brackets;\n\nfunction brackets(str) {\n  if (!isPosixBracket(str)) {\n    return str;\n  }\n\n  var negated = false;\n  if (str.indexOf('[^') !== -1) {\n    negated = true;\n    str = str.split('[^').join('[');\n  }\n  if (str.indexOf('[!') !== -1) {\n    negated = true;\n    str = str.split('[!').join('[');\n  }\n\n  var a = str.split('[');\n  var b = str.split(']');\n  var imbalanced = a.length !== b.length;\n\n  var parts = str.split(/(?::\\]\\[:|\\[?\\[:|:\\]\\]?)/);\n  var len = parts.length, i = 0;\n  var end = '', beg = '';\n  var res = [];\n\n  // start at the end (innermost) first\n  while (len--) {\n    var inner = parts[i++];\n    if (inner === '^[!' || inner === '[!') {\n      inner = '';\n      negated = true;\n    }\n\n    var prefix = negated ? '^' : '';\n    var ch = POSIX[inner];\n\n    if (ch) {\n      res.push('[' + prefix + ch + ']');\n    } else if (inner) {\n      if (/^\\[?\\w-\\w\\]?$/.test(inner)) {\n        if (i === parts.length) {\n          res.push('[' + prefix + inner);\n        } else if (i === 1) {\n          res.push(prefix + inner + ']');\n        } else {\n          res.push(prefix + inner);\n        }\n      } else {\n        if (i === 1) {\n          beg += inner;\n        } else if (i === parts.length) {\n          end += inner;\n        } else {\n          res.push('[' + prefix + inner + ']');\n        }\n      }\n    }\n  }\n\n  var result = res.join('|');\n  var rlen = res.length || 1;\n  if (rlen > 1) {\n    result = '(?:' + result + ')';\n    rlen = 1;\n  }\n  if (beg) {\n    rlen++;\n    if (beg.charAt(0) === '[') {\n      if (imbalanced) {\n        beg = '\\\\[' + beg.slice(1);\n      } else {\n        beg += ']';\n      }\n    }\n    result = beg + result;\n  }\n  if (end) {\n    rlen++;\n    if (end.slice(-1) === ']') {\n      if (imbalanced) {\n        end = end.slice(0, end.length - 1) + '\\\\]';\n      } else {\n        end = '[' + end;\n      }\n    }\n    result += end;\n  }\n\n  if (rlen > 1) {\n    result = result.split('][').join(']|[');\n    if (result.indexOf('|') !== -1 && !/\\(\\?/.test(result)) {\n      result = '(?:' + result + ')';\n    }\n  }\n\n  result = result.replace(/\\[+=|=\\]+/g, '\\\\b');\n  return result;\n}\n\nbrackets.makeRe = function(pattern) {\n  try {\n    return new RegExp(brackets(pattern));\n  } catch (err) {}\n};\n\nbrackets.isMatch = function(str, pattern) {\n  try {\n    return brackets.makeRe(pattern).test(str);\n  } catch (err) {\n    return false;\n  }\n};\n\nbrackets.match = function(arr, pattern) {\n  var len = arr.length, i = 0;\n  var res = arr.slice();\n\n  var re = brackets.makeRe(pattern);\n  while (i < len) {\n    var ele = arr[i++];\n    if (!re.test(ele)) {\n      continue;\n    }\n    res.splice(i, 1);\n  }\n  return res;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;;AAEA,IAAIC,KAAK,GAAG;EACVC,KAAK,EAAE,WAAW;EAClBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,MAAM;EACbC,KAAK,EAAE,kBAAkB;EACzBC,KAAK,EAAE,KAAK;EACZC,KAAK,EAAE,aAAa;EACpBC,KAAK,EAAE,KAAK;EACZC,KAAK,EAAE,aAAa;EACpBC,KAAK,EAAE,sCAAsC;EAC7CC,KAAK,EAAE,kBAAkB;EACzBC,KAAK,EAAE,KAAK;EACZC,IAAI,EAAG,YAAY;EACnBC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGC,QAAQ;AAEzB,SAASA,QAAQ,CAACC,GAAG,EAAE;EACrB,IAAI,CAACnB,cAAc,CAACmB,GAAG,CAAC,EAAE;IACxB,OAAOA,GAAG;EACZ;EAEA,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAID,GAAG,CAACE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5BD,OAAO,GAAG,IAAI;IACdD,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACjC;EACA,IAAIJ,GAAG,CAACE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5BD,OAAO,GAAG,IAAI;IACdD,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACjC;EAEA,IAAIC,CAAC,GAAGL,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;EACtB,IAAIG,CAAC,GAAGN,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;EACtB,IAAII,UAAU,GAAGF,CAAC,CAACG,MAAM,KAAKF,CAAC,CAACE,MAAM;EAEtC,IAAIC,KAAK,GAAGT,GAAG,CAACG,KAAK,CAAC,0BAA0B,CAAC;EACjD,IAAIO,GAAG,GAAGD,KAAK,CAACD,MAAM;IAAEG,CAAC,GAAG,CAAC;EAC7B,IAAIC,GAAG,GAAG,EAAE;IAAEC,GAAG,GAAG,EAAE;EACtB,IAAIC,GAAG,GAAG,EAAE;;EAEZ;EACA,OAAOJ,GAAG,EAAE,EAAE;IACZ,IAAIK,KAAK,GAAGN,KAAK,CAACE,CAAC,EAAE,CAAC;IACtB,IAAII,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,IAAI,EAAE;MACrCA,KAAK,GAAG,EAAE;MACVd,OAAO,GAAG,IAAI;IAChB;IAEA,IAAIe,MAAM,GAAGf,OAAO,GAAG,GAAG,GAAG,EAAE;IAC/B,IAAIgB,EAAE,GAAGlC,KAAK,CAACgC,KAAK,CAAC;IAErB,IAAIE,EAAE,EAAE;MACNH,GAAG,CAACI,IAAI,CAAC,GAAG,GAAGF,MAAM,GAAGC,EAAE,GAAG,GAAG,CAAC;IACnC,CAAC,MAAM,IAAIF,KAAK,EAAE;MAChB,IAAI,eAAe,CAACI,IAAI,CAACJ,KAAK,CAAC,EAAE;QAC/B,IAAIJ,CAAC,KAAKF,KAAK,CAACD,MAAM,EAAE;UACtBM,GAAG,CAACI,IAAI,CAAC,GAAG,GAAGF,MAAM,GAAGD,KAAK,CAAC;QAChC,CAAC,MAAM,IAAIJ,CAAC,KAAK,CAAC,EAAE;UAClBG,GAAG,CAACI,IAAI,CAACF,MAAM,GAAGD,KAAK,GAAG,GAAG,CAAC;QAChC,CAAC,MAAM;UACLD,GAAG,CAACI,IAAI,CAACF,MAAM,GAAGD,KAAK,CAAC;QAC1B;MACF,CAAC,MAAM;QACL,IAAIJ,CAAC,KAAK,CAAC,EAAE;UACXE,GAAG,IAAIE,KAAK;QACd,CAAC,MAAM,IAAIJ,CAAC,KAAKF,KAAK,CAACD,MAAM,EAAE;UAC7BI,GAAG,IAAIG,KAAK;QACd,CAAC,MAAM;UACLD,GAAG,CAACI,IAAI,CAAC,GAAG,GAAGF,MAAM,GAAGD,KAAK,GAAG,GAAG,CAAC;QACtC;MACF;IACF;EACF;EAEA,IAAIK,MAAM,GAAGN,GAAG,CAACV,IAAI,CAAC,GAAG,CAAC;EAC1B,IAAIiB,IAAI,GAAGP,GAAG,CAACN,MAAM,IAAI,CAAC;EAC1B,IAAIa,IAAI,GAAG,CAAC,EAAE;IACZD,MAAM,GAAG,KAAK,GAAGA,MAAM,GAAG,GAAG;IAC7BC,IAAI,GAAG,CAAC;EACV;EACA,IAAIR,GAAG,EAAE;IACPQ,IAAI,EAAE;IACN,IAAIR,GAAG,CAACS,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACzB,IAAIf,UAAU,EAAE;QACdM,GAAG,GAAG,KAAK,GAAGA,GAAG,CAACU,KAAK,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLV,GAAG,IAAI,GAAG;MACZ;IACF;IACAO,MAAM,GAAGP,GAAG,GAAGO,MAAM;EACvB;EACA,IAAIR,GAAG,EAAE;IACPS,IAAI,EAAE;IACN,IAAIT,GAAG,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACzB,IAAIhB,UAAU,EAAE;QACdK,GAAG,GAAGA,GAAG,CAACW,KAAK,CAAC,CAAC,EAAEX,GAAG,CAACJ,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK;MAC5C,CAAC,MAAM;QACLI,GAAG,GAAG,GAAG,GAAGA,GAAG;MACjB;IACF;IACAQ,MAAM,IAAIR,GAAG;EACf;EAEA,IAAIS,IAAI,GAAG,CAAC,EAAE;IACZD,MAAM,GAAGA,MAAM,CAACjB,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACvC,IAAIgB,MAAM,CAAClB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAACiB,IAAI,CAACC,MAAM,CAAC,EAAE;MACtDA,MAAM,GAAG,KAAK,GAAGA,MAAM,GAAG,GAAG;IAC/B;EACF;EAEAA,MAAM,GAAGA,MAAM,CAACI,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC;EAC5C,OAAOJ,MAAM;AACf;AAEArB,QAAQ,CAAC0B,MAAM,GAAG,UAASC,OAAO,EAAE;EAClC,IAAI;IACF,OAAO,IAAIC,MAAM,CAAC5B,QAAQ,CAAC2B,OAAO,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOE,GAAG,EAAE,CAAC;AACjB,CAAC;AAED7B,QAAQ,CAAC8B,OAAO,GAAG,UAAS7B,GAAG,EAAE0B,OAAO,EAAE;EACxC,IAAI;IACF,OAAO3B,QAAQ,CAAC0B,MAAM,CAACC,OAAO,CAAC,CAACP,IAAI,CAACnB,GAAG,CAAC;EAC3C,CAAC,CAAC,OAAO4B,GAAG,EAAE;IACZ,OAAO,KAAK;EACd;AACF,CAAC;AAED7B,QAAQ,CAAC+B,KAAK,GAAG,UAASC,GAAG,EAAEL,OAAO,EAAE;EACtC,IAAIhB,GAAG,GAAGqB,GAAG,CAACvB,MAAM;IAAEG,CAAC,GAAG,CAAC;EAC3B,IAAIG,GAAG,GAAGiB,GAAG,CAACR,KAAK,EAAE;EAErB,IAAIS,EAAE,GAAGjC,QAAQ,CAAC0B,MAAM,CAACC,OAAO,CAAC;EACjC,OAAOf,CAAC,GAAGD,GAAG,EAAE;IACd,IAAIuB,GAAG,GAAGF,GAAG,CAACpB,CAAC,EAAE,CAAC;IAClB,IAAI,CAACqB,EAAE,CAACb,IAAI,CAACc,GAAG,CAAC,EAAE;MACjB;IACF;IACAnB,GAAG,CAACoB,MAAM,CAACvB,CAAC,EAAE,CAAC,CAAC;EAClB;EACA,OAAOG,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"script"}