{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar debug = require('debug')('engine:socket');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Client class (abstract).\n *\n * @api private\n */\n\nfunction Socket(id, server, transport, req) {\n  this.id = id;\n  this.server = server;\n  this.upgrading = false;\n  this.upgraded = false;\n  this.readyState = 'opening';\n  this.writeBuffer = [];\n  this.packetsFn = [];\n  this.sentCallbackFn = [];\n  this.cleanupFn = [];\n  this.request = req;\n\n  // Cache IP since it might not be in the req later\n  if (req.websocket && req.websocket._socket) {\n    this.remoteAddress = req.websocket._socket.remoteAddress;\n  } else {\n    this.remoteAddress = req.connection.remoteAddress;\n  }\n  this.checkIntervalTimer = null;\n  this.upgradeTimeoutTimer = null;\n  this.pingTimeoutTimer = null;\n  this.setTransport(transport);\n  this.onOpen();\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Socket, EventEmitter);\n\n/**\n * Called upon transport considered open.\n *\n * @api private\n */\n\nSocket.prototype.onOpen = function () {\n  this.readyState = 'open';\n\n  // sends an `open` packet\n  this.transport.sid = this.id;\n  this.sendPacket('open', JSON.stringify({\n    sid: this.id,\n    upgrades: this.getAvailableUpgrades(),\n    pingInterval: this.server.pingInterval,\n    pingTimeout: this.server.pingTimeout\n  }));\n  if (this.server.initialPacket) {\n    this.sendPacket('message', this.server.initialPacket);\n  }\n  this.emit('open');\n  this.setPingTimeout();\n};\n\n/**\n * Called upon transport packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('open' === this.readyState) {\n    // export packet event\n    debug('packet');\n    this.emit('packet', packet);\n\n    // Reset ping timeout on any packet, incoming data is a good sign of\n    // other side's liveness\n    this.setPingTimeout();\n    switch (packet.type) {\n      case 'ping':\n        debug('got ping');\n        this.sendPacket('pong');\n        this.emit('heartbeat');\n        break;\n      case 'error':\n        this.onClose('parse error');\n        break;\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with closed socket');\n  }\n};\n\n/**\n * Called upon transport error.\n *\n * @param {Error} error object\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('transport error');\n  this.onClose('transport error', err);\n};\n\n/**\n * Sets and resets ping timeout timer based on client pings.\n *\n * @api private\n */\n\nSocket.prototype.setPingTimeout = function () {\n  var self = this;\n  clearTimeout(self.pingTimeoutTimer);\n  self.pingTimeoutTimer = setTimeout(function () {\n    self.onClose('ping timeout');\n  }, self.server.pingInterval + self.server.pingTimeout);\n};\n\n/**\n * Attaches handlers for the given transport.\n *\n * @param {Transport} transport\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  var onError = this.onError.bind(this);\n  var onPacket = this.onPacket.bind(this);\n  var flush = this.flush.bind(this);\n  var onClose = this.onClose.bind(this, 'transport close');\n  this.transport = transport;\n  this.transport.once('error', onError);\n  this.transport.on('packet', onPacket);\n  this.transport.on('drain', flush);\n  this.transport.once('close', onClose);\n  // this function will manage packet events (also message callbacks)\n  this.setupSendCallback();\n  this.cleanupFn.push(function () {\n    transport.removeListener('error', onError);\n    transport.removeListener('packet', onPacket);\n    transport.removeListener('drain', flush);\n    transport.removeListener('close', onClose);\n  });\n};\n\n/**\n * Upgrades socket to the given transport\n *\n * @param {Transport} transport\n * @api private\n */\n\nSocket.prototype.maybeUpgrade = function (transport) {\n  debug('might upgrade socket transport from \"%s\" to \"%s\"', this.transport.name, transport.name);\n  this.upgrading = true;\n  var self = this;\n\n  // set transport upgrade timer\n  self.upgradeTimeoutTimer = setTimeout(function () {\n    debug('client did not complete upgrade - closing transport');\n    cleanup();\n    if ('open' === transport.readyState) {\n      transport.close();\n    }\n  }, this.server.upgradeTimeout);\n  function onPacket(packet) {\n    if ('ping' === packet.type && 'probe' === packet.data) {\n      transport.send([{\n        type: 'pong',\n        data: 'probe'\n      }]);\n      self.emit('upgrading', transport);\n      clearInterval(self.checkIntervalTimer);\n      self.checkIntervalTimer = setInterval(check, 100);\n    } else if ('upgrade' === packet.type && self.readyState !== 'closed') {\n      debug('got upgrade packet - upgrading');\n      cleanup();\n      self.transport.discard();\n      self.upgraded = true;\n      self.clearTransport();\n      self.setTransport(transport);\n      self.emit('upgrade', transport);\n      self.setPingTimeout();\n      self.flush();\n      if (self.readyState === 'closing') {\n        transport.close(function () {\n          self.onClose('forced close');\n        });\n      }\n    } else {\n      cleanup();\n      transport.close();\n    }\n  }\n\n  // we force a polling cycle to ensure a fast upgrade\n  function check() {\n    if ('polling' === self.transport.name && self.transport.writable) {\n      debug('writing a noop packet to polling for fast upgrade');\n      self.transport.send([{\n        type: 'noop'\n      }]);\n    }\n  }\n  function cleanup() {\n    self.upgrading = false;\n    clearInterval(self.checkIntervalTimer);\n    self.checkIntervalTimer = null;\n    clearTimeout(self.upgradeTimeoutTimer);\n    self.upgradeTimeoutTimer = null;\n    transport.removeListener('packet', onPacket);\n    transport.removeListener('close', onTransportClose);\n    transport.removeListener('error', onError);\n    self.removeListener('close', onClose);\n  }\n  function onError(err) {\n    debug('client did not complete upgrade - %s', err);\n    cleanup();\n    transport.close();\n    transport = null;\n  }\n  function onTransportClose() {\n    onError('transport closed');\n  }\n  function onClose() {\n    onError('socket closed');\n  }\n  transport.on('packet', onPacket);\n  transport.once('close', onTransportClose);\n  transport.once('error', onError);\n  self.once('close', onClose);\n};\n\n/**\n * Clears listeners and timers associated with current transport.\n *\n * @api private\n */\n\nSocket.prototype.clearTransport = function () {\n  var cleanup;\n  var toCleanUp = this.cleanupFn.length;\n  for (var i = 0; i < toCleanUp; i++) {\n    cleanup = this.cleanupFn.shift();\n    cleanup();\n  }\n\n  // silence further transport errors and prevent uncaught exceptions\n  this.transport.on('error', function () {\n    debug('error triggered by discarded transport');\n  });\n\n  // ensure transport won't stay open\n  this.transport.close();\n  clearTimeout(this.pingTimeoutTimer);\n};\n\n/**\n * Called upon transport considered closed.\n * Possible reasons: `ping timeout`, `client error`, `parse error`,\n * `transport error`, `server close`, `transport close`\n */\n\nSocket.prototype.onClose = function (reason, description) {\n  if ('closed' !== this.readyState) {\n    this.readyState = 'closed';\n    clearTimeout(this.pingTimeoutTimer);\n    clearInterval(this.checkIntervalTimer);\n    this.checkIntervalTimer = null;\n    clearTimeout(this.upgradeTimeoutTimer);\n    var self = this;\n    // clean writeBuffer in next tick, so developers can still\n    // grab the writeBuffer on 'close' event\n    process.nextTick(function () {\n      self.writeBuffer = [];\n    });\n    this.packetsFn = [];\n    this.sentCallbackFn = [];\n    this.clearTransport();\n    this.emit('close', reason, description);\n  }\n};\n\n/**\n * Setup and manage send callback\n *\n * @api private\n */\n\nSocket.prototype.setupSendCallback = function () {\n  var self = this;\n  this.transport.on('drain', onDrain);\n  this.cleanupFn.push(function () {\n    self.transport.removeListener('drain', onDrain);\n  });\n\n  // the message was sent successfully, execute the callback\n  function onDrain() {\n    if (self.sentCallbackFn.length > 0) {\n      var seqFn = self.sentCallbackFn.splice(0, 1)[0];\n      if ('function' === typeof seqFn) {\n        debug('executing send callback');\n        seqFn(self.transport);\n      } else if (Array.isArray(seqFn)) {\n        debug('executing batch send callback');\n        for (var l = seqFn.length, i = 0; i < l; i++) {\n          if ('function' === typeof seqFn[i]) {\n            seqFn[i](self.transport);\n          }\n        }\n      }\n    }\n  }\n};\n\n/**\n * Sends a message packet.\n *\n * @param {String} message\n * @param {Object} options\n * @param {Function} callback\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.send = Socket.prototype.write = function (data, options, callback) {\n  this.sendPacket('message', data, options, callback);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type\n * @param {String} optional, data\n * @param {Object} options\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, callback) {\n  if ('function' === typeof options) {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n  options.compress = false !== options.compress;\n  if ('closing' !== this.readyState && 'closed' !== this.readyState) {\n    debug('sending packet \"%s\" (%s)', type, data);\n    var packet = {\n      type: type,\n      options: options\n    };\n    if (data) packet.data = data;\n\n    // exports packetCreate event\n    this.emit('packetCreate', packet);\n    this.writeBuffer.push(packet);\n\n    // add send callback to object, if defined\n    if (callback) this.packetsFn.push(callback);\n    this.flush();\n  }\n};\n\n/**\n * Attempts to flush the packets buffer.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState && this.transport.writable && this.writeBuffer.length) {\n    debug('flushing buffer to transport');\n    this.emit('flush', this.writeBuffer);\n    this.server.emit('flush', this, this.writeBuffer);\n    var wbuf = this.writeBuffer;\n    this.writeBuffer = [];\n    if (!this.transport.supportsFraming) {\n      this.sentCallbackFn.push(this.packetsFn);\n    } else {\n      this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);\n    }\n    this.packetsFn = [];\n    this.transport.send(wbuf);\n    this.emit('drain');\n    this.server.emit('drain', this);\n  }\n};\n\n/**\n * Get available upgrades for this socket.\n *\n * @api private\n */\n\nSocket.prototype.getAvailableUpgrades = function () {\n  var availableUpgrades = [];\n  var allUpgrades = this.server.upgrades(this.transport.name);\n  for (var i = 0, l = allUpgrades.length; i < l; ++i) {\n    var upg = allUpgrades[i];\n    if (this.server.transports.indexOf(upg) !== -1) {\n      availableUpgrades.push(upg);\n    }\n  }\n  return availableUpgrades;\n};\n\n/**\n * Closes the socket and underlying transport.\n *\n * @param {Boolean} optional, discard\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.close = function (discard) {\n  if ('open' !== this.readyState) return;\n  this.readyState = 'closing';\n  if (this.writeBuffer.length) {\n    this.once('drain', this.closeTransport.bind(this, discard));\n    return;\n  }\n  this.closeTransport(discard);\n};\n\n/**\n * Closes the underlying transport.\n *\n * @param {Boolean} discard\n * @api private\n */\n\nSocket.prototype.closeTransport = function (discard) {\n  if (discard) this.transport.discard();\n  this.transport.close(this.onClose.bind(this, 'forced close'));\n};","map":{"version":3,"names":["EventEmitter","require","util","debug","module","exports","Socket","id","server","transport","req","upgrading","upgraded","readyState","writeBuffer","packetsFn","sentCallbackFn","cleanupFn","request","websocket","_socket","remoteAddress","connection","checkIntervalTimer","upgradeTimeoutTimer","pingTimeoutTimer","setTransport","onOpen","inherits","prototype","sid","sendPacket","JSON","stringify","upgrades","getAvailableUpgrades","pingInterval","pingTimeout","initialPacket","emit","setPingTimeout","onPacket","packet","type","onClose","data","onError","err","self","clearTimeout","setTimeout","bind","flush","once","on","setupSendCallback","push","removeListener","maybeUpgrade","name","cleanup","close","upgradeTimeout","send","clearInterval","setInterval","check","discard","clearTransport","writable","onTransportClose","toCleanUp","length","i","shift","reason","description","process","nextTick","onDrain","seqFn","splice","Array","isArray","l","write","options","callback","compress","wbuf","supportsFraming","apply","availableUpgrades","allUpgrades","upg","transports","indexOf","closeTransport"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/engine.io/lib/socket.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar debug = require('debug')('engine:socket');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Client class (abstract).\n *\n * @api private\n */\n\nfunction Socket (id, server, transport, req) {\n  this.id = id;\n  this.server = server;\n  this.upgrading = false;\n  this.upgraded = false;\n  this.readyState = 'opening';\n  this.writeBuffer = [];\n  this.packetsFn = [];\n  this.sentCallbackFn = [];\n  this.cleanupFn = [];\n  this.request = req;\n\n  // Cache IP since it might not be in the req later\n  if (req.websocket && req.websocket._socket) {\n    this.remoteAddress = req.websocket._socket.remoteAddress;\n  } else {\n    this.remoteAddress = req.connection.remoteAddress;\n  }\n\n  this.checkIntervalTimer = null;\n  this.upgradeTimeoutTimer = null;\n  this.pingTimeoutTimer = null;\n\n  this.setTransport(transport);\n  this.onOpen();\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Socket, EventEmitter);\n\n/**\n * Called upon transport considered open.\n *\n * @api private\n */\n\nSocket.prototype.onOpen = function () {\n  this.readyState = 'open';\n\n  // sends an `open` packet\n  this.transport.sid = this.id;\n  this.sendPacket('open', JSON.stringify({\n    sid: this.id,\n    upgrades: this.getAvailableUpgrades(),\n    pingInterval: this.server.pingInterval,\n    pingTimeout: this.server.pingTimeout\n  }));\n\n  if (this.server.initialPacket) {\n    this.sendPacket('message', this.server.initialPacket);\n  }\n\n  this.emit('open');\n  this.setPingTimeout();\n};\n\n/**\n * Called upon transport packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('open' === this.readyState) {\n    // export packet event\n    debug('packet');\n    this.emit('packet', packet);\n\n    // Reset ping timeout on any packet, incoming data is a good sign of\n    // other side's liveness\n    this.setPingTimeout();\n\n    switch (packet.type) {\n      case 'ping':\n        debug('got ping');\n        this.sendPacket('pong');\n        this.emit('heartbeat');\n        break;\n\n      case 'error':\n        this.onClose('parse error');\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with closed socket');\n  }\n};\n\n/**\n * Called upon transport error.\n *\n * @param {Error} error object\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('transport error');\n  this.onClose('transport error', err);\n};\n\n/**\n * Sets and resets ping timeout timer based on client pings.\n *\n * @api private\n */\n\nSocket.prototype.setPingTimeout = function () {\n  var self = this;\n  clearTimeout(self.pingTimeoutTimer);\n  self.pingTimeoutTimer = setTimeout(function () {\n    self.onClose('ping timeout');\n  }, self.server.pingInterval + self.server.pingTimeout);\n};\n\n/**\n * Attaches handlers for the given transport.\n *\n * @param {Transport} transport\n * @api private\n */\n\nSocket.prototype.setTransport = function (transport) {\n  var onError = this.onError.bind(this);\n  var onPacket = this.onPacket.bind(this);\n  var flush = this.flush.bind(this);\n  var onClose = this.onClose.bind(this, 'transport close');\n\n  this.transport = transport;\n  this.transport.once('error', onError);\n  this.transport.on('packet', onPacket);\n  this.transport.on('drain', flush);\n  this.transport.once('close', onClose);\n  // this function will manage packet events (also message callbacks)\n  this.setupSendCallback();\n\n  this.cleanupFn.push(function () {\n    transport.removeListener('error', onError);\n    transport.removeListener('packet', onPacket);\n    transport.removeListener('drain', flush);\n    transport.removeListener('close', onClose);\n  });\n};\n\n/**\n * Upgrades socket to the given transport\n *\n * @param {Transport} transport\n * @api private\n */\n\nSocket.prototype.maybeUpgrade = function (transport) {\n  debug('might upgrade socket transport from \"%s\" to \"%s\"'\n    , this.transport.name, transport.name);\n\n  this.upgrading = true;\n\n  var self = this;\n\n  // set transport upgrade timer\n  self.upgradeTimeoutTimer = setTimeout(function () {\n    debug('client did not complete upgrade - closing transport');\n    cleanup();\n    if ('open' === transport.readyState) {\n      transport.close();\n    }\n  }, this.server.upgradeTimeout);\n\n  function onPacket (packet) {\n    if ('ping' === packet.type && 'probe' === packet.data) {\n      transport.send([{ type: 'pong', data: 'probe' }]);\n      self.emit('upgrading', transport);\n      clearInterval(self.checkIntervalTimer);\n      self.checkIntervalTimer = setInterval(check, 100);\n    } else if ('upgrade' === packet.type && self.readyState !== 'closed') {\n      debug('got upgrade packet - upgrading');\n      cleanup();\n      self.transport.discard();\n      self.upgraded = true;\n      self.clearTransport();\n      self.setTransport(transport);\n      self.emit('upgrade', transport);\n      self.setPingTimeout();\n      self.flush();\n      if (self.readyState === 'closing') {\n        transport.close(function () {\n          self.onClose('forced close');\n        });\n      }\n    } else {\n      cleanup();\n      transport.close();\n    }\n  }\n\n  // we force a polling cycle to ensure a fast upgrade\n  function check () {\n    if ('polling' === self.transport.name && self.transport.writable) {\n      debug('writing a noop packet to polling for fast upgrade');\n      self.transport.send([{ type: 'noop' }]);\n    }\n  }\n\n  function cleanup () {\n    self.upgrading = false;\n\n    clearInterval(self.checkIntervalTimer);\n    self.checkIntervalTimer = null;\n\n    clearTimeout(self.upgradeTimeoutTimer);\n    self.upgradeTimeoutTimer = null;\n\n    transport.removeListener('packet', onPacket);\n    transport.removeListener('close', onTransportClose);\n    transport.removeListener('error', onError);\n    self.removeListener('close', onClose);\n  }\n\n  function onError (err) {\n    debug('client did not complete upgrade - %s', err);\n    cleanup();\n    transport.close();\n    transport = null;\n  }\n\n  function onTransportClose () {\n    onError('transport closed');\n  }\n\n  function onClose () {\n    onError('socket closed');\n  }\n\n  transport.on('packet', onPacket);\n  transport.once('close', onTransportClose);\n  transport.once('error', onError);\n\n  self.once('close', onClose);\n};\n\n/**\n * Clears listeners and timers associated with current transport.\n *\n * @api private\n */\n\nSocket.prototype.clearTransport = function () {\n  var cleanup;\n\n  var toCleanUp = this.cleanupFn.length;\n\n  for (var i = 0; i < toCleanUp; i++) {\n    cleanup = this.cleanupFn.shift();\n    cleanup();\n  }\n\n  // silence further transport errors and prevent uncaught exceptions\n  this.transport.on('error', function () {\n    debug('error triggered by discarded transport');\n  });\n\n  // ensure transport won't stay open\n  this.transport.close();\n\n  clearTimeout(this.pingTimeoutTimer);\n};\n\n/**\n * Called upon transport considered closed.\n * Possible reasons: `ping timeout`, `client error`, `parse error`,\n * `transport error`, `server close`, `transport close`\n */\n\nSocket.prototype.onClose = function (reason, description) {\n  if ('closed' !== this.readyState) {\n    this.readyState = 'closed';\n    clearTimeout(this.pingTimeoutTimer);\n    clearInterval(this.checkIntervalTimer);\n    this.checkIntervalTimer = null;\n    clearTimeout(this.upgradeTimeoutTimer);\n    var self = this;\n    // clean writeBuffer in next tick, so developers can still\n    // grab the writeBuffer on 'close' event\n    process.nextTick(function () {\n      self.writeBuffer = [];\n    });\n    this.packetsFn = [];\n    this.sentCallbackFn = [];\n    this.clearTransport();\n    this.emit('close', reason, description);\n  }\n};\n\n/**\n * Setup and manage send callback\n *\n * @api private\n */\n\nSocket.prototype.setupSendCallback = function () {\n  var self = this;\n  this.transport.on('drain', onDrain);\n\n  this.cleanupFn.push(function () {\n    self.transport.removeListener('drain', onDrain);\n  });\n\n  // the message was sent successfully, execute the callback\n  function onDrain () {\n    if (self.sentCallbackFn.length > 0) {\n      var seqFn = self.sentCallbackFn.splice(0, 1)[0];\n      if ('function' === typeof seqFn) {\n        debug('executing send callback');\n        seqFn(self.transport);\n      } else if (Array.isArray(seqFn)) {\n        debug('executing batch send callback');\n        for (var l = seqFn.length, i = 0; i < l; i++) {\n          if ('function' === typeof seqFn[i]) {\n            seqFn[i](self.transport);\n          }\n        }\n      }\n    }\n  }\n};\n\n/**\n * Sends a message packet.\n *\n * @param {String} message\n * @param {Object} options\n * @param {Function} callback\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.send =\nSocket.prototype.write = function (data, options, callback) {\n  this.sendPacket('message', data, options, callback);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type\n * @param {String} optional, data\n * @param {Object} options\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, options, callback) {\n  if ('function' === typeof options) {\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n  options.compress = false !== options.compress;\n\n  if ('closing' !== this.readyState && 'closed' !== this.readyState) {\n    debug('sending packet \"%s\" (%s)', type, data);\n\n    var packet = {\n      type: type,\n      options: options\n    };\n    if (data) packet.data = data;\n\n    // exports packetCreate event\n    this.emit('packetCreate', packet);\n\n    this.writeBuffer.push(packet);\n\n    // add send callback to object, if defined\n    if (callback) this.packetsFn.push(callback);\n\n    this.flush();\n  }\n};\n\n/**\n * Attempts to flush the packets buffer.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' !== this.readyState &&\n                this.transport.writable &&\n                this.writeBuffer.length) {\n    debug('flushing buffer to transport');\n    this.emit('flush', this.writeBuffer);\n    this.server.emit('flush', this, this.writeBuffer);\n    var wbuf = this.writeBuffer;\n    this.writeBuffer = [];\n    if (!this.transport.supportsFraming) {\n      this.sentCallbackFn.push(this.packetsFn);\n    } else {\n      this.sentCallbackFn.push.apply(this.sentCallbackFn, this.packetsFn);\n    }\n    this.packetsFn = [];\n    this.transport.send(wbuf);\n    this.emit('drain');\n    this.server.emit('drain', this);\n  }\n};\n\n/**\n * Get available upgrades for this socket.\n *\n * @api private\n */\n\nSocket.prototype.getAvailableUpgrades = function () {\n  var availableUpgrades = [];\n  var allUpgrades = this.server.upgrades(this.transport.name);\n  for (var i = 0, l = allUpgrades.length; i < l; ++i) {\n    var upg = allUpgrades[i];\n    if (this.server.transports.indexOf(upg) !== -1) {\n      availableUpgrades.push(upg);\n    }\n  }\n  return availableUpgrades;\n};\n\n/**\n * Closes the socket and underlying transport.\n *\n * @param {Boolean} optional, discard\n * @return {Socket} for chaining\n * @api public\n */\n\nSocket.prototype.close = function (discard) {\n  if ('open' !== this.readyState) return;\n\n  this.readyState = 'closing';\n\n  if (this.writeBuffer.length) {\n    this.once('drain', this.closeTransport.bind(this, discard));\n    return;\n  }\n\n  this.closeTransport(discard);\n};\n\n/**\n * Closes the underlying transport.\n *\n * @param {Boolean} discard\n * @api private\n */\n\nSocket.prototype.closeTransport = function (discard) {\n  if (discard) this.transport.discard();\n  this.transport.close(this.onClose.bind(this, 'forced close'));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}