{"ast":null,"code":"var minimatch = require(\"minimatch\");\nvar utils = exports;\nutils.applyRules = function overwriteBody(rules, body, req, res) {\n  return rules.reduce(function (body, rule) {\n    /**\n     * Try to use the replace string/fn first\n     */\n    if (rule.replace || typeof rule.replace === \"string\") {\n      rule.fn = rule.replace;\n    }\n    if (typeof rule.fn === 'string') {\n      return body.replace(rule.match, rule.fn);\n    }\n    return body.replace(rule.match, function () {\n      var args = Array.prototype.slice.call(arguments);\n      if (typeof rule.fn === 'function') {\n        return rule.fn.apply(this, [req, res].concat(args));\n      }\n      return rule.fn;\n    });\n  }, body);\n};\n\n/**\n * Extensions that will be ignored by default\n * @type {Array}\n */\nutils.defaultIgnoreTypes = [\n// text files\n\"js\", \"json\", \"css\",\n// image files\n\"png\", \"jpg\", \"jpeg\", \"gif\", \"ico\", \"tif\", \"tiff\", \"bmp\", \"webp\", \"psd\",\n// vector & font\n\"svg\", \"woff\", \"ttf\", \"otf\", \"eot\", \"eps\", \"ps\", \"ai\",\n// audio\n\"mp3\", \"wav\", \"aac\", \"m4a\", \"m3u\", \"mid\", \"wma\",\n// video & other media\n\"mpg\", \"mpeg\", \"mp4\", \"m4v\", \"webm\", \"swf\", \"flv\", \"avi\", \"mov\", \"wmv\",\n// document files\n\"pdf\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"pps\", \"ppt\", \"pptx\", \"odt\", \"ods\", \"odp\", \"pages\", \"key\", \"rtf\", \"txt\", \"csv\",\n// data files\n\"zip\", \"rar\", \"tar\", \"gz\", \"xml\", \"app\", \"exe\", \"jar\", \"dmg\", \"pkg\", \"iso\"].map(function (ext) {\n  return \"\\\\.\" + ext + \"(\\\\?.*)?$\";\n});\n\n/**\n * Check if a URL was white-listed\n * @param url\n * @param whitelist\n * @returns {boolean}\n */\nutils.isWhitelisted = function isWhitelisted(url, whitelist) {\n  if (whitelist.indexOf(url) > -1) {\n    return true;\n  }\n  return whitelist.some(function (pattern) {\n    return minimatch(url, pattern);\n  });\n};\n\n/**\n * Check if a URL was white-listed with single path\n * @param url\n * @param rules\n * @returns {Array}\n */\nutils.isWhiteListedForSingle = function isWhiteListedForSingle(url, rules) {\n  return rules.filter(function (item) {\n    return item.paths && utils.isWhitelisted(url, utils.toArray(item.paths));\n  });\n};\n\n/**\n * Determine if a response should be overwritten\n * @param {String} url\n * @param {Object} opts\n * @returns {boolean}\n */\nutils.inBlackList = function inBlackList(url, opts) {\n  // First check for an exact match\n  if (!url || opts.blacklist.indexOf(url) > -1) {\n    return true;\n  }\n  if (url.length === 1 && url === \"/\") {\n    return false;\n  }\n\n  // Check the path only\n  var split = url.split('?')[0];\n\n  // second, check that the URL does not contain a\n  // file extension that should be ignored by default\n  if (opts.ignore.some(function (pattern) {\n    return new RegExp(pattern).test(split);\n  })) {\n    return true;\n  }\n\n  // Finally, check any mini-match patterns for paths that have been excluded\n  if (opts.blacklist.some(function (pattern) {\n    return minimatch(url, pattern);\n  })) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @param req\n * @returns {Boolean}\n */\nutils.hasAcceptHeaders = function hasAcceptHeaders(req) {\n  var acceptHeader = req.headers[\"accept\"];\n  if (!acceptHeader) {\n    return false;\n  }\n  return acceptHeader.indexOf(\"html\") > -1;\n};\n\n/**\n * @param body\n * @returns {boolean}\n */\nutils.snip = function snip(body) {\n  if (!body) {\n    return false;\n  }\n};\nutils.toArray = function toArray(item) {\n  if (!item) {\n    return item;\n  }\n  if (!Array.isArray(item)) {\n    return [item];\n  }\n  return item;\n};\nutils.isHtml = function isHtml(str) {\n  if (!str) {\n    return false;\n  }\n  // Test to see if start of file contents matches:\n  // - Optional byte-order mark (BOM)\n  // - Zero or more spaces\n  // - Any sort of HTML tag, comment, or doctype tag (basically, <...>)\n  return /^(\\uFEFF|\\uFFFE)?\\s*<[^>]+>/i.test(str);\n};","map":{"version":3,"names":["minimatch","require","utils","exports","applyRules","overwriteBody","rules","body","req","res","reduce","rule","replace","fn","match","args","Array","prototype","slice","call","arguments","apply","concat","defaultIgnoreTypes","map","ext","isWhitelisted","url","whitelist","indexOf","some","pattern","isWhiteListedForSingle","filter","item","paths","toArray","inBlackList","opts","blacklist","length","split","ignore","RegExp","test","hasAcceptHeaders","acceptHeader","headers","snip","isArray","isHtml","str"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/resp-modifier/lib/utils.js"],"sourcesContent":["var minimatch = require(\"minimatch\");\nvar utils     = exports;\n\nutils.applyRules = function overwriteBody (rules, body, req, res) {\n    return rules.reduce(function (body, rule) {\n        /**\n         * Try to use the replace string/fn first\n         */\n        if (rule.replace || typeof rule.replace === \"string\") {\n            rule.fn = rule.replace;\n        }\n        if (typeof rule.fn === 'string') {\n            return body.replace(rule.match, rule.fn);\n        }\n        return body.replace(rule.match, function () {\n            var args = Array.prototype.slice.call(arguments);\n            if (typeof rule.fn === 'function') {\n        \t    return rule.fn.apply(this, [req, res].concat(args))\n            }\n            return rule.fn;\n        });\n    }, body);\n};\n\n/**\n * Extensions that will be ignored by default\n * @type {Array}\n */\nutils.defaultIgnoreTypes = [\n    // text files\n    \"js\", \"json\", \"css\",\n    // image files\n    \"png\", \"jpg\", \"jpeg\", \"gif\", \"ico\", \"tif\", \"tiff\", \"bmp\", \"webp\", \"psd\",\n    // vector & font\n    \"svg\", \"woff\", \"ttf\", \"otf\", \"eot\", \"eps\", \"ps\", \"ai\",\n    // audio\n    \"mp3\", \"wav\", \"aac\", \"m4a\", \"m3u\", \"mid\", \"wma\",\n    // video & other media\n    \"mpg\", \"mpeg\", \"mp4\", \"m4v\", \"webm\", \"swf\", \"flv\", \"avi\", \"mov\", \"wmv\",\n    // document files\n    \"pdf\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"pps\", \"ppt\", \"pptx\", \"odt\", \"ods\", \"odp\", \"pages\", \"key\", \"rtf\", \"txt\", \"csv\",\n    // data files\n    \"zip\", \"rar\", \"tar\", \"gz\", \"xml\", \"app\", \"exe\", \"jar\", \"dmg\", \"pkg\", \"iso\"\n].map(function (ext) {\n        return \"\\\\.\" + ext + \"(\\\\?.*)?$\";\n    });\n\n/**\n * Check if a URL was white-listed\n * @param url\n * @param whitelist\n * @returns {boolean}\n */\nutils.isWhitelisted = function isWhitelisted(url, whitelist) {\n\n    if (whitelist.indexOf(url) > -1) {\n        return true;\n    }\n\n    return whitelist.some(function (pattern) {\n        return minimatch(url, pattern);\n    });\n};\n\n/**\n * Check if a URL was white-listed with single path\n * @param url\n * @param rules\n * @returns {Array}\n */\nutils.isWhiteListedForSingle = function isWhiteListedForSingle(url, rules) {\n\n    return rules.filter(function (item) {\n        return item.paths && utils.isWhitelisted(url, utils.toArray(item.paths));\n    });\n};\n\n/**\n * Determine if a response should be overwritten\n * @param {String} url\n * @param {Object} opts\n * @returns {boolean}\n */\nutils.inBlackList = function inBlackList(url, opts) {\n\n    // First check for an exact match\n    if (!url || opts.blacklist.indexOf(url) > -1) {\n        return true;\n    }\n\n    if (url.length === 1 && url === \"/\") {\n        return false;\n    }\n\n    // Check the path only\n    var split = url.split('?')[0];\n\n    // second, check that the URL does not contain a\n    // file extension that should be ignored by default\n    if (opts.ignore.some(function (pattern) {\n            return new RegExp(pattern).test(split);\n        })) {\n        return true;\n    }\n\n    // Finally, check any mini-match patterns for paths that have been excluded\n    if (opts.blacklist.some(function (pattern) {\n            return minimatch(url, pattern);\n        })) {\n        return true;\n    }\n\n    return false;\n};\n\n/**\n * @param req\n * @returns {Boolean}\n */\nutils.hasAcceptHeaders = function hasAcceptHeaders(req) {\n    var acceptHeader = req.headers[\"accept\"];\n    if (!acceptHeader) {\n        return false;\n    }\n    return acceptHeader.indexOf(\"html\") > -1;\n};\n\n/**\n * @param body\n * @returns {boolean}\n */\nutils.snip = function snip(body) {\n    if (!body) {\n        return false;\n    }\n};\n\nutils.toArray = function toArray(item) {\n    if (!item) {\n        return item;\n    }\n    if (!Array.isArray(item)) {\n        return [item];\n    }\n    return item;\n};\n\nutils.isHtml = function isHtml(str) {\n    if (!str) {\n        return false;\n    }\n    // Test to see if start of file contents matches:\n    // - Optional byte-order mark (BOM)\n    // - Zero or more spaces\n    // - Any sort of HTML tag, comment, or doctype tag (basically, <...>)\n    return /^(\\uFEFF|\\uFFFE)?\\s*<[^>]+>/i.test(str);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}