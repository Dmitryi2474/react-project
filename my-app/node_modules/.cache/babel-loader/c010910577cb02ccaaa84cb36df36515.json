{"ast":null,"code":"'use strict';\n\nvar licenses = [].concat(require('spdx-license-ids')).concat(require('spdx-license-ids/deprecated'));\nvar exceptions = require('spdx-exceptions');\nmodule.exports = function (source) {\n  var index = 0;\n  function hasMore() {\n    return index < source.length;\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read(value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index);\n      var match = chars.match(value);\n      if (match) {\n        index += match[0].length;\n        return match[0];\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length;\n        return value;\n      }\n    }\n  }\n  function skipWhitespace() {\n    read(/[ ]*/);\n  }\n  function operator() {\n    var string;\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+'];\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i]);\n      if (string) {\n        break;\n      }\n    }\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`');\n    }\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    };\n  }\n  function idstring() {\n    return read(/[A-Za-z0-9-.]+/);\n  }\n  function expectIdstring() {\n    var string = idstring();\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index);\n    }\n    return string;\n  }\n  function documentRef() {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'DOCUMENTREF',\n        string: string\n      };\n    }\n  }\n  function licenseRef() {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'LICENSEREF',\n        string: string\n      };\n    }\n  }\n  function identifier() {\n    var begin = index;\n    var string = idstring();\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      };\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      };\n    }\n    index = begin;\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken() {\n    // Ordering matters\n    return operator() || documentRef() || licenseRef() || identifier();\n  }\n  var tokens = [];\n  while (hasMore()) {\n    skipWhitespace();\n    if (!hasMore()) {\n      break;\n    }\n    var token = parseToken();\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] + '` at offset ' + index);\n    }\n    tokens.push(token);\n  }\n  return tokens;\n};","map":{"version":3,"names":["licenses","concat","require","exceptions","module","exports","source","index","hasMore","length","read","value","RegExp","chars","slice","match","indexOf","skipWhitespace","operator","string","possibilities","i","Error","type","idstring","expectIdstring","documentRef","licenseRef","identifier","begin","parseToken","tokens","token","push"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/spdx-expression-parse/scan.js"],"sourcesContent":["'use strict'\n\nvar licenses = []\n  .concat(require('spdx-license-ids'))\n  .concat(require('spdx-license-ids/deprecated'))\nvar exceptions = require('spdx-exceptions')\n\nmodule.exports = function (source) {\n  var index = 0\n\n  function hasMore () {\n    return index < source.length\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read (value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index)\n      var match = chars.match(value)\n      if (match) {\n        index += match[0].length\n        return match[0]\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length\n        return value\n      }\n    }\n  }\n\n  function skipWhitespace () {\n    read(/[ ]*/)\n  }\n\n  function operator () {\n    var string\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i])\n      if (string) {\n        break\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`')\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    }\n  }\n\n  function idstring () {\n    return read(/[A-Za-z0-9-.]+/)\n  }\n\n  function expectIdstring () {\n    var string = idstring()\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index)\n    }\n    return string\n  }\n\n  function documentRef () {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring()\n      return {type: 'DOCUMENTREF', string: string}\n    }\n  }\n\n  function licenseRef () {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring()\n      return {type: 'LICENSEREF', string: string}\n    }\n  }\n\n  function identifier () {\n    var begin = index\n    var string = idstring()\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      }\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      }\n    }\n\n    index = begin\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken () {\n    // Ordering matters\n    return (\n      operator() ||\n      documentRef() ||\n      licenseRef() ||\n      identifier()\n    )\n  }\n\n  var tokens = []\n  while (hasMore()) {\n    skipWhitespace()\n    if (!hasMore()) {\n      break\n    }\n\n    var token = parseToken()\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] +\n                      '` at offset ' + index)\n    }\n\n    tokens.push(token)\n  }\n  return tokens\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}