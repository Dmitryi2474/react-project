{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst fs = require('graceful-fs');\nconst pathExists = require('../path-exists').pathExists;\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths(srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err, stat) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink');\n        return callback(err);\n      }\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      });\n    });\n  } else {\n    const dstdir = path.dirname(dstpath);\n    const relativeToDst = path.join(dstdir, srcpath);\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err);\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        });\n      } else {\n        return fs.lstat(srcpath, (err, stat) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink');\n            return callback(err);\n          }\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          });\n        });\n      }\n    });\n  }\n}\nfunction symlinkPathsSync(srcpath, dstpath) {\n  let exists;\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath);\n    if (!exists) throw new Error('absolute srcpath does not exist');\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    };\n  } else {\n    const dstdir = path.dirname(dstpath);\n    const relativeToDst = path.join(dstdir, srcpath);\n    exists = fs.existsSync(relativeToDst);\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      };\n    } else {\n      exists = fs.existsSync(srcpath);\n      if (!exists) throw new Error('relative srcpath does not exist');\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      };\n    }\n  }\n}\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n};","map":{"version":3,"names":["path","require","fs","pathExists","symlinkPaths","srcpath","dstpath","callback","isAbsolute","lstat","err","stat","message","replace","dstdir","dirname","relativeToDst","join","exists","relative","symlinkPathsSync","existsSync","Error","module","exports"],"sources":["/home/user/Рабочий стол/pizza/project/node_modules/fs-extra/lib/ensure/symlink-paths.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err, stat) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        'toCwd': srcpath,\n        'toDst': srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          'toCwd': relativeToDst,\n          'toDst': srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err, stat) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            'toCwd': srcpath,\n            'toDst': path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      'toCwd': srcpath,\n      'toDst': srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        'toCwd': relativeToDst,\n        'toDst': srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        'toCwd': srcpath,\n        'toDst': path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}