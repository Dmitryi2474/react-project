{"ast":null,"code":"\"use strict\";\n\nvar path = require(\"path\");\nvar micromatch = require(\"micromatch\");\nvar utils = require(\"./public-utils\");\n/**\n * @param emitter\n * @returns {Function}\n */\nmodule.exports = function (emitter) {\n  /**\n   * Return a transform/through stream that listens to file\n   * paths and fires internal Browsersync events.\n   * @param {{once: boolean, match: string|array}} [opts]\n   * @returns {Stream.Transform}\n   */\n  function browserSyncThroughStream(opts) {\n    opts = opts || {};\n    var emitted = false;\n    var Transform = require(\"stream\").Transform;\n    var reload = new Transform({\n      objectMode: true\n    });\n    var changed = [];\n    reload._transform = function (file, encoding, next) {\n      var stream = this;\n      /**\n       * End is always called to send the current file down\n       * stream. Browsersync never acts upon a stream,\n       * we only `listen` to it.\n       */\n      function end() {\n        stream.push(file); // always send the file down-stream\n        next();\n      }\n      /**\n       * If {match: <pattern>} was provided, test the\n       * current filepath against it\n       */\n      if (opts.match) {\n        if (!micromatch(file.path, opts.match, {\n          dot: true\n        }).length) {\n          return end();\n        }\n      }\n      /**\n       * if {once: true} provided, emit the reload event for the\n       * first file only\n       */\n      if (opts.once === true && !emitted) {\n        utils.emitBrowserReload(emitter);\n        emitted = true;\n      } else {\n        // handle multiple\n        if (opts.once === true && emitted) {} else {\n          if (file.path) {\n            emitted = true;\n            utils.emitChangeEvent(emitter, file.path, false);\n            changed.push(path.basename(file.path));\n          }\n        }\n      }\n      end();\n    };\n    /**\n     * When this current operation has finished, emit the\n     * steam:changed event so that any loggers can pick up it\n     * @param next\n     * @private\n     */\n    reload._flush = function (next) {\n      if (changed.length) {\n        utils.emitStreamChangedEvent(emitter, changed);\n      }\n      next();\n    };\n    return reload;\n  }\n  return browserSyncThroughStream;\n};","map":{"version":3,"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAErC;;;;AAIAG,MAAM,CAACC,OAAO,GAAG,UAASC,OAAO;EAC7B;;;;;;EAMA,SAASC,wBAAwB,CAACC,IAAI;IAClCA,IAAI,GAAGA,IAAI,IAAI,EAAE;IACjB,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIC,SAAS,GAAGT,OAAO,CAAC,QAAQ,CAAC,CAACS,SAAS;IAC3C,IAAIC,MAAM,GAAG,IAAID,SAAS,CAAC;MAAEE,UAAU,EAAE;IAAI,CAAE,CAAC;IAChD,IAAIC,OAAO,GAAG,EAAE;IAEhBF,MAAM,CAACG,UAAU,GAAG,UAASC,IAAI,EAAEC,QAAQ,EAAEC,IAAI;MAC7C,IAAIC,MAAM,GAAG,IAAI;MAEjB;;;;;MAKA,SAASC,GAAG;QACRD,MAAM,CAACE,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC;QACnBE,IAAI,EAAE;MACV;MAEA;;;;MAIA,IAAIT,IAAI,CAACa,KAAK,EAAE;QACZ,IAAI,CAACnB,UAAU,CAACa,IAAI,CAACf,IAAI,EAAEQ,IAAI,CAACa,KAAK,EAAE;UAAEC,GAAG,EAAE;QAAI,CAAE,CAAC,CAACC,MAAM,EAAE;UAC1D,OAAOJ,GAAG,EAAE;;;MAIpB;;;;MAIA,IAAIX,IAAI,CAACgB,IAAI,KAAK,IAAI,IAAI,CAACf,OAAO,EAAE;QAChCN,KAAK,CAACsB,iBAAiB,CAACnB,OAAO,CAAC;QAEhCG,OAAO,GAAG,IAAI;OACjB,MAAM;QACH;QAEA,IAAID,IAAI,CAACgB,IAAI,KAAK,IAAI,IAAIf,OAAO,EAAE,EAClC,MAAM;UACH,IAAIM,IAAI,CAACf,IAAI,EAAE;YACXS,OAAO,GAAG,IAAI;YACdN,KAAK,CAACuB,eAAe,CAACpB,OAAO,EAAES,IAAI,CAACf,IAAI,EAAE,KAAK,CAAC;YAChDa,OAAO,CAACO,IAAI,CAACpB,IAAI,CAAC2B,QAAQ,CAACZ,IAAI,CAACf,IAAI,CAAC,CAAC;;;;MAKlDmB,GAAG,EAAE;IACT,CAAC;IAED;;;;;;IAMAR,MAAM,CAACiB,MAAM,GAAG,UAASX,IAAI;MACzB,IAAIJ,OAAO,CAACU,MAAM,EAAE;QAChBpB,KAAK,CAAC0B,sBAAsB,CAACvB,OAAO,EAAEO,OAAO,CAAC;;MAGlDI,IAAI,EAAE;IACV,CAAC;IAED,OAAON,MAAM;EACjB;EAEA,OAAOJ,wBAAwB;AACnC,CAAC","names":["path","require","micromatch","utils","module","exports","emitter","browserSyncThroughStream","opts","emitted","Transform","reload","objectMode","changed","_transform","file","encoding","next","stream","end","push","match","dot","length","once","emitBrowserReload","emitChangeEvent","basename","_flush","emitStreamChangedEvent"],"sources":["../../lib/public/stream.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}