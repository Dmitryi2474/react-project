{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"./lodash.custom\");\nvar fs = require(\"fs\");\nvar config = require(\"./config\");\nfunction getPath(options, relative, port) {\n  if (options.get(\"mode\") === \"snippet\") {\n    return options.get(\"scheme\") + \"://HOST:\" + port + relative;\n  } else {\n    return \"//HOST:\" + port + relative;\n  }\n}\nvar connectUtils = {\n  /**\n   * @param {Immutable.Map} options\n   * @returns {String}\n   */\n  scriptTags: function (options) {\n    var scriptPath = this.clientScript(options);\n    var async = options.getIn([\"snippetOptions\", \"async\"]);\n    var scriptDomain = options.getIn([\"script\", \"domain\"]);\n    /**\n     * Generate the [src] attribute based on user options\n     */\n    var scriptSrc = function () {\n      if (options.get(\"localOnly\")) {\n        return [options.get(\"scheme\"), \"://localhost:\", options.get(\"port\"), scriptPath].join(\"\");\n      }\n      /**\n       * First, was \"scriptPath\" set? if so the user wanted full control over the\n       * script tag output\n       *\n       */\n      if (_.isFunction(options.get(\"scriptPath\"))) {\n        return options.get(\"scriptPath\").apply(null, getScriptArgs(options, scriptPath));\n      }\n      /**\n       * Next, if \"script.domain\" was given, allow that + the path to the JS file\n       * eg:\n       *  script.domain=localhost:3000\n       * -> localhost:3000/browser-sync/browser-sync-client.js\n       */\n      if (scriptDomain) {\n        if (_.isFunction(scriptDomain)) {\n          return scriptDomain.call(null, options) + scriptPath;\n        }\n        if (scriptDomain.match(/\\{port\\}/)) {\n          return scriptDomain.replace(\"{port}\", options.get(\"port\")) + scriptPath;\n        }\n        return scriptDomain + scriptPath;\n      }\n      /**\n       * Now if server or proxy, use dynamic script\n       * eg:\n       *  browser-sync start --server\n       * ->\n       *  \"HOST:3000/browser-sync/browser-sync-client.js\".replace(\"HOST\", location.hostname)\n       */\n      if (options.get(\"server\") || options.get(\"proxy\")) {\n        return scriptPath;\n      }\n      /**\n       * Final use case is snippet mode\n       * -> \"http://HOST:3000/browser-sync/browser-sync-client.js\".replace(\"HOST\", location.hostname)\n       * -> \"//HOST:3000/browser-sync/browser-sync-client.js\".replace(\"HOST\", location.hostname)\"\n       */\n      return getPath(options, scriptPath, options.get(\"port\"));\n    }();\n    /**\n     * Decide which template shall be used to generate the script tags\n     */\n    var template = function () {\n      if (scriptDomain || options.get(\"localOnly\")) {\n        return config.templates.scriptTagSimple;\n      }\n      return config.templates.scriptTag;\n    }();\n    /**\n     * Finally read the template file from disk and replace\n     * the dynamic values.\n     */\n    return fs.readFileSync(template, \"utf8\").replace(\"%script%\", scriptSrc).replace(\"%async%\", async ? \"async\" : \"\");\n  },\n  /**\n   * @param {Map} options\n   * @returns {String}\n   */\n  socketConnector: function (options) {\n    var socket = options.get(\"socket\");\n    var template = fs.readFileSync(config.templates.connector, \"utf-8\");\n    var url = connectUtils.getConnectionUrl(options);\n    /**\n     * ***Backwards compatibility***. While `socket.path` is technically a\n     * socketIoClientConfig property, it's been documented previously\n     * as a top-level option, so must stay.\n     */\n    var clientConfig = socket.get(\"socketIoClientConfig\").merge({\n      path: socket.get(\"path\")\n    });\n    template = template.replace(\"%config%\", JSON.stringify(clientConfig.toJS())).replace(\"%options%\", JSON.stringify(options)).replace(\"%url%\", url);\n    return template;\n  },\n  /**\n   * @param {Object} socketOpts\n   * @param {Map} options\n   * @returns {String|Function}\n   */\n  getNamespace: function (socketOpts, options) {\n    var namespace = socketOpts.namespace;\n    if (typeof namespace === \"function\") {\n      return namespace(options);\n    }\n    if (!namespace.match(/^\\//)) {\n      namespace = \"/\" + namespace;\n    }\n    return namespace;\n  },\n  /**\n   * @param {Map} options\n   * @returns {string}\n   */\n  getConnectionUrl: function (options) {\n    var socketOpts = options.get(\"socket\").toJS();\n    var namespace = connectUtils.getNamespace(socketOpts, options);\n    var protocol = \"\";\n    var withHostnamePort = \"'{protocol}' + location.hostname + ':{port}{ns}'\";\n    var withHost = \"'{protocol}' + location.host + '{ns}'\";\n    var withDomain = \"'{domain}{ns}'\";\n    var port = options.get(\"port\");\n    // default use-case is server/proxy\n    var string = withHost;\n    if (options.get(\"mode\") !== \"server\") {\n      protocol = options.get(\"scheme\") + \"://\";\n      string = withHostnamePort;\n    }\n    if (options.get(\"mode\") === \"proxy\" && options.getIn([\"proxy\", \"ws\"])) {\n      port = options.getIn([\"socket\", \"port\"]);\n    }\n    /**\n     * Ensure socket.domain is always a string (for noop replacements later)\n     */\n    socketOpts.domain = function () {\n      if (options.get(\"localOnly\")) {\n        string = withDomain;\n        return [options.get(\"scheme\"), \"://localhost:\", options.get(\"port\")].join(\"\");\n      }\n      if (socketOpts.domain) {\n        string = withDomain;\n        /**\n         * User provided a function\n         */\n        if (_.isFunction(socketOpts.domain)) {\n          return socketOpts.domain.call(null, options);\n        }\n        /**\n         * User provided a string\n         */\n        if (_.isString(socketOpts.domain)) {\n          return socketOpts.domain;\n        }\n      }\n      return \"\";\n    }();\n    return string.replace(\"{protocol}\", protocol).replace(\"{port}\", port).replace(\"{domain}\", socketOpts.domain.replace(\"{port}\", port)).replace(\"{ns}\", namespace);\n  },\n  /**\n   * @param {Object} [options]\n   * @param {Boolean} [both]\n   */\n  clientScript: function (options, both) {\n    var prefix = options.getIn([\"socket\", \"clientPath\"]);\n    var script = prefix + \"/browser-sync-client.js\";\n    var versioned = prefix + \"/browser-sync-client.js?v=\" + options.get(\"version\");\n    if (both) {\n      return {\n        path: script,\n        versioned: versioned\n      };\n    }\n    return versioned;\n  }\n};\n/**\n * @param options\n * @returns {*[]}\n */\nfunction getScriptArgs(options, scriptPath) {\n  var abspath = options.get(\"scheme\") + \"://HOST:\" + options.get(\"port\") + scriptPath;\n  return [scriptPath, options.get(\"port\"), options.set(\"absolute\", abspath)];\n}\nmodule.exports = connectUtils;","map":{"version":3,"mappings":"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","names":["_","require","fs","config","getPath","options","relative","port","get","connectUtils","scriptTags","scriptPath","clientScript","async","getIn","scriptDomain","scriptSrc","join","isFunction","apply","getScriptArgs","call","match","replace","template","templates","scriptTagSimple","scriptTag","readFileSync","socketConnector","socket","connector","url","getConnectionUrl","clientConfig","merge","path","JSON","stringify","toJS","getNamespace","socketOpts","namespace","protocol","withHostnamePort","withHost","withDomain","string","domain","isString","both","prefix","script","versioned","abspath","set","module","exports"],"sources":["../lib/connect-utils.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}